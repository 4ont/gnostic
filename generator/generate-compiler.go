// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"fmt"
	"strings"
)

func (classes *ClassCollection) generateCompiler(packageName string, license string) string {
	code := CodeBuilder{}
	code.AddLine(license)
	code.AddLine("// THIS FILE IS AUTOMATICALLY GENERATED.")
	code.AddLine()
	code.AddLine("package main")
	code.AddLine()
	code.AddLine("import (")
	code.AddLine("\"log\"")
	code.AddLine("pb \"openapi\"")
	code.AddLine(")")
	code.AddLine()
	code.AddLine("func version() string {")
	code.AddLine("  return \"OpenAPIv2\"")
	code.AddLine("}")
	code.AddLine()

	classNames := classes.sortedClassNames()
	for _, className := range classNames {
		code.AddLine("func build%sForMap(in interface{}) *pb.%s {", className, className)
		code.AddLine("m, keys, ok := unpackMap(in)")
		code.AddLine("if (!ok) {")
		code.AddLine("log.Printf(\"unexpected argument to build%sForMap: %%+v\", in)", className)
		code.AddLine("log.Printf(\"%%d\\n\", len(m))")
		code.AddLine("log.Printf(\"%%+v\\n\", keys)")
		code.AddLine("return nil")
		code.AddLine("}")
		code.AddLine("  x := &pb.%s{}", className)

		classModel := classes.ClassModels[className]
		parentClassName := className

		oneOfWrapper := classModel.OneOfWrapper

		propertyNames := classModel.sortedPropertyNames()
		var fieldNumber = 0
		for _, propertyName := range propertyNames {
			propertyModel := classModel.Properties[propertyName]
			fieldNumber += 1
			propertyType := propertyModel.Type
			if propertyType == "int" {
				propertyType = "int64"
			}
			var displayName = propertyName
			if displayName == "$ref" {
				displayName = "_ref"
			}
			if displayName == "$schema" {
				displayName = "_schema"
			}
			displayName = camelCaseToSnakeCase(displayName)

			var line = fmt.Sprintf("%s %s = %d;", propertyType, displayName, fieldNumber)
			if propertyModel.Repeated {
				line = "repeated " + line
			}
			code.AddLine("// " + line)

			fieldName := strings.Title(propertyName)
			if propertyName == "$ref" {
				fieldName = "XRef"
			}

			if propertyModel.Pattern == "" && !oneOfWrapper {
				code.AddLine("if mapHasKey(m, \"%s\") {", propertyName)
			}

			classModel, classFound := classes.ClassModels[propertyType]
			if classFound {
				if propertyModel.Repeated {
					code.AddLine("// repeated class %s", classModel.Name)
					code.AddLine("x.%s = make([]*pb.%s, 0)", fieldName, classModel.Name)
					code.AddLine("a, ok := m[\"%s\"].([]interface{})", propertyName)
					code.AddLine("if ok {")
					code.AddLine("for _, item := range a {")
					code.AddLine("x.%s = append(x.%s, build%sForMap(item))", fieldName, fieldName, classModel.Name)
					code.AddLine("}")
					code.AddLine("}")
				} else {
					if oneOfWrapper {
						code.AddLine("x.Oneof = &pb.%s_%s{%s: build%sForMap(m)}",
							parentClassName, classModel.Name, classModel.Name, classModel.Name)
					} else {
						code.AddLine("x.%s = build%sForMap(m[\"%v\"])", fieldName, classModel.Name, propertyName)
					}
				}
			} else if propertyType == "string" {
				if propertyModel.Repeated {
					code.AddLine("v, ok := m[\"%v\"].([]interface{})", propertyName)
					code.AddLine("if ok {")
					code.AddLine("x.%s = convertInterfaceArrayToStringArray(v)", fieldName)
					code.AddLine("} else {")
					code.AddLine(" log.Printf(\"unexpected: %%+v\", m[\"%v\"])", propertyName)
					code.AddLine("}")
				} else {
					code.AddLine("x.%s = m[\"%v\"].(string)", fieldName, propertyName)
				}
			} else if propertyType == "float" {
				code.AddLine("x.%s = m[\"%v\"].(float64)", fieldName, propertyName)

			} else if propertyType == "int64" {
				code.AddLine("x.%s = m[\"%v\"].(int64)", fieldName, propertyName)

			} else if propertyType == "bool" {
				code.AddLine("x.%s = m[\"%v\"].(bool)", fieldName, propertyName)

			} else {
				isMap, mapTypeName := mapTypeInfo(propertyType)
				if isMap {
					code.AddLine("// MAP: %s %s", mapTypeName, propertyModel.Pattern)
					if mapTypeName == "string" {
						code.AddLine("x.%s = make(map[string]string, 0)", fieldName)
					} else {
						code.AddLine("x.%s = make(map[string]*pb.%s, 0)", fieldName, mapTypeName)
					}
					code.AddLine("for k, v := range m {")
					code.AddLine("if patternMatches(\"%s\", k) {", propertyModel.Pattern)
					if mapTypeName == "string" {
						code.AddLine("x.%s[k] = v.(string)", fieldName)
					} else {
						code.AddLine("x.%s[k] = build%vForMap(v)", fieldName, mapTypeName)
					}
					code.AddLine("}")
					code.AddLine("}")

				} else {
					code.AddLine("// TODO: %s", propertyType)
				}
			}

			if propertyModel.Pattern == "" && !oneOfWrapper {
				code.AddLine("}")
			}
		}

		code.AddLine("  return x")
		code.AddLine("}\n")
	}

	return code.Text()
}
