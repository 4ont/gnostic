// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// THIS FILE IS AUTOMATICALLY GENERATED.

package openapi_v2

import (
	"encoding/json"
	"github.com/googleapis/openapi-compiler/helpers"
	"log"
)

func Version() string {
	return "openapi_v2"
}

func NewAdditionalPropertiesItem(in interface{}) *AdditionalPropertiesItem {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewAdditionalPropertiesItem: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	allowedKeys := []string{"boolean", "schema"}
	allowedPatterns := []string{}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &AdditionalPropertiesItem{}
	// Schema schema = 1;
	v1 := helpers.MapValueForKey(m, "schema")
	if v1 != nil {
		x.Schema = NewSchema(v1)
	}
	// bool boolean = 2;
	v2 := helpers.MapValueForKey(m, "boolean")
	if v2 != nil {
		x.Boolean = v2.(bool)
	}
	return x
}

func NewAny(in interface{}) *Any {
	x := &Any{}
	bytes, _ := json.Marshal(in)
	x.Value = string(bytes)
	return x
}

func NewApiKeySecurity(in interface{}) *ApiKeySecurity {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewApiKeySecurity: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	requiredKeys := []string{"in", "name", "type"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"description", "in", "name", "type"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &ApiKeySecurity{}
	// string type = 1;
	v1 := helpers.MapValueForKey(m, "type")
	if v1 != nil {
		x.Type = v1.(string)
	}
	// string name = 2;
	v2 := helpers.MapValueForKey(m, "name")
	if v2 != nil {
		x.Name = v2.(string)
	}
	// string in = 3;
	v3 := helpers.MapValueForKey(m, "in")
	if v3 != nil {
		x.In = v3.(string)
	}
	// string description = 4;
	v4 := helpers.MapValueForKey(m, "description")
	if v4 != nil {
		x.Description = v4.(string)
	}
	// repeated NamedAny vendor_extension = 5;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = NewAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func NewBasicAuthenticationSecurity(in interface{}) *BasicAuthenticationSecurity {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewBasicAuthenticationSecurity: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	requiredKeys := []string{"type"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"description", "type"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &BasicAuthenticationSecurity{}
	// string type = 1;
	v1 := helpers.MapValueForKey(m, "type")
	if v1 != nil {
		x.Type = v1.(string)
	}
	// string description = 2;
	v2 := helpers.MapValueForKey(m, "description")
	if v2 != nil {
		x.Description = v2.(string)
	}
	// repeated NamedAny vendor_extension = 3;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = NewAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func NewBodyParameter(in interface{}) *BodyParameter {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewBodyParameter: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	requiredKeys := []string{"in", "name", "schema"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"description", "in", "name", "required", "schema"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &BodyParameter{}
	// string description = 1;
	v1 := helpers.MapValueForKey(m, "description")
	if v1 != nil {
		x.Description = v1.(string)
	}
	// string name = 2;
	v2 := helpers.MapValueForKey(m, "name")
	if v2 != nil {
		x.Name = v2.(string)
	}
	// string in = 3;
	v3 := helpers.MapValueForKey(m, "in")
	if v3 != nil {
		x.In = v3.(string)
	}
	// bool required = 4;
	v4 := helpers.MapValueForKey(m, "required")
	if v4 != nil {
		x.Required = v4.(bool)
	}
	// Schema schema = 5;
	v5 := helpers.MapValueForKey(m, "schema")
	if v5 != nil {
		x.Schema = NewSchema(v5)
	}
	// repeated NamedAny vendor_extension = 6;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = NewAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func NewContact(in interface{}) *Contact {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewContact: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	allowedKeys := []string{"email", "name", "url"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Contact{}
	// string name = 1;
	v1 := helpers.MapValueForKey(m, "name")
	if v1 != nil {
		x.Name = v1.(string)
	}
	// string url = 2;
	v2 := helpers.MapValueForKey(m, "url")
	if v2 != nil {
		x.Url = v2.(string)
	}
	// string email = 3;
	v3 := helpers.MapValueForKey(m, "email")
	if v3 != nil {
		x.Email = v3.(string)
	}
	// repeated NamedAny vendor_extension = 4;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = NewAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func NewDefault(in interface{}) *Default {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewDefault: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	x := &Default{}
	// repeated NamedAny additional_properties = 1;
	// MAP: Any
	x.AdditionalProperties = make([]*NamedAny, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		pair := &NamedAny{}
		pair.Name = k
		pair.Value = NewAny(v)
		x.AdditionalProperties = append(x.AdditionalProperties, pair)
	}
	return x
}

func NewDefinitions(in interface{}) *Definitions {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewDefinitions: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	x := &Definitions{}
	// repeated NamedSchema additional_properties = 1;
	// MAP: Schema
	x.AdditionalProperties = make([]*NamedSchema, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		pair := &NamedSchema{}
		pair.Name = k
		pair.Value = NewSchema(v)
		x.AdditionalProperties = append(x.AdditionalProperties, pair)
	}
	return x
}

func NewDocument(in interface{}) *Document {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewDocument: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	requiredKeys := []string{"info", "paths", "swagger"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"basePath", "consumes", "definitions", "externalDocs", "host", "info", "parameters", "paths", "produces", "responses", "schemes", "security", "securityDefinitions", "swagger", "tags"}
	allowedPatterns := []string{}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Document{}
	// string swagger = 1;
	v1 := helpers.MapValueForKey(m, "swagger")
	if v1 != nil {
		x.Swagger = v1.(string)
	}
	// Info info = 2;
	v2 := helpers.MapValueForKey(m, "info")
	if v2 != nil {
		x.Info = NewInfo(v2)
	}
	// string host = 3;
	v3 := helpers.MapValueForKey(m, "host")
	if v3 != nil {
		x.Host = v3.(string)
	}
	// string base_path = 4;
	v4 := helpers.MapValueForKey(m, "basePath")
	if v4 != nil {
		x.BasePath = v4.(string)
	}
	// repeated string schemes = 5;
	v5 := helpers.MapValueForKey(m, "schemes")
	if v5 != nil {
		v, ok := v5.([]interface{})
		if ok {
			x.Schemes = helpers.ConvertInterfaceArrayToStringArray(v)
		} else {
			log.Printf("unexpected: %+v", helpers.MapValueForKey(m, "schemes"))
		}
	}
	// repeated string consumes = 6;
	v6 := helpers.MapValueForKey(m, "consumes")
	if v6 != nil {
		v, ok := v6.([]interface{})
		if ok {
			x.Consumes = helpers.ConvertInterfaceArrayToStringArray(v)
		} else {
			log.Printf("unexpected: %+v", helpers.MapValueForKey(m, "consumes"))
		}
	}
	// repeated string produces = 7;
	v7 := helpers.MapValueForKey(m, "produces")
	if v7 != nil {
		v, ok := v7.([]interface{})
		if ok {
			x.Produces = helpers.ConvertInterfaceArrayToStringArray(v)
		} else {
			log.Printf("unexpected: %+v", helpers.MapValueForKey(m, "produces"))
		}
	}
	// Paths paths = 8;
	v8 := helpers.MapValueForKey(m, "paths")
	if v8 != nil {
		x.Paths = NewPaths(v8)
	}
	// Definitions definitions = 9;
	v9 := helpers.MapValueForKey(m, "definitions")
	if v9 != nil {
		x.Definitions = NewDefinitions(v9)
	}
	// ParameterDefinitions parameters = 10;
	v10 := helpers.MapValueForKey(m, "parameters")
	if v10 != nil {
		x.Parameters = NewParameterDefinitions(v10)
	}
	// ResponseDefinitions responses = 11;
	v11 := helpers.MapValueForKey(m, "responses")
	if v11 != nil {
		x.Responses = NewResponseDefinitions(v11)
	}
	// repeated SecurityRequirement security = 12;
	v12 := helpers.MapValueForKey(m, "security")
	if v12 != nil {
		// repeated class SecurityRequirement
		x.Security = make([]*SecurityRequirement, 0)
		a, ok := v12.([]interface{})
		if ok {
			for _, item := range a {
				x.Security = append(x.Security, NewSecurityRequirement(item))
			}
		}
	}
	// SecurityDefinitions security_definitions = 13;
	v13 := helpers.MapValueForKey(m, "securityDefinitions")
	if v13 != nil {
		x.SecurityDefinitions = NewSecurityDefinitions(v13)
	}
	// repeated Tag tags = 14;
	v14 := helpers.MapValueForKey(m, "tags")
	if v14 != nil {
		// repeated class Tag
		x.Tags = make([]*Tag, 0)
		a, ok := v14.([]interface{})
		if ok {
			for _, item := range a {
				x.Tags = append(x.Tags, NewTag(item))
			}
		}
	}
	// ExternalDocs external_docs = 15;
	v15 := helpers.MapValueForKey(m, "externalDocs")
	if v15 != nil {
		x.ExternalDocs = NewExternalDocs(v15)
	}
	return x
}

func NewExamples(in interface{}) *Examples {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewExamples: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	x := &Examples{}
	// repeated NamedAny additional_properties = 1;
	// MAP: Any
	x.AdditionalProperties = make([]*NamedAny, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		pair := &NamedAny{}
		pair.Name = k
		pair.Value = NewAny(v)
		x.AdditionalProperties = append(x.AdditionalProperties, pair)
	}
	return x
}

func NewExternalDocs(in interface{}) *ExternalDocs {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewExternalDocs: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	requiredKeys := []string{"url"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"description", "url"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &ExternalDocs{}
	// string description = 1;
	v1 := helpers.MapValueForKey(m, "description")
	if v1 != nil {
		x.Description = v1.(string)
	}
	// string url = 2;
	v2 := helpers.MapValueForKey(m, "url")
	if v2 != nil {
		x.Url = v2.(string)
	}
	// repeated NamedAny vendor_extension = 3;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = NewAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func NewFileSchema(in interface{}) *FileSchema {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewFileSchema: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	requiredKeys := []string{"type"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"default", "description", "example", "externalDocs", "format", "readOnly", "required", "title", "type"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &FileSchema{}
	// string format = 1;
	v1 := helpers.MapValueForKey(m, "format")
	if v1 != nil {
		x.Format = v1.(string)
	}
	// string title = 2;
	v2 := helpers.MapValueForKey(m, "title")
	if v2 != nil {
		x.Title = v2.(string)
	}
	// string description = 3;
	v3 := helpers.MapValueForKey(m, "description")
	if v3 != nil {
		x.Description = v3.(string)
	}
	// Any default = 4;
	v4 := helpers.MapValueForKey(m, "default")
	if v4 != nil {
		x.Default = NewAny(v4)
	}
	// repeated string required = 5;
	v5 := helpers.MapValueForKey(m, "required")
	if v5 != nil {
		v, ok := v5.([]interface{})
		if ok {
			x.Required = helpers.ConvertInterfaceArrayToStringArray(v)
		} else {
			log.Printf("unexpected: %+v", helpers.MapValueForKey(m, "required"))
		}
	}
	// string type = 6;
	v6 := helpers.MapValueForKey(m, "type")
	if v6 != nil {
		x.Type = v6.(string)
	}
	// bool read_only = 7;
	v7 := helpers.MapValueForKey(m, "readOnly")
	if v7 != nil {
		x.ReadOnly = v7.(bool)
	}
	// ExternalDocs external_docs = 8;
	v8 := helpers.MapValueForKey(m, "externalDocs")
	if v8 != nil {
		x.ExternalDocs = NewExternalDocs(v8)
	}
	// Any example = 9;
	v9 := helpers.MapValueForKey(m, "example")
	if v9 != nil {
		x.Example = NewAny(v9)
	}
	// repeated NamedAny vendor_extension = 10;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = NewAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func NewFormDataParameterSubSchema(in interface{}) *FormDataParameterSubSchema {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewFormDataParameterSubSchema: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	allowedKeys := []string{"allowEmptyValue", "collectionFormat", "default", "description", "enum", "exclusiveMaximum", "exclusiveMinimum", "format", "in", "items", "maxItems", "maxLength", "maximum", "minItems", "minLength", "minimum", "multipleOf", "name", "pattern", "required", "type", "uniqueItems"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &FormDataParameterSubSchema{}
	// bool required = 1;
	v1 := helpers.MapValueForKey(m, "required")
	if v1 != nil {
		x.Required = v1.(bool)
	}
	// string in = 2;
	v2 := helpers.MapValueForKey(m, "in")
	if v2 != nil {
		x.In = v2.(string)
	}
	// string description = 3;
	v3 := helpers.MapValueForKey(m, "description")
	if v3 != nil {
		x.Description = v3.(string)
	}
	// string name = 4;
	v4 := helpers.MapValueForKey(m, "name")
	if v4 != nil {
		x.Name = v4.(string)
	}
	// bool allow_empty_value = 5;
	v5 := helpers.MapValueForKey(m, "allowEmptyValue")
	if v5 != nil {
		x.AllowEmptyValue = v5.(bool)
	}
	// string type = 6;
	v6 := helpers.MapValueForKey(m, "type")
	if v6 != nil {
		x.Type = v6.(string)
	}
	// string format = 7;
	v7 := helpers.MapValueForKey(m, "format")
	if v7 != nil {
		x.Format = v7.(string)
	}
	// PrimitivesItems items = 8;
	v8 := helpers.MapValueForKey(m, "items")
	if v8 != nil {
		x.Items = NewPrimitivesItems(v8)
	}
	// string collection_format = 9;
	v9 := helpers.MapValueForKey(m, "collectionFormat")
	if v9 != nil {
		x.CollectionFormat = v9.(string)
	}
	// Any default = 10;
	v10 := helpers.MapValueForKey(m, "default")
	if v10 != nil {
		x.Default = NewAny(v10)
	}
	// float maximum = 11;
	v11 := helpers.MapValueForKey(m, "maximum")
	if v11 != nil {
		x.Maximum = v11.(float64)
	}
	// bool exclusive_maximum = 12;
	v12 := helpers.MapValueForKey(m, "exclusiveMaximum")
	if v12 != nil {
		x.ExclusiveMaximum = v12.(bool)
	}
	// float minimum = 13;
	v13 := helpers.MapValueForKey(m, "minimum")
	if v13 != nil {
		x.Minimum = v13.(float64)
	}
	// bool exclusive_minimum = 14;
	v14 := helpers.MapValueForKey(m, "exclusiveMinimum")
	if v14 != nil {
		x.ExclusiveMinimum = v14.(bool)
	}
	// int64 max_length = 15;
	v15 := helpers.MapValueForKey(m, "maxLength")
	if v15 != nil {
		x.MaxLength = v15.(int64)
	}
	// int64 min_length = 16;
	v16 := helpers.MapValueForKey(m, "minLength")
	if v16 != nil {
		x.MinLength = v16.(int64)
	}
	// string pattern = 17;
	v17 := helpers.MapValueForKey(m, "pattern")
	if v17 != nil {
		x.Pattern = v17.(string)
	}
	// int64 max_items = 18;
	v18 := helpers.MapValueForKey(m, "maxItems")
	if v18 != nil {
		x.MaxItems = v18.(int64)
	}
	// int64 min_items = 19;
	v19 := helpers.MapValueForKey(m, "minItems")
	if v19 != nil {
		x.MinItems = v19.(int64)
	}
	// bool unique_items = 20;
	v20 := helpers.MapValueForKey(m, "uniqueItems")
	if v20 != nil {
		x.UniqueItems = v20.(bool)
	}
	// repeated Any enum = 21;
	v21 := helpers.MapValueForKey(m, "enum")
	if v21 != nil {
		// repeated class Any
		x.Enum = make([]*Any, 0)
		a, ok := v21.([]interface{})
		if ok {
			for _, item := range a {
				x.Enum = append(x.Enum, NewAny(item))
			}
		}
	}
	// float multiple_of = 22;
	v22 := helpers.MapValueForKey(m, "multipleOf")
	if v22 != nil {
		x.MultipleOf = v22.(float64)
	}
	// repeated NamedAny vendor_extension = 23;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = NewAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func NewHeader(in interface{}) *Header {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewHeader: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	requiredKeys := []string{"type"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"collectionFormat", "default", "description", "enum", "exclusiveMaximum", "exclusiveMinimum", "format", "items", "maxItems", "maxLength", "maximum", "minItems", "minLength", "minimum", "multipleOf", "pattern", "type", "uniqueItems"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Header{}
	// string type = 1;
	v1 := helpers.MapValueForKey(m, "type")
	if v1 != nil {
		x.Type = v1.(string)
	}
	// string format = 2;
	v2 := helpers.MapValueForKey(m, "format")
	if v2 != nil {
		x.Format = v2.(string)
	}
	// PrimitivesItems items = 3;
	v3 := helpers.MapValueForKey(m, "items")
	if v3 != nil {
		x.Items = NewPrimitivesItems(v3)
	}
	// string collection_format = 4;
	v4 := helpers.MapValueForKey(m, "collectionFormat")
	if v4 != nil {
		x.CollectionFormat = v4.(string)
	}
	// Any default = 5;
	v5 := helpers.MapValueForKey(m, "default")
	if v5 != nil {
		x.Default = NewAny(v5)
	}
	// float maximum = 6;
	v6 := helpers.MapValueForKey(m, "maximum")
	if v6 != nil {
		x.Maximum = v6.(float64)
	}
	// bool exclusive_maximum = 7;
	v7 := helpers.MapValueForKey(m, "exclusiveMaximum")
	if v7 != nil {
		x.ExclusiveMaximum = v7.(bool)
	}
	// float minimum = 8;
	v8 := helpers.MapValueForKey(m, "minimum")
	if v8 != nil {
		x.Minimum = v8.(float64)
	}
	// bool exclusive_minimum = 9;
	v9 := helpers.MapValueForKey(m, "exclusiveMinimum")
	if v9 != nil {
		x.ExclusiveMinimum = v9.(bool)
	}
	// int64 max_length = 10;
	v10 := helpers.MapValueForKey(m, "maxLength")
	if v10 != nil {
		x.MaxLength = v10.(int64)
	}
	// int64 min_length = 11;
	v11 := helpers.MapValueForKey(m, "minLength")
	if v11 != nil {
		x.MinLength = v11.(int64)
	}
	// string pattern = 12;
	v12 := helpers.MapValueForKey(m, "pattern")
	if v12 != nil {
		x.Pattern = v12.(string)
	}
	// int64 max_items = 13;
	v13 := helpers.MapValueForKey(m, "maxItems")
	if v13 != nil {
		x.MaxItems = v13.(int64)
	}
	// int64 min_items = 14;
	v14 := helpers.MapValueForKey(m, "minItems")
	if v14 != nil {
		x.MinItems = v14.(int64)
	}
	// bool unique_items = 15;
	v15 := helpers.MapValueForKey(m, "uniqueItems")
	if v15 != nil {
		x.UniqueItems = v15.(bool)
	}
	// repeated Any enum = 16;
	v16 := helpers.MapValueForKey(m, "enum")
	if v16 != nil {
		// repeated class Any
		x.Enum = make([]*Any, 0)
		a, ok := v16.([]interface{})
		if ok {
			for _, item := range a {
				x.Enum = append(x.Enum, NewAny(item))
			}
		}
	}
	// float multiple_of = 17;
	v17 := helpers.MapValueForKey(m, "multipleOf")
	if v17 != nil {
		x.MultipleOf = v17.(float64)
	}
	// string description = 18;
	v18 := helpers.MapValueForKey(m, "description")
	if v18 != nil {
		x.Description = v18.(string)
	}
	// repeated NamedAny vendor_extension = 19;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = NewAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func NewHeaderParameterSubSchema(in interface{}) *HeaderParameterSubSchema {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewHeaderParameterSubSchema: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	allowedKeys := []string{"collectionFormat", "default", "description", "enum", "exclusiveMaximum", "exclusiveMinimum", "format", "in", "items", "maxItems", "maxLength", "maximum", "minItems", "minLength", "minimum", "multipleOf", "name", "pattern", "required", "type", "uniqueItems"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &HeaderParameterSubSchema{}
	// bool required = 1;
	v1 := helpers.MapValueForKey(m, "required")
	if v1 != nil {
		x.Required = v1.(bool)
	}
	// string in = 2;
	v2 := helpers.MapValueForKey(m, "in")
	if v2 != nil {
		x.In = v2.(string)
	}
	// string description = 3;
	v3 := helpers.MapValueForKey(m, "description")
	if v3 != nil {
		x.Description = v3.(string)
	}
	// string name = 4;
	v4 := helpers.MapValueForKey(m, "name")
	if v4 != nil {
		x.Name = v4.(string)
	}
	// string type = 5;
	v5 := helpers.MapValueForKey(m, "type")
	if v5 != nil {
		x.Type = v5.(string)
	}
	// string format = 6;
	v6 := helpers.MapValueForKey(m, "format")
	if v6 != nil {
		x.Format = v6.(string)
	}
	// PrimitivesItems items = 7;
	v7 := helpers.MapValueForKey(m, "items")
	if v7 != nil {
		x.Items = NewPrimitivesItems(v7)
	}
	// string collection_format = 8;
	v8 := helpers.MapValueForKey(m, "collectionFormat")
	if v8 != nil {
		x.CollectionFormat = v8.(string)
	}
	// Any default = 9;
	v9 := helpers.MapValueForKey(m, "default")
	if v9 != nil {
		x.Default = NewAny(v9)
	}
	// float maximum = 10;
	v10 := helpers.MapValueForKey(m, "maximum")
	if v10 != nil {
		x.Maximum = v10.(float64)
	}
	// bool exclusive_maximum = 11;
	v11 := helpers.MapValueForKey(m, "exclusiveMaximum")
	if v11 != nil {
		x.ExclusiveMaximum = v11.(bool)
	}
	// float minimum = 12;
	v12 := helpers.MapValueForKey(m, "minimum")
	if v12 != nil {
		x.Minimum = v12.(float64)
	}
	// bool exclusive_minimum = 13;
	v13 := helpers.MapValueForKey(m, "exclusiveMinimum")
	if v13 != nil {
		x.ExclusiveMinimum = v13.(bool)
	}
	// int64 max_length = 14;
	v14 := helpers.MapValueForKey(m, "maxLength")
	if v14 != nil {
		x.MaxLength = v14.(int64)
	}
	// int64 min_length = 15;
	v15 := helpers.MapValueForKey(m, "minLength")
	if v15 != nil {
		x.MinLength = v15.(int64)
	}
	// string pattern = 16;
	v16 := helpers.MapValueForKey(m, "pattern")
	if v16 != nil {
		x.Pattern = v16.(string)
	}
	// int64 max_items = 17;
	v17 := helpers.MapValueForKey(m, "maxItems")
	if v17 != nil {
		x.MaxItems = v17.(int64)
	}
	// int64 min_items = 18;
	v18 := helpers.MapValueForKey(m, "minItems")
	if v18 != nil {
		x.MinItems = v18.(int64)
	}
	// bool unique_items = 19;
	v19 := helpers.MapValueForKey(m, "uniqueItems")
	if v19 != nil {
		x.UniqueItems = v19.(bool)
	}
	// repeated Any enum = 20;
	v20 := helpers.MapValueForKey(m, "enum")
	if v20 != nil {
		// repeated class Any
		x.Enum = make([]*Any, 0)
		a, ok := v20.([]interface{})
		if ok {
			for _, item := range a {
				x.Enum = append(x.Enum, NewAny(item))
			}
		}
	}
	// float multiple_of = 21;
	v21 := helpers.MapValueForKey(m, "multipleOf")
	if v21 != nil {
		x.MultipleOf = v21.(float64)
	}
	// repeated NamedAny vendor_extension = 22;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = NewAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func NewHeaders(in interface{}) *Headers {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewHeaders: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	x := &Headers{}
	// repeated NamedHeader additional_properties = 1;
	// MAP: Header
	x.AdditionalProperties = make([]*NamedHeader, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		pair := &NamedHeader{}
		pair.Name = k
		pair.Value = NewHeader(v)
		x.AdditionalProperties = append(x.AdditionalProperties, pair)
	}
	return x
}

func NewInfo(in interface{}) *Info {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewInfo: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	requiredKeys := []string{"title", "version"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"contact", "description", "license", "termsOfService", "title", "version"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Info{}
	// string title = 1;
	v1 := helpers.MapValueForKey(m, "title")
	if v1 != nil {
		x.Title = v1.(string)
	}
	// string version = 2;
	v2 := helpers.MapValueForKey(m, "version")
	if v2 != nil {
		x.Version = v2.(string)
	}
	// string description = 3;
	v3 := helpers.MapValueForKey(m, "description")
	if v3 != nil {
		x.Description = v3.(string)
	}
	// string terms_of_service = 4;
	v4 := helpers.MapValueForKey(m, "termsOfService")
	if v4 != nil {
		x.TermsOfService = v4.(string)
	}
	// Contact contact = 5;
	v5 := helpers.MapValueForKey(m, "contact")
	if v5 != nil {
		x.Contact = NewContact(v5)
	}
	// License license = 6;
	v6 := helpers.MapValueForKey(m, "license")
	if v6 != nil {
		x.License = NewLicense(v6)
	}
	// repeated NamedAny vendor_extension = 7;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = NewAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func NewItemsItem(in interface{}) *ItemsItem {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewItemsItem: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	x := &ItemsItem{}
	if ok {
		x.Schema = make([]*Schema, 0)
		x.Schema = append(x.Schema, NewSchema(m))
	} else {
		log.Printf("unexpected: %+v", in)
	}
	return x
}

func NewJsonReference(in interface{}) *JsonReference {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewJsonReference: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	requiredKeys := []string{"$ref"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"$ref"}
	allowedPatterns := []string{}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &JsonReference{}
	// string _ref = 1;
	v1 := helpers.MapValueForKey(m, "$ref")
	if v1 != nil {
		x.XRef = v1.(string)
	}
	return x
}

func NewLicense(in interface{}) *License {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewLicense: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	requiredKeys := []string{"name"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"name", "url"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &License{}
	// string name = 1;
	v1 := helpers.MapValueForKey(m, "name")
	if v1 != nil {
		x.Name = v1.(string)
	}
	// string url = 2;
	v2 := helpers.MapValueForKey(m, "url")
	if v2 != nil {
		x.Url = v2.(string)
	}
	// repeated NamedAny vendor_extension = 3;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = NewAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func NewNamedAny(in interface{}) *NamedAny {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewNamedAny: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	allowedKeys := []string{"name", "value"}
	allowedPatterns := []string{}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &NamedAny{}
	// string name = 1;
	v1 := helpers.MapValueForKey(m, "name")
	if v1 != nil {
		x.Name = v1.(string)
	}
	// Any value = 2;
	v2 := helpers.MapValueForKey(m, "value")
	if v2 != nil {
		x.Value = NewAny(v2)
	}
	return x
}

func NewNamedHeader(in interface{}) *NamedHeader {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewNamedHeader: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	allowedKeys := []string{"name", "value"}
	allowedPatterns := []string{}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &NamedHeader{}
	// string name = 1;
	v1 := helpers.MapValueForKey(m, "name")
	if v1 != nil {
		x.Name = v1.(string)
	}
	// Header value = 2;
	v2 := helpers.MapValueForKey(m, "value")
	if v2 != nil {
		x.Value = NewHeader(v2)
	}
	return x
}

func NewNamedParameter(in interface{}) *NamedParameter {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewNamedParameter: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	allowedKeys := []string{"name", "value"}
	allowedPatterns := []string{}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &NamedParameter{}
	// string name = 1;
	v1 := helpers.MapValueForKey(m, "name")
	if v1 != nil {
		x.Name = v1.(string)
	}
	// Parameter value = 2;
	v2 := helpers.MapValueForKey(m, "value")
	if v2 != nil {
		x.Value = NewParameter(v2)
	}
	return x
}

func NewNamedPathItem(in interface{}) *NamedPathItem {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewNamedPathItem: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	allowedKeys := []string{"name", "value"}
	allowedPatterns := []string{}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &NamedPathItem{}
	// string name = 1;
	v1 := helpers.MapValueForKey(m, "name")
	if v1 != nil {
		x.Name = v1.(string)
	}
	// PathItem value = 2;
	v2 := helpers.MapValueForKey(m, "value")
	if v2 != nil {
		x.Value = NewPathItem(v2)
	}
	return x
}

func NewNamedResponse(in interface{}) *NamedResponse {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewNamedResponse: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	allowedKeys := []string{"name", "value"}
	allowedPatterns := []string{}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &NamedResponse{}
	// string name = 1;
	v1 := helpers.MapValueForKey(m, "name")
	if v1 != nil {
		x.Name = v1.(string)
	}
	// Response value = 2;
	v2 := helpers.MapValueForKey(m, "value")
	if v2 != nil {
		x.Value = NewResponse(v2)
	}
	return x
}

func NewNamedResponseValue(in interface{}) *NamedResponseValue {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewNamedResponseValue: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	allowedKeys := []string{"name", "value"}
	allowedPatterns := []string{}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &NamedResponseValue{}
	// string name = 1;
	v1 := helpers.MapValueForKey(m, "name")
	if v1 != nil {
		x.Name = v1.(string)
	}
	// ResponseValue value = 2;
	v2 := helpers.MapValueForKey(m, "value")
	if v2 != nil {
		x.Value = NewResponseValue(v2)
	}
	return x
}

func NewNamedSchema(in interface{}) *NamedSchema {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewNamedSchema: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	allowedKeys := []string{"name", "value"}
	allowedPatterns := []string{}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &NamedSchema{}
	// string name = 1;
	v1 := helpers.MapValueForKey(m, "name")
	if v1 != nil {
		x.Name = v1.(string)
	}
	// Schema value = 2;
	v2 := helpers.MapValueForKey(m, "value")
	if v2 != nil {
		x.Value = NewSchema(v2)
	}
	return x
}

func NewNamedSecurityDefinitionsItem(in interface{}) *NamedSecurityDefinitionsItem {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewNamedSecurityDefinitionsItem: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	allowedKeys := []string{"name", "value"}
	allowedPatterns := []string{}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &NamedSecurityDefinitionsItem{}
	// string name = 1;
	v1 := helpers.MapValueForKey(m, "name")
	if v1 != nil {
		x.Name = v1.(string)
	}
	// SecurityDefinitionsItem value = 2;
	v2 := helpers.MapValueForKey(m, "value")
	if v2 != nil {
		x.Value = NewSecurityDefinitionsItem(v2)
	}
	return x
}

func NewNamedString(in interface{}) *NamedString {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewNamedString: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	allowedKeys := []string{"name", "value"}
	allowedPatterns := []string{}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &NamedString{}
	// string name = 1;
	v1 := helpers.MapValueForKey(m, "name")
	if v1 != nil {
		x.Name = v1.(string)
	}
	// string value = 2;
	v2 := helpers.MapValueForKey(m, "value")
	if v2 != nil {
		x.Value = v2.(string)
	}
	return x
}

func NewNamedStringArray(in interface{}) *NamedStringArray {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewNamedStringArray: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	allowedKeys := []string{"name", "value"}
	allowedPatterns := []string{}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &NamedStringArray{}
	// string name = 1;
	v1 := helpers.MapValueForKey(m, "name")
	if v1 != nil {
		x.Name = v1.(string)
	}
	// StringArray value = 2;
	v2 := helpers.MapValueForKey(m, "value")
	if v2 != nil {
		x.Value = NewStringArray(v2)
	}
	return x
}

func NewNonBodyParameter(in interface{}) *NonBodyParameter {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewNonBodyParameter: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	requiredKeys := []string{"in", "name", "type"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	x := &NonBodyParameter{}
	// HeaderParameterSubSchema header_parameter_sub_schema = 1;
	{
		t := NewHeaderParameterSubSchema(m)
		if t != nil {
			x.Oneof = &NonBodyParameter_HeaderParameterSubSchema{HeaderParameterSubSchema: t}
		}
	}
	// FormDataParameterSubSchema form_data_parameter_sub_schema = 2;
	{
		t := NewFormDataParameterSubSchema(m)
		if t != nil {
			x.Oneof = &NonBodyParameter_FormDataParameterSubSchema{FormDataParameterSubSchema: t}
		}
	}
	// QueryParameterSubSchema query_parameter_sub_schema = 3;
	{
		t := NewQueryParameterSubSchema(m)
		if t != nil {
			x.Oneof = &NonBodyParameter_QueryParameterSubSchema{QueryParameterSubSchema: t}
		}
	}
	// PathParameterSubSchema path_parameter_sub_schema = 4;
	{
		t := NewPathParameterSubSchema(m)
		if t != nil {
			x.Oneof = &NonBodyParameter_PathParameterSubSchema{PathParameterSubSchema: t}
		}
	}
	return x
}

func NewOauth2AccessCodeSecurity(in interface{}) *Oauth2AccessCodeSecurity {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewOauth2AccessCodeSecurity: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	requiredKeys := []string{"authorizationUrl", "flow", "tokenUrl", "type"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"authorizationUrl", "description", "flow", "scopes", "tokenUrl", "type"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Oauth2AccessCodeSecurity{}
	// string type = 1;
	v1 := helpers.MapValueForKey(m, "type")
	if v1 != nil {
		x.Type = v1.(string)
	}
	// string flow = 2;
	v2 := helpers.MapValueForKey(m, "flow")
	if v2 != nil {
		x.Flow = v2.(string)
	}
	// Oauth2Scopes scopes = 3;
	v3 := helpers.MapValueForKey(m, "scopes")
	if v3 != nil {
		x.Scopes = NewOauth2Scopes(v3)
	}
	// string authorization_url = 4;
	v4 := helpers.MapValueForKey(m, "authorizationUrl")
	if v4 != nil {
		x.AuthorizationUrl = v4.(string)
	}
	// string token_url = 5;
	v5 := helpers.MapValueForKey(m, "tokenUrl")
	if v5 != nil {
		x.TokenUrl = v5.(string)
	}
	// string description = 6;
	v6 := helpers.MapValueForKey(m, "description")
	if v6 != nil {
		x.Description = v6.(string)
	}
	// repeated NamedAny vendor_extension = 7;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = NewAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func NewOauth2ApplicationSecurity(in interface{}) *Oauth2ApplicationSecurity {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewOauth2ApplicationSecurity: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	requiredKeys := []string{"flow", "tokenUrl", "type"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"description", "flow", "scopes", "tokenUrl", "type"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Oauth2ApplicationSecurity{}
	// string type = 1;
	v1 := helpers.MapValueForKey(m, "type")
	if v1 != nil {
		x.Type = v1.(string)
	}
	// string flow = 2;
	v2 := helpers.MapValueForKey(m, "flow")
	if v2 != nil {
		x.Flow = v2.(string)
	}
	// Oauth2Scopes scopes = 3;
	v3 := helpers.MapValueForKey(m, "scopes")
	if v3 != nil {
		x.Scopes = NewOauth2Scopes(v3)
	}
	// string token_url = 4;
	v4 := helpers.MapValueForKey(m, "tokenUrl")
	if v4 != nil {
		x.TokenUrl = v4.(string)
	}
	// string description = 5;
	v5 := helpers.MapValueForKey(m, "description")
	if v5 != nil {
		x.Description = v5.(string)
	}
	// repeated NamedAny vendor_extension = 6;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = NewAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func NewOauth2ImplicitSecurity(in interface{}) *Oauth2ImplicitSecurity {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewOauth2ImplicitSecurity: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	requiredKeys := []string{"authorizationUrl", "flow", "type"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"authorizationUrl", "description", "flow", "scopes", "type"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Oauth2ImplicitSecurity{}
	// string type = 1;
	v1 := helpers.MapValueForKey(m, "type")
	if v1 != nil {
		x.Type = v1.(string)
	}
	// string flow = 2;
	v2 := helpers.MapValueForKey(m, "flow")
	if v2 != nil {
		x.Flow = v2.(string)
	}
	// Oauth2Scopes scopes = 3;
	v3 := helpers.MapValueForKey(m, "scopes")
	if v3 != nil {
		x.Scopes = NewOauth2Scopes(v3)
	}
	// string authorization_url = 4;
	v4 := helpers.MapValueForKey(m, "authorizationUrl")
	if v4 != nil {
		x.AuthorizationUrl = v4.(string)
	}
	// string description = 5;
	v5 := helpers.MapValueForKey(m, "description")
	if v5 != nil {
		x.Description = v5.(string)
	}
	// repeated NamedAny vendor_extension = 6;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = NewAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func NewOauth2PasswordSecurity(in interface{}) *Oauth2PasswordSecurity {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewOauth2PasswordSecurity: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	requiredKeys := []string{"flow", "tokenUrl", "type"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"description", "flow", "scopes", "tokenUrl", "type"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Oauth2PasswordSecurity{}
	// string type = 1;
	v1 := helpers.MapValueForKey(m, "type")
	if v1 != nil {
		x.Type = v1.(string)
	}
	// string flow = 2;
	v2 := helpers.MapValueForKey(m, "flow")
	if v2 != nil {
		x.Flow = v2.(string)
	}
	// Oauth2Scopes scopes = 3;
	v3 := helpers.MapValueForKey(m, "scopes")
	if v3 != nil {
		x.Scopes = NewOauth2Scopes(v3)
	}
	// string token_url = 4;
	v4 := helpers.MapValueForKey(m, "tokenUrl")
	if v4 != nil {
		x.TokenUrl = v4.(string)
	}
	// string description = 5;
	v5 := helpers.MapValueForKey(m, "description")
	if v5 != nil {
		x.Description = v5.(string)
	}
	// repeated NamedAny vendor_extension = 6;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = NewAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func NewOauth2Scopes(in interface{}) *Oauth2Scopes {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewOauth2Scopes: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	x := &Oauth2Scopes{}
	// repeated NamedString additional_properties = 1;
	// MAP: string
	x.AdditionalProperties = make([]*NamedString, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		pair := &NamedString{}
		pair.Name = k
		pair.Value = v.(string)
		x.AdditionalProperties = append(x.AdditionalProperties, pair)
	}
	return x
}

func NewOperation(in interface{}) *Operation {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewOperation: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	requiredKeys := []string{"responses"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"consumes", "deprecated", "description", "externalDocs", "operationId", "parameters", "produces", "responses", "schemes", "security", "summary", "tags"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Operation{}
	// repeated string tags = 1;
	v1 := helpers.MapValueForKey(m, "tags")
	if v1 != nil {
		v, ok := v1.([]interface{})
		if ok {
			x.Tags = helpers.ConvertInterfaceArrayToStringArray(v)
		} else {
			log.Printf("unexpected: %+v", helpers.MapValueForKey(m, "tags"))
		}
	}
	// string summary = 2;
	v2 := helpers.MapValueForKey(m, "summary")
	if v2 != nil {
		x.Summary = v2.(string)
	}
	// string description = 3;
	v3 := helpers.MapValueForKey(m, "description")
	if v3 != nil {
		x.Description = v3.(string)
	}
	// ExternalDocs external_docs = 4;
	v4 := helpers.MapValueForKey(m, "externalDocs")
	if v4 != nil {
		x.ExternalDocs = NewExternalDocs(v4)
	}
	// string operation_id = 5;
	v5 := helpers.MapValueForKey(m, "operationId")
	if v5 != nil {
		x.OperationId = v5.(string)
	}
	// repeated string produces = 6;
	v6 := helpers.MapValueForKey(m, "produces")
	if v6 != nil {
		v, ok := v6.([]interface{})
		if ok {
			x.Produces = helpers.ConvertInterfaceArrayToStringArray(v)
		} else {
			log.Printf("unexpected: %+v", helpers.MapValueForKey(m, "produces"))
		}
	}
	// repeated string consumes = 7;
	v7 := helpers.MapValueForKey(m, "consumes")
	if v7 != nil {
		v, ok := v7.([]interface{})
		if ok {
			x.Consumes = helpers.ConvertInterfaceArrayToStringArray(v)
		} else {
			log.Printf("unexpected: %+v", helpers.MapValueForKey(m, "consumes"))
		}
	}
	// repeated ParametersItem parameters = 8;
	v8 := helpers.MapValueForKey(m, "parameters")
	if v8 != nil {
		// repeated class ParametersItem
		x.Parameters = make([]*ParametersItem, 0)
		a, ok := v8.([]interface{})
		if ok {
			for _, item := range a {
				x.Parameters = append(x.Parameters, NewParametersItem(item))
			}
		}
	}
	// Responses responses = 9;
	v9 := helpers.MapValueForKey(m, "responses")
	if v9 != nil {
		x.Responses = NewResponses(v9)
	}
	// repeated string schemes = 10;
	v10 := helpers.MapValueForKey(m, "schemes")
	if v10 != nil {
		v, ok := v10.([]interface{})
		if ok {
			x.Schemes = helpers.ConvertInterfaceArrayToStringArray(v)
		} else {
			log.Printf("unexpected: %+v", helpers.MapValueForKey(m, "schemes"))
		}
	}
	// bool deprecated = 11;
	v11 := helpers.MapValueForKey(m, "deprecated")
	if v11 != nil {
		x.Deprecated = v11.(bool)
	}
	// repeated SecurityRequirement security = 12;
	v12 := helpers.MapValueForKey(m, "security")
	if v12 != nil {
		// repeated class SecurityRequirement
		x.Security = make([]*SecurityRequirement, 0)
		a, ok := v12.([]interface{})
		if ok {
			for _, item := range a {
				x.Security = append(x.Security, NewSecurityRequirement(item))
			}
		}
	}
	// repeated NamedAny vendor_extension = 13;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = NewAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func NewParameter(in interface{}) *Parameter {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewParameter: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	x := &Parameter{}
	// BodyParameter body_parameter = 1;
	{
		t := NewBodyParameter(m)
		if t != nil {
			x.Oneof = &Parameter_BodyParameter{BodyParameter: t}
		}
	}
	// NonBodyParameter non_body_parameter = 2;
	{
		t := NewNonBodyParameter(m)
		if t != nil {
			x.Oneof = &Parameter_NonBodyParameter{NonBodyParameter: t}
		}
	}
	return x
}

func NewParameterDefinitions(in interface{}) *ParameterDefinitions {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewParameterDefinitions: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	x := &ParameterDefinitions{}
	// repeated NamedParameter additional_properties = 1;
	// MAP: Parameter
	x.AdditionalProperties = make([]*NamedParameter, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		pair := &NamedParameter{}
		pair.Name = k
		pair.Value = NewParameter(v)
		x.AdditionalProperties = append(x.AdditionalProperties, pair)
	}
	return x
}

func NewParametersItem(in interface{}) *ParametersItem {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewParametersItem: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	x := &ParametersItem{}
	// Parameter parameter = 1;
	{
		t := NewParameter(m)
		if t != nil {
			x.Oneof = &ParametersItem_Parameter{Parameter: t}
		}
	}
	// JsonReference json_reference = 2;
	{
		t := NewJsonReference(m)
		if t != nil {
			x.Oneof = &ParametersItem_JsonReference{JsonReference: t}
		}
	}
	return x
}

func NewPathItem(in interface{}) *PathItem {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewPathItem: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	allowedKeys := []string{"$ref", "delete", "get", "head", "options", "parameters", "patch", "post", "put"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &PathItem{}
	// string _ref = 1;
	v1 := helpers.MapValueForKey(m, "$ref")
	if v1 != nil {
		x.XRef = v1.(string)
	}
	// Operation get = 2;
	v2 := helpers.MapValueForKey(m, "get")
	if v2 != nil {
		x.Get = NewOperation(v2)
	}
	// Operation put = 3;
	v3 := helpers.MapValueForKey(m, "put")
	if v3 != nil {
		x.Put = NewOperation(v3)
	}
	// Operation post = 4;
	v4 := helpers.MapValueForKey(m, "post")
	if v4 != nil {
		x.Post = NewOperation(v4)
	}
	// Operation delete = 5;
	v5 := helpers.MapValueForKey(m, "delete")
	if v5 != nil {
		x.Delete = NewOperation(v5)
	}
	// Operation options = 6;
	v6 := helpers.MapValueForKey(m, "options")
	if v6 != nil {
		x.Options = NewOperation(v6)
	}
	// Operation head = 7;
	v7 := helpers.MapValueForKey(m, "head")
	if v7 != nil {
		x.Head = NewOperation(v7)
	}
	// Operation patch = 8;
	v8 := helpers.MapValueForKey(m, "patch")
	if v8 != nil {
		x.Patch = NewOperation(v8)
	}
	// repeated ParametersItem parameters = 9;
	v9 := helpers.MapValueForKey(m, "parameters")
	if v9 != nil {
		// repeated class ParametersItem
		x.Parameters = make([]*ParametersItem, 0)
		a, ok := v9.([]interface{})
		if ok {
			for _, item := range a {
				x.Parameters = append(x.Parameters, NewParametersItem(item))
			}
		}
	}
	// repeated NamedAny vendor_extension = 10;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = NewAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func NewPathParameterSubSchema(in interface{}) *PathParameterSubSchema {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewPathParameterSubSchema: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	requiredKeys := []string{"required"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"collectionFormat", "default", "description", "enum", "exclusiveMaximum", "exclusiveMinimum", "format", "in", "items", "maxItems", "maxLength", "maximum", "minItems", "minLength", "minimum", "multipleOf", "name", "pattern", "required", "type", "uniqueItems"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &PathParameterSubSchema{}
	// bool required = 1;
	v1 := helpers.MapValueForKey(m, "required")
	if v1 != nil {
		x.Required = v1.(bool)
	}
	// string in = 2;
	v2 := helpers.MapValueForKey(m, "in")
	if v2 != nil {
		x.In = v2.(string)
	}
	// string description = 3;
	v3 := helpers.MapValueForKey(m, "description")
	if v3 != nil {
		x.Description = v3.(string)
	}
	// string name = 4;
	v4 := helpers.MapValueForKey(m, "name")
	if v4 != nil {
		x.Name = v4.(string)
	}
	// string type = 5;
	v5 := helpers.MapValueForKey(m, "type")
	if v5 != nil {
		x.Type = v5.(string)
	}
	// string format = 6;
	v6 := helpers.MapValueForKey(m, "format")
	if v6 != nil {
		x.Format = v6.(string)
	}
	// PrimitivesItems items = 7;
	v7 := helpers.MapValueForKey(m, "items")
	if v7 != nil {
		x.Items = NewPrimitivesItems(v7)
	}
	// string collection_format = 8;
	v8 := helpers.MapValueForKey(m, "collectionFormat")
	if v8 != nil {
		x.CollectionFormat = v8.(string)
	}
	// Any default = 9;
	v9 := helpers.MapValueForKey(m, "default")
	if v9 != nil {
		x.Default = NewAny(v9)
	}
	// float maximum = 10;
	v10 := helpers.MapValueForKey(m, "maximum")
	if v10 != nil {
		x.Maximum = v10.(float64)
	}
	// bool exclusive_maximum = 11;
	v11 := helpers.MapValueForKey(m, "exclusiveMaximum")
	if v11 != nil {
		x.ExclusiveMaximum = v11.(bool)
	}
	// float minimum = 12;
	v12 := helpers.MapValueForKey(m, "minimum")
	if v12 != nil {
		x.Minimum = v12.(float64)
	}
	// bool exclusive_minimum = 13;
	v13 := helpers.MapValueForKey(m, "exclusiveMinimum")
	if v13 != nil {
		x.ExclusiveMinimum = v13.(bool)
	}
	// int64 max_length = 14;
	v14 := helpers.MapValueForKey(m, "maxLength")
	if v14 != nil {
		x.MaxLength = v14.(int64)
	}
	// int64 min_length = 15;
	v15 := helpers.MapValueForKey(m, "minLength")
	if v15 != nil {
		x.MinLength = v15.(int64)
	}
	// string pattern = 16;
	v16 := helpers.MapValueForKey(m, "pattern")
	if v16 != nil {
		x.Pattern = v16.(string)
	}
	// int64 max_items = 17;
	v17 := helpers.MapValueForKey(m, "maxItems")
	if v17 != nil {
		x.MaxItems = v17.(int64)
	}
	// int64 min_items = 18;
	v18 := helpers.MapValueForKey(m, "minItems")
	if v18 != nil {
		x.MinItems = v18.(int64)
	}
	// bool unique_items = 19;
	v19 := helpers.MapValueForKey(m, "uniqueItems")
	if v19 != nil {
		x.UniqueItems = v19.(bool)
	}
	// repeated Any enum = 20;
	v20 := helpers.MapValueForKey(m, "enum")
	if v20 != nil {
		// repeated class Any
		x.Enum = make([]*Any, 0)
		a, ok := v20.([]interface{})
		if ok {
			for _, item := range a {
				x.Enum = append(x.Enum, NewAny(item))
			}
		}
	}
	// float multiple_of = 21;
	v21 := helpers.MapValueForKey(m, "multipleOf")
	if v21 != nil {
		x.MultipleOf = v21.(float64)
	}
	// repeated NamedAny vendor_extension = 22;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = NewAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func NewPaths(in interface{}) *Paths {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewPaths: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	allowedKeys := []string{}
	allowedPatterns := []string{"^x-", "^/"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Paths{}
	// repeated NamedAny vendor_extension = 1;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = NewAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	// repeated NamedPathItem path = 2;
	// MAP: PathItem ^/
	x.Path = make([]*NamedPathItem, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		if helpers.PatternMatches("^/", k) {
			pair := &NamedPathItem{}
			pair.Name = k
			pair.Value = NewPathItem(v)
			x.Path = append(x.Path, pair)
		}
	}
	return x
}

func NewPrimitivesItems(in interface{}) *PrimitivesItems {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewPrimitivesItems: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	allowedKeys := []string{"collectionFormat", "default", "enum", "exclusiveMaximum", "exclusiveMinimum", "format", "items", "maxItems", "maxLength", "maximum", "minItems", "minLength", "minimum", "multipleOf", "pattern", "type", "uniqueItems"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &PrimitivesItems{}
	// string type = 1;
	v1 := helpers.MapValueForKey(m, "type")
	if v1 != nil {
		x.Type = v1.(string)
	}
	// string format = 2;
	v2 := helpers.MapValueForKey(m, "format")
	if v2 != nil {
		x.Format = v2.(string)
	}
	// PrimitivesItems items = 3;
	v3 := helpers.MapValueForKey(m, "items")
	if v3 != nil {
		x.Items = NewPrimitivesItems(v3)
	}
	// string collection_format = 4;
	v4 := helpers.MapValueForKey(m, "collectionFormat")
	if v4 != nil {
		x.CollectionFormat = v4.(string)
	}
	// Any default = 5;
	v5 := helpers.MapValueForKey(m, "default")
	if v5 != nil {
		x.Default = NewAny(v5)
	}
	// float maximum = 6;
	v6 := helpers.MapValueForKey(m, "maximum")
	if v6 != nil {
		x.Maximum = v6.(float64)
	}
	// bool exclusive_maximum = 7;
	v7 := helpers.MapValueForKey(m, "exclusiveMaximum")
	if v7 != nil {
		x.ExclusiveMaximum = v7.(bool)
	}
	// float minimum = 8;
	v8 := helpers.MapValueForKey(m, "minimum")
	if v8 != nil {
		x.Minimum = v8.(float64)
	}
	// bool exclusive_minimum = 9;
	v9 := helpers.MapValueForKey(m, "exclusiveMinimum")
	if v9 != nil {
		x.ExclusiveMinimum = v9.(bool)
	}
	// int64 max_length = 10;
	v10 := helpers.MapValueForKey(m, "maxLength")
	if v10 != nil {
		x.MaxLength = v10.(int64)
	}
	// int64 min_length = 11;
	v11 := helpers.MapValueForKey(m, "minLength")
	if v11 != nil {
		x.MinLength = v11.(int64)
	}
	// string pattern = 12;
	v12 := helpers.MapValueForKey(m, "pattern")
	if v12 != nil {
		x.Pattern = v12.(string)
	}
	// int64 max_items = 13;
	v13 := helpers.MapValueForKey(m, "maxItems")
	if v13 != nil {
		x.MaxItems = v13.(int64)
	}
	// int64 min_items = 14;
	v14 := helpers.MapValueForKey(m, "minItems")
	if v14 != nil {
		x.MinItems = v14.(int64)
	}
	// bool unique_items = 15;
	v15 := helpers.MapValueForKey(m, "uniqueItems")
	if v15 != nil {
		x.UniqueItems = v15.(bool)
	}
	// repeated Any enum = 16;
	v16 := helpers.MapValueForKey(m, "enum")
	if v16 != nil {
		// repeated class Any
		x.Enum = make([]*Any, 0)
		a, ok := v16.([]interface{})
		if ok {
			for _, item := range a {
				x.Enum = append(x.Enum, NewAny(item))
			}
		}
	}
	// float multiple_of = 17;
	v17 := helpers.MapValueForKey(m, "multipleOf")
	if v17 != nil {
		x.MultipleOf = v17.(float64)
	}
	// repeated NamedAny vendor_extension = 18;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = NewAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func NewProperties(in interface{}) *Properties {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewProperties: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	x := &Properties{}
	// repeated NamedSchema additional_properties = 1;
	// MAP: Schema
	x.AdditionalProperties = make([]*NamedSchema, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		pair := &NamedSchema{}
		pair.Name = k
		pair.Value = NewSchema(v)
		x.AdditionalProperties = append(x.AdditionalProperties, pair)
	}
	return x
}

func NewQueryParameterSubSchema(in interface{}) *QueryParameterSubSchema {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewQueryParameterSubSchema: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	allowedKeys := []string{"allowEmptyValue", "collectionFormat", "default", "description", "enum", "exclusiveMaximum", "exclusiveMinimum", "format", "in", "items", "maxItems", "maxLength", "maximum", "minItems", "minLength", "minimum", "multipleOf", "name", "pattern", "required", "type", "uniqueItems"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &QueryParameterSubSchema{}
	// bool required = 1;
	v1 := helpers.MapValueForKey(m, "required")
	if v1 != nil {
		x.Required = v1.(bool)
	}
	// string in = 2;
	v2 := helpers.MapValueForKey(m, "in")
	if v2 != nil {
		x.In = v2.(string)
	}
	// string description = 3;
	v3 := helpers.MapValueForKey(m, "description")
	if v3 != nil {
		x.Description = v3.(string)
	}
	// string name = 4;
	v4 := helpers.MapValueForKey(m, "name")
	if v4 != nil {
		x.Name = v4.(string)
	}
	// bool allow_empty_value = 5;
	v5 := helpers.MapValueForKey(m, "allowEmptyValue")
	if v5 != nil {
		x.AllowEmptyValue = v5.(bool)
	}
	// string type = 6;
	v6 := helpers.MapValueForKey(m, "type")
	if v6 != nil {
		x.Type = v6.(string)
	}
	// string format = 7;
	v7 := helpers.MapValueForKey(m, "format")
	if v7 != nil {
		x.Format = v7.(string)
	}
	// PrimitivesItems items = 8;
	v8 := helpers.MapValueForKey(m, "items")
	if v8 != nil {
		x.Items = NewPrimitivesItems(v8)
	}
	// string collection_format = 9;
	v9 := helpers.MapValueForKey(m, "collectionFormat")
	if v9 != nil {
		x.CollectionFormat = v9.(string)
	}
	// Any default = 10;
	v10 := helpers.MapValueForKey(m, "default")
	if v10 != nil {
		x.Default = NewAny(v10)
	}
	// float maximum = 11;
	v11 := helpers.MapValueForKey(m, "maximum")
	if v11 != nil {
		x.Maximum = v11.(float64)
	}
	// bool exclusive_maximum = 12;
	v12 := helpers.MapValueForKey(m, "exclusiveMaximum")
	if v12 != nil {
		x.ExclusiveMaximum = v12.(bool)
	}
	// float minimum = 13;
	v13 := helpers.MapValueForKey(m, "minimum")
	if v13 != nil {
		x.Minimum = v13.(float64)
	}
	// bool exclusive_minimum = 14;
	v14 := helpers.MapValueForKey(m, "exclusiveMinimum")
	if v14 != nil {
		x.ExclusiveMinimum = v14.(bool)
	}
	// int64 max_length = 15;
	v15 := helpers.MapValueForKey(m, "maxLength")
	if v15 != nil {
		x.MaxLength = v15.(int64)
	}
	// int64 min_length = 16;
	v16 := helpers.MapValueForKey(m, "minLength")
	if v16 != nil {
		x.MinLength = v16.(int64)
	}
	// string pattern = 17;
	v17 := helpers.MapValueForKey(m, "pattern")
	if v17 != nil {
		x.Pattern = v17.(string)
	}
	// int64 max_items = 18;
	v18 := helpers.MapValueForKey(m, "maxItems")
	if v18 != nil {
		x.MaxItems = v18.(int64)
	}
	// int64 min_items = 19;
	v19 := helpers.MapValueForKey(m, "minItems")
	if v19 != nil {
		x.MinItems = v19.(int64)
	}
	// bool unique_items = 20;
	v20 := helpers.MapValueForKey(m, "uniqueItems")
	if v20 != nil {
		x.UniqueItems = v20.(bool)
	}
	// repeated Any enum = 21;
	v21 := helpers.MapValueForKey(m, "enum")
	if v21 != nil {
		// repeated class Any
		x.Enum = make([]*Any, 0)
		a, ok := v21.([]interface{})
		if ok {
			for _, item := range a {
				x.Enum = append(x.Enum, NewAny(item))
			}
		}
	}
	// float multiple_of = 22;
	v22 := helpers.MapValueForKey(m, "multipleOf")
	if v22 != nil {
		x.MultipleOf = v22.(float64)
	}
	// repeated NamedAny vendor_extension = 23;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = NewAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func NewResponse(in interface{}) *Response {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewResponse: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	requiredKeys := []string{"description"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"description", "examples", "headers", "schema"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Response{}
	// string description = 1;
	v1 := helpers.MapValueForKey(m, "description")
	if v1 != nil {
		x.Description = v1.(string)
	}
	// SchemaItem schema = 2;
	v2 := helpers.MapValueForKey(m, "schema")
	if v2 != nil {
		x.Schema = NewSchemaItem(v2)
	}
	// Headers headers = 3;
	v3 := helpers.MapValueForKey(m, "headers")
	if v3 != nil {
		x.Headers = NewHeaders(v3)
	}
	// Examples examples = 4;
	v4 := helpers.MapValueForKey(m, "examples")
	if v4 != nil {
		x.Examples = NewExamples(v4)
	}
	// repeated NamedAny vendor_extension = 5;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = NewAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func NewResponseDefinitions(in interface{}) *ResponseDefinitions {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewResponseDefinitions: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	x := &ResponseDefinitions{}
	// repeated NamedResponse additional_properties = 1;
	// MAP: Response
	x.AdditionalProperties = make([]*NamedResponse, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		pair := &NamedResponse{}
		pair.Name = k
		pair.Value = NewResponse(v)
		x.AdditionalProperties = append(x.AdditionalProperties, pair)
	}
	return x
}

func NewResponseValue(in interface{}) *ResponseValue {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewResponseValue: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	x := &ResponseValue{}
	// Response response = 1;
	{
		t := NewResponse(m)
		if t != nil {
			x.Oneof = &ResponseValue_Response{Response: t}
		}
	}
	// JsonReference json_reference = 2;
	{
		t := NewJsonReference(m)
		if t != nil {
			x.Oneof = &ResponseValue_JsonReference{JsonReference: t}
		}
	}
	return x
}

func NewResponses(in interface{}) *Responses {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewResponses: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	allowedKeys := []string{}
	allowedPatterns := []string{"^([0-9]{3})$|^(default)$", "^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Responses{}
	// repeated NamedResponseValue response_code = 1;
	// MAP: ResponseValue ^([0-9]{3})$|^(default)$
	x.ResponseCode = make([]*NamedResponseValue, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		if helpers.PatternMatches("^([0-9]{3})$|^(default)$", k) {
			pair := &NamedResponseValue{}
			pair.Name = k
			pair.Value = NewResponseValue(v)
			x.ResponseCode = append(x.ResponseCode, pair)
		}
	}
	// repeated NamedAny vendor_extension = 2;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = NewAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func NewSchema(in interface{}) *Schema {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewSchema: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	allowedKeys := []string{"$ref", "additionalProperties", "allOf", "default", "description", "discriminator", "enum", "example", "exclusiveMaximum", "exclusiveMinimum", "externalDocs", "format", "items", "maxItems", "maxLength", "maxProperties", "maximum", "minItems", "minLength", "minProperties", "minimum", "multipleOf", "pattern", "properties", "readOnly", "required", "title", "type", "uniqueItems", "xml"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Schema{}
	// string _ref = 1;
	v1 := helpers.MapValueForKey(m, "$ref")
	if v1 != nil {
		x.XRef = v1.(string)
	}
	// string format = 2;
	v2 := helpers.MapValueForKey(m, "format")
	if v2 != nil {
		x.Format = v2.(string)
	}
	// string title = 3;
	v3 := helpers.MapValueForKey(m, "title")
	if v3 != nil {
		x.Title = v3.(string)
	}
	// string description = 4;
	v4 := helpers.MapValueForKey(m, "description")
	if v4 != nil {
		x.Description = v4.(string)
	}
	// Any default = 5;
	v5 := helpers.MapValueForKey(m, "default")
	if v5 != nil {
		x.Default = NewAny(v5)
	}
	// float multiple_of = 6;
	v6 := helpers.MapValueForKey(m, "multipleOf")
	if v6 != nil {
		x.MultipleOf = v6.(float64)
	}
	// float maximum = 7;
	v7 := helpers.MapValueForKey(m, "maximum")
	if v7 != nil {
		x.Maximum = v7.(float64)
	}
	// bool exclusive_maximum = 8;
	v8 := helpers.MapValueForKey(m, "exclusiveMaximum")
	if v8 != nil {
		x.ExclusiveMaximum = v8.(bool)
	}
	// float minimum = 9;
	v9 := helpers.MapValueForKey(m, "minimum")
	if v9 != nil {
		x.Minimum = v9.(float64)
	}
	// bool exclusive_minimum = 10;
	v10 := helpers.MapValueForKey(m, "exclusiveMinimum")
	if v10 != nil {
		x.ExclusiveMinimum = v10.(bool)
	}
	// int64 max_length = 11;
	v11 := helpers.MapValueForKey(m, "maxLength")
	if v11 != nil {
		x.MaxLength = v11.(int64)
	}
	// int64 min_length = 12;
	v12 := helpers.MapValueForKey(m, "minLength")
	if v12 != nil {
		x.MinLength = v12.(int64)
	}
	// string pattern = 13;
	v13 := helpers.MapValueForKey(m, "pattern")
	if v13 != nil {
		x.Pattern = v13.(string)
	}
	// int64 max_items = 14;
	v14 := helpers.MapValueForKey(m, "maxItems")
	if v14 != nil {
		x.MaxItems = v14.(int64)
	}
	// int64 min_items = 15;
	v15 := helpers.MapValueForKey(m, "minItems")
	if v15 != nil {
		x.MinItems = v15.(int64)
	}
	// bool unique_items = 16;
	v16 := helpers.MapValueForKey(m, "uniqueItems")
	if v16 != nil {
		x.UniqueItems = v16.(bool)
	}
	// int64 max_properties = 17;
	v17 := helpers.MapValueForKey(m, "maxProperties")
	if v17 != nil {
		x.MaxProperties = v17.(int64)
	}
	// int64 min_properties = 18;
	v18 := helpers.MapValueForKey(m, "minProperties")
	if v18 != nil {
		x.MinProperties = v18.(int64)
	}
	// repeated string required = 19;
	v19 := helpers.MapValueForKey(m, "required")
	if v19 != nil {
		v, ok := v19.([]interface{})
		if ok {
			x.Required = helpers.ConvertInterfaceArrayToStringArray(v)
		} else {
			log.Printf("unexpected: %+v", helpers.MapValueForKey(m, "required"))
		}
	}
	// repeated Any enum = 20;
	v20 := helpers.MapValueForKey(m, "enum")
	if v20 != nil {
		// repeated class Any
		x.Enum = make([]*Any, 0)
		a, ok := v20.([]interface{})
		if ok {
			for _, item := range a {
				x.Enum = append(x.Enum, NewAny(item))
			}
		}
	}
	// AdditionalPropertiesItem additional_properties = 21;
	v21 := helpers.MapValueForKey(m, "additionalProperties")
	if v21 != nil {
		x.AdditionalProperties = NewAdditionalPropertiesItem(v21)
	}
	// TypeItem type = 22;
	v22 := helpers.MapValueForKey(m, "type")
	if v22 != nil {
		x.Type = NewTypeItem(v22)
	}
	// ItemsItem items = 23;
	v23 := helpers.MapValueForKey(m, "items")
	if v23 != nil {
		x.Items = NewItemsItem(v23)
	}
	// repeated Schema all_of = 24;
	v24 := helpers.MapValueForKey(m, "allOf")
	if v24 != nil {
		// repeated class Schema
		x.AllOf = make([]*Schema, 0)
		a, ok := v24.([]interface{})
		if ok {
			for _, item := range a {
				x.AllOf = append(x.AllOf, NewSchema(item))
			}
		}
	}
	// Properties properties = 25;
	v25 := helpers.MapValueForKey(m, "properties")
	if v25 != nil {
		x.Properties = NewProperties(v25)
	}
	// string discriminator = 26;
	v26 := helpers.MapValueForKey(m, "discriminator")
	if v26 != nil {
		x.Discriminator = v26.(string)
	}
	// bool read_only = 27;
	v27 := helpers.MapValueForKey(m, "readOnly")
	if v27 != nil {
		x.ReadOnly = v27.(bool)
	}
	// Xml xml = 28;
	v28 := helpers.MapValueForKey(m, "xml")
	if v28 != nil {
		x.Xml = NewXml(v28)
	}
	// ExternalDocs external_docs = 29;
	v29 := helpers.MapValueForKey(m, "externalDocs")
	if v29 != nil {
		x.ExternalDocs = NewExternalDocs(v29)
	}
	// Any example = 30;
	v30 := helpers.MapValueForKey(m, "example")
	if v30 != nil {
		x.Example = NewAny(v30)
	}
	// repeated NamedAny vendor_extension = 31;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = NewAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func NewSchemaItem(in interface{}) *SchemaItem {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewSchemaItem: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	x := &SchemaItem{}
	// Schema schema = 1;
	{
		t := NewSchema(m)
		if t != nil {
			x.Oneof = &SchemaItem_Schema{Schema: t}
		}
	}
	// FileSchema file_schema = 2;
	{
		t := NewFileSchema(m)
		if t != nil {
			x.Oneof = &SchemaItem_FileSchema{FileSchema: t}
		}
	}
	return x
}

func NewSecurityDefinitions(in interface{}) *SecurityDefinitions {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewSecurityDefinitions: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	x := &SecurityDefinitions{}
	// repeated NamedSecurityDefinitionsItem additional_properties = 1;
	// MAP: SecurityDefinitionsItem
	x.AdditionalProperties = make([]*NamedSecurityDefinitionsItem, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		pair := &NamedSecurityDefinitionsItem{}
		pair.Name = k
		pair.Value = NewSecurityDefinitionsItem(v)
		x.AdditionalProperties = append(x.AdditionalProperties, pair)
	}
	return x
}

func NewSecurityDefinitionsItem(in interface{}) *SecurityDefinitionsItem {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewSecurityDefinitionsItem: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	x := &SecurityDefinitionsItem{}
	// BasicAuthenticationSecurity basic_authentication_security = 1;
	{
		t := NewBasicAuthenticationSecurity(m)
		if t != nil {
			x.Oneof = &SecurityDefinitionsItem_BasicAuthenticationSecurity{BasicAuthenticationSecurity: t}
		}
	}
	// ApiKeySecurity api_key_security = 2;
	{
		t := NewApiKeySecurity(m)
		if t != nil {
			x.Oneof = &SecurityDefinitionsItem_ApiKeySecurity{ApiKeySecurity: t}
		}
	}
	// Oauth2ImplicitSecurity oauth2_implicit_security = 3;
	{
		t := NewOauth2ImplicitSecurity(m)
		if t != nil {
			x.Oneof = &SecurityDefinitionsItem_Oauth2ImplicitSecurity{Oauth2ImplicitSecurity: t}
		}
	}
	// Oauth2PasswordSecurity oauth2_password_security = 4;
	{
		t := NewOauth2PasswordSecurity(m)
		if t != nil {
			x.Oneof = &SecurityDefinitionsItem_Oauth2PasswordSecurity{Oauth2PasswordSecurity: t}
		}
	}
	// Oauth2ApplicationSecurity oauth2_application_security = 5;
	{
		t := NewOauth2ApplicationSecurity(m)
		if t != nil {
			x.Oneof = &SecurityDefinitionsItem_Oauth2ApplicationSecurity{Oauth2ApplicationSecurity: t}
		}
	}
	// Oauth2AccessCodeSecurity oauth2_access_code_security = 6;
	{
		t := NewOauth2AccessCodeSecurity(m)
		if t != nil {
			x.Oneof = &SecurityDefinitionsItem_Oauth2AccessCodeSecurity{Oauth2AccessCodeSecurity: t}
		}
	}
	return x
}

func NewSecurityRequirement(in interface{}) *SecurityRequirement {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewSecurityRequirement: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	x := &SecurityRequirement{}
	// repeated NamedStringArray additional_properties = 1;
	// MAP: StringArray
	x.AdditionalProperties = make([]*NamedStringArray, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		pair := &NamedStringArray{}
		pair.Name = k
		pair.Value = NewStringArray(v)
		x.AdditionalProperties = append(x.AdditionalProperties, pair)
	}
	return x
}

func NewStringArray(in interface{}) *StringArray {
	a, ok := in.([]interface{})
	if ok {
		x := &StringArray{}
		x.Value = make([]string, 0)
		for _, s := range a {
			x.Value = append(x.Value, s.(string))
		}
		return x
	} else {
		return nil
	}
}

func NewTag(in interface{}) *Tag {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewTag: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	requiredKeys := []string{"name"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"description", "externalDocs", "name"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Tag{}
	// string name = 1;
	v1 := helpers.MapValueForKey(m, "name")
	if v1 != nil {
		x.Name = v1.(string)
	}
	// string description = 2;
	v2 := helpers.MapValueForKey(m, "description")
	if v2 != nil {
		x.Description = v2.(string)
	}
	// ExternalDocs external_docs = 3;
	v3 := helpers.MapValueForKey(m, "externalDocs")
	if v3 != nil {
		x.ExternalDocs = NewExternalDocs(v3)
	}
	// repeated NamedAny vendor_extension = 4;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = NewAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func NewTypeItem(in interface{}) *TypeItem {
	value, ok := in.(string)
	x := &TypeItem{}
	if ok {
		x.Value = make([]string, 0)
		x.Value = append(x.Value, value)
	} else {
		log.Printf("unexpected: %+v", in)
	}
	return x
}

func NewVendorExtension(in interface{}) *VendorExtension {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewVendorExtension: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	x := &VendorExtension{}
	// repeated NamedAny additional_properties = 1;
	// MAP: Any
	x.AdditionalProperties = make([]*NamedAny, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		pair := &NamedAny{}
		pair.Name = k
		pair.Value = NewAny(v)
		x.AdditionalProperties = append(x.AdditionalProperties, pair)
	}
	return x
}

func NewXml(in interface{}) *Xml {
	m, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to NewXml: %+v", in)
		log.Printf("%d\n", len(m))
		return nil
	}
	allowedKeys := []string{"attribute", "name", "namespace", "prefix", "wrapped"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Xml{}
	// string name = 1;
	v1 := helpers.MapValueForKey(m, "name")
	if v1 != nil {
		x.Name = v1.(string)
	}
	// string namespace = 2;
	v2 := helpers.MapValueForKey(m, "namespace")
	if v2 != nil {
		x.Namespace = v2.(string)
	}
	// string prefix = 3;
	v3 := helpers.MapValueForKey(m, "prefix")
	if v3 != nil {
		x.Prefix = v3.(string)
	}
	// bool attribute = 4;
	v4 := helpers.MapValueForKey(m, "attribute")
	if v4 != nil {
		x.Attribute = v4.(bool)
	}
	// bool wrapped = 5;
	v5 := helpers.MapValueForKey(m, "wrapped")
	if v5 != nil {
		x.Wrapped = v5.(bool)
	}
	// repeated NamedAny vendor_extension = 6;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for _, item := range m {
		k := item.Key.(string)
		v := item.Value
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = NewAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}
