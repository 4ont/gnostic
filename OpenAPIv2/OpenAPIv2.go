// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// THIS FILE IS AUTOMATICALLY GENERATED.

package OpenAPIv2

import (
	"fmt"
	"github.com/googleapis/openapi-compiler/helpers"
	"log"
)

func Version() string {
	return "OpenAPIv2"
}

func BuildAdditionalPropertiesItem(in interface{}) *AdditionalPropertiesItem {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildAdditionalPropertiesItem: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	allowedKeys := []string{"boolean", "schema"}
	allowedPatterns := []string{}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &AdditionalPropertiesItem{}
	// Schema schema = 1;
	if helpers.MapHasKey(m, "schema") {
		x.Schema = BuildSchema(m["schema"])
	}
	// bool boolean = 2;
	if helpers.MapHasKey(m, "boolean") {
		x.Boolean = m["boolean"].(bool)
	}
	return x
}

func BuildAny(in interface{}) *Any {
	x := &Any{}
	x.Value = fmt.Sprintf("%+v", in)
	return x
}

func BuildApiKeySecurity(in interface{}) *ApiKeySecurity {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildApiKeySecurity: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	requiredKeys := []string{"in", "name", "type"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"description", "in", "name", "type"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &ApiKeySecurity{}
	// string type = 1;
	if helpers.MapHasKey(m, "type") {
		x.Type = m["type"].(string)
	}
	// string name = 2;
	if helpers.MapHasKey(m, "name") {
		x.Name = m["name"].(string)
	}
	// string in = 3;
	if helpers.MapHasKey(m, "in") {
		x.In = m["in"].(string)
	}
	// string description = 4;
	if helpers.MapHasKey(m, "description") {
		x.Description = m["description"].(string)
	}
	// repeated NamedAny vendor_extension = 5;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for k, v := range m {
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = BuildAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func BuildBasicAuthenticationSecurity(in interface{}) *BasicAuthenticationSecurity {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildBasicAuthenticationSecurity: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	requiredKeys := []string{"type"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"description", "type"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &BasicAuthenticationSecurity{}
	// string type = 1;
	if helpers.MapHasKey(m, "type") {
		x.Type = m["type"].(string)
	}
	// string description = 2;
	if helpers.MapHasKey(m, "description") {
		x.Description = m["description"].(string)
	}
	// repeated NamedAny vendor_extension = 3;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for k, v := range m {
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = BuildAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func BuildBodyParameter(in interface{}) *BodyParameter {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildBodyParameter: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	requiredKeys := []string{"in", "name", "schema"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"description", "in", "name", "required", "schema"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &BodyParameter{}
	// string description = 1;
	if helpers.MapHasKey(m, "description") {
		x.Description = m["description"].(string)
	}
	// string name = 2;
	if helpers.MapHasKey(m, "name") {
		x.Name = m["name"].(string)
	}
	// string in = 3;
	if helpers.MapHasKey(m, "in") {
		x.In = m["in"].(string)
	}
	// bool required = 4;
	if helpers.MapHasKey(m, "required") {
		x.Required = m["required"].(bool)
	}
	// Schema schema = 5;
	if helpers.MapHasKey(m, "schema") {
		x.Schema = BuildSchema(m["schema"])
	}
	// repeated NamedAny vendor_extension = 6;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for k, v := range m {
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = BuildAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func BuildContact(in interface{}) *Contact {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildContact: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	allowedKeys := []string{"email", "name", "url"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Contact{}
	// string name = 1;
	if helpers.MapHasKey(m, "name") {
		x.Name = m["name"].(string)
	}
	// string url = 2;
	if helpers.MapHasKey(m, "url") {
		x.Url = m["url"].(string)
	}
	// string email = 3;
	if helpers.MapHasKey(m, "email") {
		x.Email = m["email"].(string)
	}
	// repeated NamedAny vendor_extension = 4;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for k, v := range m {
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = BuildAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func BuildDefault(in interface{}) *Default {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildDefault: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	x := &Default{}
	// repeated NamedAny additional_properties = 1;
	// MAP: Any
	x.AdditionalProperties = make([]*NamedAny, 0)
	for k, v := range m {
		pair := &NamedAny{}
		pair.Name = k
		pair.Value = BuildAny(v)
		x.AdditionalProperties = append(x.AdditionalProperties, pair)
	}
	return x
}

func BuildDefinitions(in interface{}) *Definitions {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildDefinitions: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	x := &Definitions{}
	// repeated NamedSchema additional_properties = 1;
	// MAP: Schema
	x.AdditionalProperties = make([]*NamedSchema, 0)
	for k, v := range m {
		pair := &NamedSchema{}
		pair.Name = k
		pair.Value = BuildSchema(v)
		x.AdditionalProperties = append(x.AdditionalProperties, pair)
	}
	return x
}

func BuildDocument(in interface{}) *Document {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildDocument: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	requiredKeys := []string{"info", "paths", "swagger"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"basePath", "consumes", "definitions", "externalDocs", "host", "info", "parameters", "paths", "produces", "responses", "schemes", "security", "securityDefinitions", "swagger", "tags"}
	allowedPatterns := []string{}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Document{}
	// string swagger = 1;
	if helpers.MapHasKey(m, "swagger") {
		x.Swagger = m["swagger"].(string)
	}
	// Info info = 2;
	if helpers.MapHasKey(m, "info") {
		x.Info = BuildInfo(m["info"])
	}
	// string host = 3;
	if helpers.MapHasKey(m, "host") {
		x.Host = m["host"].(string)
	}
	// string base_path = 4;
	if helpers.MapHasKey(m, "basePath") {
		x.BasePath = m["basePath"].(string)
	}
	// repeated string schemes = 5;
	if helpers.MapHasKey(m, "schemes") {
		v, ok := m["schemes"].([]interface{})
		if ok {
			x.Schemes = helpers.ConvertInterfaceArrayToStringArray(v)
		} else {
			log.Printf("unexpected: %+v", m["schemes"])
		}
	}
	// repeated string consumes = 6;
	if helpers.MapHasKey(m, "consumes") {
		v, ok := m["consumes"].([]interface{})
		if ok {
			x.Consumes = helpers.ConvertInterfaceArrayToStringArray(v)
		} else {
			log.Printf("unexpected: %+v", m["consumes"])
		}
	}
	// repeated string produces = 7;
	if helpers.MapHasKey(m, "produces") {
		v, ok := m["produces"].([]interface{})
		if ok {
			x.Produces = helpers.ConvertInterfaceArrayToStringArray(v)
		} else {
			log.Printf("unexpected: %+v", m["produces"])
		}
	}
	// Paths paths = 8;
	if helpers.MapHasKey(m, "paths") {
		x.Paths = BuildPaths(m["paths"])
	}
	// Definitions definitions = 9;
	if helpers.MapHasKey(m, "definitions") {
		x.Definitions = BuildDefinitions(m["definitions"])
	}
	// ParameterDefinitions parameters = 10;
	if helpers.MapHasKey(m, "parameters") {
		x.Parameters = BuildParameterDefinitions(m["parameters"])
	}
	// ResponseDefinitions responses = 11;
	if helpers.MapHasKey(m, "responses") {
		x.Responses = BuildResponseDefinitions(m["responses"])
	}
	// repeated SecurityRequirement security = 12;
	if helpers.MapHasKey(m, "security") {
		// repeated class SecurityRequirement
		x.Security = make([]*SecurityRequirement, 0)
		a, ok := m["security"].([]interface{})
		if ok {
			for _, item := range a {
				x.Security = append(x.Security, BuildSecurityRequirement(item))
			}
		}
	}
	// SecurityDefinitions security_definitions = 13;
	if helpers.MapHasKey(m, "securityDefinitions") {
		x.SecurityDefinitions = BuildSecurityDefinitions(m["securityDefinitions"])
	}
	// repeated Tag tags = 14;
	if helpers.MapHasKey(m, "tags") {
		// repeated class Tag
		x.Tags = make([]*Tag, 0)
		a, ok := m["tags"].([]interface{})
		if ok {
			for _, item := range a {
				x.Tags = append(x.Tags, BuildTag(item))
			}
		}
	}
	// ExternalDocs external_docs = 15;
	if helpers.MapHasKey(m, "externalDocs") {
		x.ExternalDocs = BuildExternalDocs(m["externalDocs"])
	}
	return x
}

func BuildExamples(in interface{}) *Examples {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildExamples: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	x := &Examples{}
	// repeated NamedAny additional_properties = 1;
	// MAP: Any
	x.AdditionalProperties = make([]*NamedAny, 0)
	for k, v := range m {
		pair := &NamedAny{}
		pair.Name = k
		pair.Value = BuildAny(v)
		x.AdditionalProperties = append(x.AdditionalProperties, pair)
	}
	return x
}

func BuildExternalDocs(in interface{}) *ExternalDocs {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildExternalDocs: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	requiredKeys := []string{"url"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"description", "url"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &ExternalDocs{}
	// string description = 1;
	if helpers.MapHasKey(m, "description") {
		x.Description = m["description"].(string)
	}
	// string url = 2;
	if helpers.MapHasKey(m, "url") {
		x.Url = m["url"].(string)
	}
	// repeated NamedAny vendor_extension = 3;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for k, v := range m {
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = BuildAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func BuildFileSchema(in interface{}) *FileSchema {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildFileSchema: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	requiredKeys := []string{"type"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"default", "description", "example", "externalDocs", "format", "readOnly", "required", "title", "type"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &FileSchema{}
	// string format = 1;
	if helpers.MapHasKey(m, "format") {
		x.Format = m["format"].(string)
	}
	// string title = 2;
	if helpers.MapHasKey(m, "title") {
		x.Title = m["title"].(string)
	}
	// string description = 3;
	if helpers.MapHasKey(m, "description") {
		x.Description = m["description"].(string)
	}
	// Any default = 4;
	if helpers.MapHasKey(m, "default") {
		x.Default = BuildAny(m["default"])
	}
	// repeated string required = 5;
	if helpers.MapHasKey(m, "required") {
		v, ok := m["required"].([]interface{})
		if ok {
			x.Required = helpers.ConvertInterfaceArrayToStringArray(v)
		} else {
			log.Printf("unexpected: %+v", m["required"])
		}
	}
	// string type = 6;
	if helpers.MapHasKey(m, "type") {
		x.Type = m["type"].(string)
	}
	// bool read_only = 7;
	if helpers.MapHasKey(m, "readOnly") {
		x.ReadOnly = m["readOnly"].(bool)
	}
	// ExternalDocs external_docs = 8;
	if helpers.MapHasKey(m, "externalDocs") {
		x.ExternalDocs = BuildExternalDocs(m["externalDocs"])
	}
	// Any example = 9;
	if helpers.MapHasKey(m, "example") {
		x.Example = BuildAny(m["example"])
	}
	// repeated NamedAny vendor_extension = 10;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for k, v := range m {
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = BuildAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func BuildFormDataParameterSubSchema(in interface{}) *FormDataParameterSubSchema {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildFormDataParameterSubSchema: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	allowedKeys := []string{"allowEmptyValue", "collectionFormat", "default", "description", "enum", "exclusiveMaximum", "exclusiveMinimum", "format", "in", "items", "maxItems", "maxLength", "maximum", "minItems", "minLength", "minimum", "multipleOf", "name", "pattern", "required", "type", "uniqueItems"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &FormDataParameterSubSchema{}
	// bool required = 1;
	if helpers.MapHasKey(m, "required") {
		x.Required = m["required"].(bool)
	}
	// string in = 2;
	if helpers.MapHasKey(m, "in") {
		x.In = m["in"].(string)
	}
	// string description = 3;
	if helpers.MapHasKey(m, "description") {
		x.Description = m["description"].(string)
	}
	// string name = 4;
	if helpers.MapHasKey(m, "name") {
		x.Name = m["name"].(string)
	}
	// bool allow_empty_value = 5;
	if helpers.MapHasKey(m, "allowEmptyValue") {
		x.AllowEmptyValue = m["allowEmptyValue"].(bool)
	}
	// string type = 6;
	if helpers.MapHasKey(m, "type") {
		x.Type = m["type"].(string)
	}
	// string format = 7;
	if helpers.MapHasKey(m, "format") {
		x.Format = m["format"].(string)
	}
	// PrimitivesItems items = 8;
	if helpers.MapHasKey(m, "items") {
		x.Items = BuildPrimitivesItems(m["items"])
	}
	// string collection_format = 9;
	if helpers.MapHasKey(m, "collectionFormat") {
		x.CollectionFormat = m["collectionFormat"].(string)
	}
	// Any default = 10;
	if helpers.MapHasKey(m, "default") {
		x.Default = BuildAny(m["default"])
	}
	// float maximum = 11;
	if helpers.MapHasKey(m, "maximum") {
		x.Maximum = m["maximum"].(float64)
	}
	// bool exclusive_maximum = 12;
	if helpers.MapHasKey(m, "exclusiveMaximum") {
		x.ExclusiveMaximum = m["exclusiveMaximum"].(bool)
	}
	// float minimum = 13;
	if helpers.MapHasKey(m, "minimum") {
		x.Minimum = m["minimum"].(float64)
	}
	// bool exclusive_minimum = 14;
	if helpers.MapHasKey(m, "exclusiveMinimum") {
		x.ExclusiveMinimum = m["exclusiveMinimum"].(bool)
	}
	// int64 max_length = 15;
	if helpers.MapHasKey(m, "maxLength") {
		x.MaxLength = m["maxLength"].(int64)
	}
	// int64 min_length = 16;
	if helpers.MapHasKey(m, "minLength") {
		x.MinLength = m["minLength"].(int64)
	}
	// string pattern = 17;
	if helpers.MapHasKey(m, "pattern") {
		x.Pattern = m["pattern"].(string)
	}
	// int64 max_items = 18;
	if helpers.MapHasKey(m, "maxItems") {
		x.MaxItems = m["maxItems"].(int64)
	}
	// int64 min_items = 19;
	if helpers.MapHasKey(m, "minItems") {
		x.MinItems = m["minItems"].(int64)
	}
	// bool unique_items = 20;
	if helpers.MapHasKey(m, "uniqueItems") {
		x.UniqueItems = m["uniqueItems"].(bool)
	}
	// repeated Any enum = 21;
	if helpers.MapHasKey(m, "enum") {
		// repeated class Any
		x.Enum = make([]*Any, 0)
		a, ok := m["enum"].([]interface{})
		if ok {
			for _, item := range a {
				x.Enum = append(x.Enum, BuildAny(item))
			}
		}
	}
	// float multiple_of = 22;
	if helpers.MapHasKey(m, "multipleOf") {
		x.MultipleOf = m["multipleOf"].(float64)
	}
	// repeated NamedAny vendor_extension = 23;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for k, v := range m {
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = BuildAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func BuildHeader(in interface{}) *Header {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildHeader: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	requiredKeys := []string{"type"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"collectionFormat", "default", "description", "enum", "exclusiveMaximum", "exclusiveMinimum", "format", "items", "maxItems", "maxLength", "maximum", "minItems", "minLength", "minimum", "multipleOf", "pattern", "type", "uniqueItems"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Header{}
	// string type = 1;
	if helpers.MapHasKey(m, "type") {
		x.Type = m["type"].(string)
	}
	// string format = 2;
	if helpers.MapHasKey(m, "format") {
		x.Format = m["format"].(string)
	}
	// PrimitivesItems items = 3;
	if helpers.MapHasKey(m, "items") {
		x.Items = BuildPrimitivesItems(m["items"])
	}
	// string collection_format = 4;
	if helpers.MapHasKey(m, "collectionFormat") {
		x.CollectionFormat = m["collectionFormat"].(string)
	}
	// Any default = 5;
	if helpers.MapHasKey(m, "default") {
		x.Default = BuildAny(m["default"])
	}
	// float maximum = 6;
	if helpers.MapHasKey(m, "maximum") {
		x.Maximum = m["maximum"].(float64)
	}
	// bool exclusive_maximum = 7;
	if helpers.MapHasKey(m, "exclusiveMaximum") {
		x.ExclusiveMaximum = m["exclusiveMaximum"].(bool)
	}
	// float minimum = 8;
	if helpers.MapHasKey(m, "minimum") {
		x.Minimum = m["minimum"].(float64)
	}
	// bool exclusive_minimum = 9;
	if helpers.MapHasKey(m, "exclusiveMinimum") {
		x.ExclusiveMinimum = m["exclusiveMinimum"].(bool)
	}
	// int64 max_length = 10;
	if helpers.MapHasKey(m, "maxLength") {
		x.MaxLength = m["maxLength"].(int64)
	}
	// int64 min_length = 11;
	if helpers.MapHasKey(m, "minLength") {
		x.MinLength = m["minLength"].(int64)
	}
	// string pattern = 12;
	if helpers.MapHasKey(m, "pattern") {
		x.Pattern = m["pattern"].(string)
	}
	// int64 max_items = 13;
	if helpers.MapHasKey(m, "maxItems") {
		x.MaxItems = m["maxItems"].(int64)
	}
	// int64 min_items = 14;
	if helpers.MapHasKey(m, "minItems") {
		x.MinItems = m["minItems"].(int64)
	}
	// bool unique_items = 15;
	if helpers.MapHasKey(m, "uniqueItems") {
		x.UniqueItems = m["uniqueItems"].(bool)
	}
	// repeated Any enum = 16;
	if helpers.MapHasKey(m, "enum") {
		// repeated class Any
		x.Enum = make([]*Any, 0)
		a, ok := m["enum"].([]interface{})
		if ok {
			for _, item := range a {
				x.Enum = append(x.Enum, BuildAny(item))
			}
		}
	}
	// float multiple_of = 17;
	if helpers.MapHasKey(m, "multipleOf") {
		x.MultipleOf = m["multipleOf"].(float64)
	}
	// string description = 18;
	if helpers.MapHasKey(m, "description") {
		x.Description = m["description"].(string)
	}
	// repeated NamedAny vendor_extension = 19;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for k, v := range m {
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = BuildAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func BuildHeaderParameterSubSchema(in interface{}) *HeaderParameterSubSchema {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildHeaderParameterSubSchema: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	allowedKeys := []string{"collectionFormat", "default", "description", "enum", "exclusiveMaximum", "exclusiveMinimum", "format", "in", "items", "maxItems", "maxLength", "maximum", "minItems", "minLength", "minimum", "multipleOf", "name", "pattern", "required", "type", "uniqueItems"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &HeaderParameterSubSchema{}
	// bool required = 1;
	if helpers.MapHasKey(m, "required") {
		x.Required = m["required"].(bool)
	}
	// string in = 2;
	if helpers.MapHasKey(m, "in") {
		x.In = m["in"].(string)
	}
	// string description = 3;
	if helpers.MapHasKey(m, "description") {
		x.Description = m["description"].(string)
	}
	// string name = 4;
	if helpers.MapHasKey(m, "name") {
		x.Name = m["name"].(string)
	}
	// string type = 5;
	if helpers.MapHasKey(m, "type") {
		x.Type = m["type"].(string)
	}
	// string format = 6;
	if helpers.MapHasKey(m, "format") {
		x.Format = m["format"].(string)
	}
	// PrimitivesItems items = 7;
	if helpers.MapHasKey(m, "items") {
		x.Items = BuildPrimitivesItems(m["items"])
	}
	// string collection_format = 8;
	if helpers.MapHasKey(m, "collectionFormat") {
		x.CollectionFormat = m["collectionFormat"].(string)
	}
	// Any default = 9;
	if helpers.MapHasKey(m, "default") {
		x.Default = BuildAny(m["default"])
	}
	// float maximum = 10;
	if helpers.MapHasKey(m, "maximum") {
		x.Maximum = m["maximum"].(float64)
	}
	// bool exclusive_maximum = 11;
	if helpers.MapHasKey(m, "exclusiveMaximum") {
		x.ExclusiveMaximum = m["exclusiveMaximum"].(bool)
	}
	// float minimum = 12;
	if helpers.MapHasKey(m, "minimum") {
		x.Minimum = m["minimum"].(float64)
	}
	// bool exclusive_minimum = 13;
	if helpers.MapHasKey(m, "exclusiveMinimum") {
		x.ExclusiveMinimum = m["exclusiveMinimum"].(bool)
	}
	// int64 max_length = 14;
	if helpers.MapHasKey(m, "maxLength") {
		x.MaxLength = m["maxLength"].(int64)
	}
	// int64 min_length = 15;
	if helpers.MapHasKey(m, "minLength") {
		x.MinLength = m["minLength"].(int64)
	}
	// string pattern = 16;
	if helpers.MapHasKey(m, "pattern") {
		x.Pattern = m["pattern"].(string)
	}
	// int64 max_items = 17;
	if helpers.MapHasKey(m, "maxItems") {
		x.MaxItems = m["maxItems"].(int64)
	}
	// int64 min_items = 18;
	if helpers.MapHasKey(m, "minItems") {
		x.MinItems = m["minItems"].(int64)
	}
	// bool unique_items = 19;
	if helpers.MapHasKey(m, "uniqueItems") {
		x.UniqueItems = m["uniqueItems"].(bool)
	}
	// repeated Any enum = 20;
	if helpers.MapHasKey(m, "enum") {
		// repeated class Any
		x.Enum = make([]*Any, 0)
		a, ok := m["enum"].([]interface{})
		if ok {
			for _, item := range a {
				x.Enum = append(x.Enum, BuildAny(item))
			}
		}
	}
	// float multiple_of = 21;
	if helpers.MapHasKey(m, "multipleOf") {
		x.MultipleOf = m["multipleOf"].(float64)
	}
	// repeated NamedAny vendor_extension = 22;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for k, v := range m {
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = BuildAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func BuildHeaders(in interface{}) *Headers {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildHeaders: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	x := &Headers{}
	// repeated NamedHeader additional_properties = 1;
	// MAP: Header
	x.AdditionalProperties = make([]*NamedHeader, 0)
	for k, v := range m {
		pair := &NamedHeader{}
		pair.Name = k
		pair.Value = BuildHeader(v)
		x.AdditionalProperties = append(x.AdditionalProperties, pair)
	}
	return x
}

func BuildInfo(in interface{}) *Info {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildInfo: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	requiredKeys := []string{"title", "version"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"contact", "description", "license", "termsOfService", "title", "version"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Info{}
	// string title = 1;
	if helpers.MapHasKey(m, "title") {
		x.Title = m["title"].(string)
	}
	// string version = 2;
	if helpers.MapHasKey(m, "version") {
		x.Version = m["version"].(string)
	}
	// string description = 3;
	if helpers.MapHasKey(m, "description") {
		x.Description = m["description"].(string)
	}
	// string terms_of_service = 4;
	if helpers.MapHasKey(m, "termsOfService") {
		x.TermsOfService = m["termsOfService"].(string)
	}
	// Contact contact = 5;
	if helpers.MapHasKey(m, "contact") {
		x.Contact = BuildContact(m["contact"])
	}
	// License license = 6;
	if helpers.MapHasKey(m, "license") {
		x.License = BuildLicense(m["license"])
	}
	// repeated NamedAny vendor_extension = 7;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for k, v := range m {
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = BuildAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func BuildItemsItem(in interface{}) *ItemsItem {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildItemsItem: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	allowedKeys := []string{"schema"}
	allowedPatterns := []string{}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &ItemsItem{}
	// repeated Schema schema = 1;
	if helpers.MapHasKey(m, "schema") {
		// repeated class Schema
		x.Schema = make([]*Schema, 0)
		a, ok := m["schema"].([]interface{})
		if ok {
			for _, item := range a {
				x.Schema = append(x.Schema, BuildSchema(item))
			}
		}
	}
	return x
}

func BuildJsonReference(in interface{}) *JsonReference {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildJsonReference: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	requiredKeys := []string{"$ref"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"$ref"}
	allowedPatterns := []string{}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &JsonReference{}
	// string _ref = 1;
	if helpers.MapHasKey(m, "$ref") {
		x.XRef = m["$ref"].(string)
	}
	return x
}

func BuildLicense(in interface{}) *License {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildLicense: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	requiredKeys := []string{"name"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"name", "url"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &License{}
	// string name = 1;
	if helpers.MapHasKey(m, "name") {
		x.Name = m["name"].(string)
	}
	// string url = 2;
	if helpers.MapHasKey(m, "url") {
		x.Url = m["url"].(string)
	}
	// repeated NamedAny vendor_extension = 3;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for k, v := range m {
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = BuildAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func BuildNamedAny(in interface{}) *NamedAny {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildNamedAny: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	allowedKeys := []string{"name", "value"}
	allowedPatterns := []string{}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &NamedAny{}
	// string name = 1;
	if helpers.MapHasKey(m, "name") {
		x.Name = m["name"].(string)
	}
	// Any value = 2;
	if helpers.MapHasKey(m, "value") {
		x.Value = BuildAny(m["value"])
	}
	return x
}

func BuildNamedHeader(in interface{}) *NamedHeader {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildNamedHeader: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	allowedKeys := []string{"name", "value"}
	allowedPatterns := []string{}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &NamedHeader{}
	// string name = 1;
	if helpers.MapHasKey(m, "name") {
		x.Name = m["name"].(string)
	}
	// Header value = 2;
	if helpers.MapHasKey(m, "value") {
		x.Value = BuildHeader(m["value"])
	}
	return x
}

func BuildNamedParameter(in interface{}) *NamedParameter {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildNamedParameter: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	allowedKeys := []string{"name", "value"}
	allowedPatterns := []string{}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &NamedParameter{}
	// string name = 1;
	if helpers.MapHasKey(m, "name") {
		x.Name = m["name"].(string)
	}
	// Parameter value = 2;
	if helpers.MapHasKey(m, "value") {
		x.Value = BuildParameter(m["value"])
	}
	return x
}

func BuildNamedPathItem(in interface{}) *NamedPathItem {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildNamedPathItem: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	allowedKeys := []string{"name", "value"}
	allowedPatterns := []string{}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &NamedPathItem{}
	// string name = 1;
	if helpers.MapHasKey(m, "name") {
		x.Name = m["name"].(string)
	}
	// PathItem value = 2;
	if helpers.MapHasKey(m, "value") {
		x.Value = BuildPathItem(m["value"])
	}
	return x
}

func BuildNamedResponse(in interface{}) *NamedResponse {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildNamedResponse: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	allowedKeys := []string{"name", "value"}
	allowedPatterns := []string{}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &NamedResponse{}
	// string name = 1;
	if helpers.MapHasKey(m, "name") {
		x.Name = m["name"].(string)
	}
	// Response value = 2;
	if helpers.MapHasKey(m, "value") {
		x.Value = BuildResponse(m["value"])
	}
	return x
}

func BuildNamedResponseValue(in interface{}) *NamedResponseValue {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildNamedResponseValue: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	allowedKeys := []string{"name", "value"}
	allowedPatterns := []string{}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &NamedResponseValue{}
	// string name = 1;
	if helpers.MapHasKey(m, "name") {
		x.Name = m["name"].(string)
	}
	// ResponseValue value = 2;
	if helpers.MapHasKey(m, "value") {
		x.Value = BuildResponseValue(m["value"])
	}
	return x
}

func BuildNamedSchema(in interface{}) *NamedSchema {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildNamedSchema: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	allowedKeys := []string{"name", "value"}
	allowedPatterns := []string{}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &NamedSchema{}
	// string name = 1;
	if helpers.MapHasKey(m, "name") {
		x.Name = m["name"].(string)
	}
	// Schema value = 2;
	if helpers.MapHasKey(m, "value") {
		x.Value = BuildSchema(m["value"])
	}
	return x
}

func BuildNamedSecurityDefinitionsItem(in interface{}) *NamedSecurityDefinitionsItem {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildNamedSecurityDefinitionsItem: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	allowedKeys := []string{"name", "value"}
	allowedPatterns := []string{}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &NamedSecurityDefinitionsItem{}
	// string name = 1;
	if helpers.MapHasKey(m, "name") {
		x.Name = m["name"].(string)
	}
	// SecurityDefinitionsItem value = 2;
	if helpers.MapHasKey(m, "value") {
		x.Value = BuildSecurityDefinitionsItem(m["value"])
	}
	return x
}

func BuildNamedString(in interface{}) *NamedString {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildNamedString: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	allowedKeys := []string{"name", "value"}
	allowedPatterns := []string{}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &NamedString{}
	// string name = 1;
	if helpers.MapHasKey(m, "name") {
		x.Name = m["name"].(string)
	}
	// string value = 2;
	if helpers.MapHasKey(m, "value") {
		x.Value = m["value"].(string)
	}
	return x
}

func BuildNamedStringArray(in interface{}) *NamedStringArray {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildNamedStringArray: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	allowedKeys := []string{"name", "value"}
	allowedPatterns := []string{}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &NamedStringArray{}
	// string name = 1;
	if helpers.MapHasKey(m, "name") {
		x.Name = m["name"].(string)
	}
	// StringArray value = 2;
	if helpers.MapHasKey(m, "value") {
		x.Value = BuildStringArray(m["value"])
	}
	return x
}

func BuildNonBodyParameter(in interface{}) *NonBodyParameter {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildNonBodyParameter: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	requiredKeys := []string{"in", "name", "type"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	x := &NonBodyParameter{}
	// HeaderParameterSubSchema header_parameter_sub_schema = 1;
	{
		t := BuildHeaderParameterSubSchema(m)
		if t != nil {
			x.Oneof = &NonBodyParameter_HeaderParameterSubSchema{HeaderParameterSubSchema: t}
		}
	}
	// FormDataParameterSubSchema form_data_parameter_sub_schema = 2;
	{
		t := BuildFormDataParameterSubSchema(m)
		if t != nil {
			x.Oneof = &NonBodyParameter_FormDataParameterSubSchema{FormDataParameterSubSchema: t}
		}
	}
	// QueryParameterSubSchema query_parameter_sub_schema = 3;
	{
		t := BuildQueryParameterSubSchema(m)
		if t != nil {
			x.Oneof = &NonBodyParameter_QueryParameterSubSchema{QueryParameterSubSchema: t}
		}
	}
	// PathParameterSubSchema path_parameter_sub_schema = 4;
	{
		t := BuildPathParameterSubSchema(m)
		if t != nil {
			x.Oneof = &NonBodyParameter_PathParameterSubSchema{PathParameterSubSchema: t}
		}
	}
	return x
}

func BuildOauth2AccessCodeSecurity(in interface{}) *Oauth2AccessCodeSecurity {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildOauth2AccessCodeSecurity: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	requiredKeys := []string{"authorizationUrl", "flow", "tokenUrl", "type"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"authorizationUrl", "description", "flow", "scopes", "tokenUrl", "type"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Oauth2AccessCodeSecurity{}
	// string type = 1;
	if helpers.MapHasKey(m, "type") {
		x.Type = m["type"].(string)
	}
	// string flow = 2;
	if helpers.MapHasKey(m, "flow") {
		x.Flow = m["flow"].(string)
	}
	// Oauth2Scopes scopes = 3;
	if helpers.MapHasKey(m, "scopes") {
		x.Scopes = BuildOauth2Scopes(m["scopes"])
	}
	// string authorization_url = 4;
	if helpers.MapHasKey(m, "authorizationUrl") {
		x.AuthorizationUrl = m["authorizationUrl"].(string)
	}
	// string token_url = 5;
	if helpers.MapHasKey(m, "tokenUrl") {
		x.TokenUrl = m["tokenUrl"].(string)
	}
	// string description = 6;
	if helpers.MapHasKey(m, "description") {
		x.Description = m["description"].(string)
	}
	// repeated NamedAny vendor_extension = 7;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for k, v := range m {
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = BuildAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func BuildOauth2ApplicationSecurity(in interface{}) *Oauth2ApplicationSecurity {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildOauth2ApplicationSecurity: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	requiredKeys := []string{"flow", "tokenUrl", "type"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"description", "flow", "scopes", "tokenUrl", "type"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Oauth2ApplicationSecurity{}
	// string type = 1;
	if helpers.MapHasKey(m, "type") {
		x.Type = m["type"].(string)
	}
	// string flow = 2;
	if helpers.MapHasKey(m, "flow") {
		x.Flow = m["flow"].(string)
	}
	// Oauth2Scopes scopes = 3;
	if helpers.MapHasKey(m, "scopes") {
		x.Scopes = BuildOauth2Scopes(m["scopes"])
	}
	// string token_url = 4;
	if helpers.MapHasKey(m, "tokenUrl") {
		x.TokenUrl = m["tokenUrl"].(string)
	}
	// string description = 5;
	if helpers.MapHasKey(m, "description") {
		x.Description = m["description"].(string)
	}
	// repeated NamedAny vendor_extension = 6;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for k, v := range m {
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = BuildAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func BuildOauth2ImplicitSecurity(in interface{}) *Oauth2ImplicitSecurity {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildOauth2ImplicitSecurity: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	requiredKeys := []string{"authorizationUrl", "flow", "type"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"authorizationUrl", "description", "flow", "scopes", "type"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Oauth2ImplicitSecurity{}
	// string type = 1;
	if helpers.MapHasKey(m, "type") {
		x.Type = m["type"].(string)
	}
	// string flow = 2;
	if helpers.MapHasKey(m, "flow") {
		x.Flow = m["flow"].(string)
	}
	// Oauth2Scopes scopes = 3;
	if helpers.MapHasKey(m, "scopes") {
		x.Scopes = BuildOauth2Scopes(m["scopes"])
	}
	// string authorization_url = 4;
	if helpers.MapHasKey(m, "authorizationUrl") {
		x.AuthorizationUrl = m["authorizationUrl"].(string)
	}
	// string description = 5;
	if helpers.MapHasKey(m, "description") {
		x.Description = m["description"].(string)
	}
	// repeated NamedAny vendor_extension = 6;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for k, v := range m {
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = BuildAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func BuildOauth2PasswordSecurity(in interface{}) *Oauth2PasswordSecurity {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildOauth2PasswordSecurity: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	requiredKeys := []string{"flow", "tokenUrl", "type"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"description", "flow", "scopes", "tokenUrl", "type"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Oauth2PasswordSecurity{}
	// string type = 1;
	if helpers.MapHasKey(m, "type") {
		x.Type = m["type"].(string)
	}
	// string flow = 2;
	if helpers.MapHasKey(m, "flow") {
		x.Flow = m["flow"].(string)
	}
	// Oauth2Scopes scopes = 3;
	if helpers.MapHasKey(m, "scopes") {
		x.Scopes = BuildOauth2Scopes(m["scopes"])
	}
	// string token_url = 4;
	if helpers.MapHasKey(m, "tokenUrl") {
		x.TokenUrl = m["tokenUrl"].(string)
	}
	// string description = 5;
	if helpers.MapHasKey(m, "description") {
		x.Description = m["description"].(string)
	}
	// repeated NamedAny vendor_extension = 6;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for k, v := range m {
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = BuildAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func BuildOauth2Scopes(in interface{}) *Oauth2Scopes {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildOauth2Scopes: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	x := &Oauth2Scopes{}
	// repeated NamedString additional_properties = 1;
	// MAP: string
	x.AdditionalProperties = make([]*NamedString, 0)
	for k, v := range m {
		pair := &NamedString{}
		pair.Name = k
		pair.Value = v.(string)
		x.AdditionalProperties = append(x.AdditionalProperties, pair)
	}
	return x
}

func BuildOperation(in interface{}) *Operation {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildOperation: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	requiredKeys := []string{"responses"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"consumes", "deprecated", "description", "externalDocs", "operationId", "parameters", "produces", "responses", "schemes", "security", "summary", "tags"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Operation{}
	// repeated string tags = 1;
	if helpers.MapHasKey(m, "tags") {
		v, ok := m["tags"].([]interface{})
		if ok {
			x.Tags = helpers.ConvertInterfaceArrayToStringArray(v)
		} else {
			log.Printf("unexpected: %+v", m["tags"])
		}
	}
	// string summary = 2;
	if helpers.MapHasKey(m, "summary") {
		x.Summary = m["summary"].(string)
	}
	// string description = 3;
	if helpers.MapHasKey(m, "description") {
		x.Description = m["description"].(string)
	}
	// ExternalDocs external_docs = 4;
	if helpers.MapHasKey(m, "externalDocs") {
		x.ExternalDocs = BuildExternalDocs(m["externalDocs"])
	}
	// string operation_id = 5;
	if helpers.MapHasKey(m, "operationId") {
		x.OperationId = m["operationId"].(string)
	}
	// repeated string produces = 6;
	if helpers.MapHasKey(m, "produces") {
		v, ok := m["produces"].([]interface{})
		if ok {
			x.Produces = helpers.ConvertInterfaceArrayToStringArray(v)
		} else {
			log.Printf("unexpected: %+v", m["produces"])
		}
	}
	// repeated string consumes = 7;
	if helpers.MapHasKey(m, "consumes") {
		v, ok := m["consumes"].([]interface{})
		if ok {
			x.Consumes = helpers.ConvertInterfaceArrayToStringArray(v)
		} else {
			log.Printf("unexpected: %+v", m["consumes"])
		}
	}
	// repeated ParametersItem parameters = 8;
	if helpers.MapHasKey(m, "parameters") {
		// repeated class ParametersItem
		x.Parameters = make([]*ParametersItem, 0)
		a, ok := m["parameters"].([]interface{})
		if ok {
			for _, item := range a {
				x.Parameters = append(x.Parameters, BuildParametersItem(item))
			}
		}
	}
	// Responses responses = 9;
	if helpers.MapHasKey(m, "responses") {
		x.Responses = BuildResponses(m["responses"])
	}
	// repeated string schemes = 10;
	if helpers.MapHasKey(m, "schemes") {
		v, ok := m["schemes"].([]interface{})
		if ok {
			x.Schemes = helpers.ConvertInterfaceArrayToStringArray(v)
		} else {
			log.Printf("unexpected: %+v", m["schemes"])
		}
	}
	// bool deprecated = 11;
	if helpers.MapHasKey(m, "deprecated") {
		x.Deprecated = m["deprecated"].(bool)
	}
	// repeated SecurityRequirement security = 12;
	if helpers.MapHasKey(m, "security") {
		// repeated class SecurityRequirement
		x.Security = make([]*SecurityRequirement, 0)
		a, ok := m["security"].([]interface{})
		if ok {
			for _, item := range a {
				x.Security = append(x.Security, BuildSecurityRequirement(item))
			}
		}
	}
	// repeated NamedAny vendor_extension = 13;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for k, v := range m {
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = BuildAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func BuildParameter(in interface{}) *Parameter {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildParameter: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	x := &Parameter{}
	// BodyParameter body_parameter = 1;
	{
		t := BuildBodyParameter(m)
		if t != nil {
			x.Oneof = &Parameter_BodyParameter{BodyParameter: t}
		}
	}
	// NonBodyParameter non_body_parameter = 2;
	{
		t := BuildNonBodyParameter(m)
		if t != nil {
			x.Oneof = &Parameter_NonBodyParameter{NonBodyParameter: t}
		}
	}
	return x
}

func BuildParameterDefinitions(in interface{}) *ParameterDefinitions {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildParameterDefinitions: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	x := &ParameterDefinitions{}
	// repeated NamedParameter additional_properties = 1;
	// MAP: Parameter
	x.AdditionalProperties = make([]*NamedParameter, 0)
	for k, v := range m {
		pair := &NamedParameter{}
		pair.Name = k
		pair.Value = BuildParameter(v)
		x.AdditionalProperties = append(x.AdditionalProperties, pair)
	}
	return x
}

func BuildParametersItem(in interface{}) *ParametersItem {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildParametersItem: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	x := &ParametersItem{}
	// Parameter parameter = 1;
	{
		t := BuildParameter(m)
		if t != nil {
			x.Oneof = &ParametersItem_Parameter{Parameter: t}
		}
	}
	// JsonReference json_reference = 2;
	{
		t := BuildJsonReference(m)
		if t != nil {
			x.Oneof = &ParametersItem_JsonReference{JsonReference: t}
		}
	}
	return x
}

func BuildPathItem(in interface{}) *PathItem {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildPathItem: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	allowedKeys := []string{"$ref", "delete", "get", "head", "options", "parameters", "patch", "post", "put"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &PathItem{}
	// string _ref = 1;
	if helpers.MapHasKey(m, "$ref") {
		x.XRef = m["$ref"].(string)
	}
	// Operation get = 2;
	if helpers.MapHasKey(m, "get") {
		x.Get = BuildOperation(m["get"])
	}
	// Operation put = 3;
	if helpers.MapHasKey(m, "put") {
		x.Put = BuildOperation(m["put"])
	}
	// Operation post = 4;
	if helpers.MapHasKey(m, "post") {
		x.Post = BuildOperation(m["post"])
	}
	// Operation delete = 5;
	if helpers.MapHasKey(m, "delete") {
		x.Delete = BuildOperation(m["delete"])
	}
	// Operation options = 6;
	if helpers.MapHasKey(m, "options") {
		x.Options = BuildOperation(m["options"])
	}
	// Operation head = 7;
	if helpers.MapHasKey(m, "head") {
		x.Head = BuildOperation(m["head"])
	}
	// Operation patch = 8;
	if helpers.MapHasKey(m, "patch") {
		x.Patch = BuildOperation(m["patch"])
	}
	// repeated ParametersItem parameters = 9;
	if helpers.MapHasKey(m, "parameters") {
		// repeated class ParametersItem
		x.Parameters = make([]*ParametersItem, 0)
		a, ok := m["parameters"].([]interface{})
		if ok {
			for _, item := range a {
				x.Parameters = append(x.Parameters, BuildParametersItem(item))
			}
		}
	}
	// repeated NamedAny vendor_extension = 10;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for k, v := range m {
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = BuildAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func BuildPathParameterSubSchema(in interface{}) *PathParameterSubSchema {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildPathParameterSubSchema: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	requiredKeys := []string{"required"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"collectionFormat", "default", "description", "enum", "exclusiveMaximum", "exclusiveMinimum", "format", "in", "items", "maxItems", "maxLength", "maximum", "minItems", "minLength", "minimum", "multipleOf", "name", "pattern", "required", "type", "uniqueItems"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &PathParameterSubSchema{}
	// bool required = 1;
	if helpers.MapHasKey(m, "required") {
		x.Required = m["required"].(bool)
	}
	// string in = 2;
	if helpers.MapHasKey(m, "in") {
		x.In = m["in"].(string)
	}
	// string description = 3;
	if helpers.MapHasKey(m, "description") {
		x.Description = m["description"].(string)
	}
	// string name = 4;
	if helpers.MapHasKey(m, "name") {
		x.Name = m["name"].(string)
	}
	// string type = 5;
	if helpers.MapHasKey(m, "type") {
		x.Type = m["type"].(string)
	}
	// string format = 6;
	if helpers.MapHasKey(m, "format") {
		x.Format = m["format"].(string)
	}
	// PrimitivesItems items = 7;
	if helpers.MapHasKey(m, "items") {
		x.Items = BuildPrimitivesItems(m["items"])
	}
	// string collection_format = 8;
	if helpers.MapHasKey(m, "collectionFormat") {
		x.CollectionFormat = m["collectionFormat"].(string)
	}
	// Any default = 9;
	if helpers.MapHasKey(m, "default") {
		x.Default = BuildAny(m["default"])
	}
	// float maximum = 10;
	if helpers.MapHasKey(m, "maximum") {
		x.Maximum = m["maximum"].(float64)
	}
	// bool exclusive_maximum = 11;
	if helpers.MapHasKey(m, "exclusiveMaximum") {
		x.ExclusiveMaximum = m["exclusiveMaximum"].(bool)
	}
	// float minimum = 12;
	if helpers.MapHasKey(m, "minimum") {
		x.Minimum = m["minimum"].(float64)
	}
	// bool exclusive_minimum = 13;
	if helpers.MapHasKey(m, "exclusiveMinimum") {
		x.ExclusiveMinimum = m["exclusiveMinimum"].(bool)
	}
	// int64 max_length = 14;
	if helpers.MapHasKey(m, "maxLength") {
		x.MaxLength = m["maxLength"].(int64)
	}
	// int64 min_length = 15;
	if helpers.MapHasKey(m, "minLength") {
		x.MinLength = m["minLength"].(int64)
	}
	// string pattern = 16;
	if helpers.MapHasKey(m, "pattern") {
		x.Pattern = m["pattern"].(string)
	}
	// int64 max_items = 17;
	if helpers.MapHasKey(m, "maxItems") {
		x.MaxItems = m["maxItems"].(int64)
	}
	// int64 min_items = 18;
	if helpers.MapHasKey(m, "minItems") {
		x.MinItems = m["minItems"].(int64)
	}
	// bool unique_items = 19;
	if helpers.MapHasKey(m, "uniqueItems") {
		x.UniqueItems = m["uniqueItems"].(bool)
	}
	// repeated Any enum = 20;
	if helpers.MapHasKey(m, "enum") {
		// repeated class Any
		x.Enum = make([]*Any, 0)
		a, ok := m["enum"].([]interface{})
		if ok {
			for _, item := range a {
				x.Enum = append(x.Enum, BuildAny(item))
			}
		}
	}
	// float multiple_of = 21;
	if helpers.MapHasKey(m, "multipleOf") {
		x.MultipleOf = m["multipleOf"].(float64)
	}
	// repeated NamedAny vendor_extension = 22;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for k, v := range m {
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = BuildAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func BuildPaths(in interface{}) *Paths {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildPaths: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	allowedKeys := []string{}
	allowedPatterns := []string{"^x-", "^/"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Paths{}
	// repeated NamedAny vendor_extension = 1;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for k, v := range m {
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = BuildAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	// repeated NamedPathItem path = 2;
	// MAP: PathItem ^/
	x.Path = make([]*NamedPathItem, 0)
	for k, v := range m {
		if helpers.PatternMatches("^/", k) {
			pair := &NamedPathItem{}
			pair.Name = k
			pair.Value = BuildPathItem(v)
			x.Path = append(x.Path, pair)
		}
	}
	return x
}

func BuildPrimitivesItems(in interface{}) *PrimitivesItems {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildPrimitivesItems: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	allowedKeys := []string{"collectionFormat", "default", "enum", "exclusiveMaximum", "exclusiveMinimum", "format", "items", "maxItems", "maxLength", "maximum", "minItems", "minLength", "minimum", "multipleOf", "pattern", "type", "uniqueItems"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &PrimitivesItems{}
	// string type = 1;
	if helpers.MapHasKey(m, "type") {
		x.Type = m["type"].(string)
	}
	// string format = 2;
	if helpers.MapHasKey(m, "format") {
		x.Format = m["format"].(string)
	}
	// PrimitivesItems items = 3;
	if helpers.MapHasKey(m, "items") {
		x.Items = BuildPrimitivesItems(m["items"])
	}
	// string collection_format = 4;
	if helpers.MapHasKey(m, "collectionFormat") {
		x.CollectionFormat = m["collectionFormat"].(string)
	}
	// Any default = 5;
	if helpers.MapHasKey(m, "default") {
		x.Default = BuildAny(m["default"])
	}
	// float maximum = 6;
	if helpers.MapHasKey(m, "maximum") {
		x.Maximum = m["maximum"].(float64)
	}
	// bool exclusive_maximum = 7;
	if helpers.MapHasKey(m, "exclusiveMaximum") {
		x.ExclusiveMaximum = m["exclusiveMaximum"].(bool)
	}
	// float minimum = 8;
	if helpers.MapHasKey(m, "minimum") {
		x.Minimum = m["minimum"].(float64)
	}
	// bool exclusive_minimum = 9;
	if helpers.MapHasKey(m, "exclusiveMinimum") {
		x.ExclusiveMinimum = m["exclusiveMinimum"].(bool)
	}
	// int64 max_length = 10;
	if helpers.MapHasKey(m, "maxLength") {
		x.MaxLength = m["maxLength"].(int64)
	}
	// int64 min_length = 11;
	if helpers.MapHasKey(m, "minLength") {
		x.MinLength = m["minLength"].(int64)
	}
	// string pattern = 12;
	if helpers.MapHasKey(m, "pattern") {
		x.Pattern = m["pattern"].(string)
	}
	// int64 max_items = 13;
	if helpers.MapHasKey(m, "maxItems") {
		x.MaxItems = m["maxItems"].(int64)
	}
	// int64 min_items = 14;
	if helpers.MapHasKey(m, "minItems") {
		x.MinItems = m["minItems"].(int64)
	}
	// bool unique_items = 15;
	if helpers.MapHasKey(m, "uniqueItems") {
		x.UniqueItems = m["uniqueItems"].(bool)
	}
	// repeated Any enum = 16;
	if helpers.MapHasKey(m, "enum") {
		// repeated class Any
		x.Enum = make([]*Any, 0)
		a, ok := m["enum"].([]interface{})
		if ok {
			for _, item := range a {
				x.Enum = append(x.Enum, BuildAny(item))
			}
		}
	}
	// float multiple_of = 17;
	if helpers.MapHasKey(m, "multipleOf") {
		x.MultipleOf = m["multipleOf"].(float64)
	}
	// repeated NamedAny vendor_extension = 18;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for k, v := range m {
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = BuildAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func BuildProperties(in interface{}) *Properties {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildProperties: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	x := &Properties{}
	// repeated NamedSchema additional_properties = 1;
	// MAP: Schema
	x.AdditionalProperties = make([]*NamedSchema, 0)
	for k, v := range m {
		pair := &NamedSchema{}
		pair.Name = k
		pair.Value = BuildSchema(v)
		x.AdditionalProperties = append(x.AdditionalProperties, pair)
	}
	return x
}

func BuildQueryParameterSubSchema(in interface{}) *QueryParameterSubSchema {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildQueryParameterSubSchema: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	allowedKeys := []string{"allowEmptyValue", "collectionFormat", "default", "description", "enum", "exclusiveMaximum", "exclusiveMinimum", "format", "in", "items", "maxItems", "maxLength", "maximum", "minItems", "minLength", "minimum", "multipleOf", "name", "pattern", "required", "type", "uniqueItems"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &QueryParameterSubSchema{}
	// bool required = 1;
	if helpers.MapHasKey(m, "required") {
		x.Required = m["required"].(bool)
	}
	// string in = 2;
	if helpers.MapHasKey(m, "in") {
		x.In = m["in"].(string)
	}
	// string description = 3;
	if helpers.MapHasKey(m, "description") {
		x.Description = m["description"].(string)
	}
	// string name = 4;
	if helpers.MapHasKey(m, "name") {
		x.Name = m["name"].(string)
	}
	// bool allow_empty_value = 5;
	if helpers.MapHasKey(m, "allowEmptyValue") {
		x.AllowEmptyValue = m["allowEmptyValue"].(bool)
	}
	// string type = 6;
	if helpers.MapHasKey(m, "type") {
		x.Type = m["type"].(string)
	}
	// string format = 7;
	if helpers.MapHasKey(m, "format") {
		x.Format = m["format"].(string)
	}
	// PrimitivesItems items = 8;
	if helpers.MapHasKey(m, "items") {
		x.Items = BuildPrimitivesItems(m["items"])
	}
	// string collection_format = 9;
	if helpers.MapHasKey(m, "collectionFormat") {
		x.CollectionFormat = m["collectionFormat"].(string)
	}
	// Any default = 10;
	if helpers.MapHasKey(m, "default") {
		x.Default = BuildAny(m["default"])
	}
	// float maximum = 11;
	if helpers.MapHasKey(m, "maximum") {
		x.Maximum = m["maximum"].(float64)
	}
	// bool exclusive_maximum = 12;
	if helpers.MapHasKey(m, "exclusiveMaximum") {
		x.ExclusiveMaximum = m["exclusiveMaximum"].(bool)
	}
	// float minimum = 13;
	if helpers.MapHasKey(m, "minimum") {
		x.Minimum = m["minimum"].(float64)
	}
	// bool exclusive_minimum = 14;
	if helpers.MapHasKey(m, "exclusiveMinimum") {
		x.ExclusiveMinimum = m["exclusiveMinimum"].(bool)
	}
	// int64 max_length = 15;
	if helpers.MapHasKey(m, "maxLength") {
		x.MaxLength = m["maxLength"].(int64)
	}
	// int64 min_length = 16;
	if helpers.MapHasKey(m, "minLength") {
		x.MinLength = m["minLength"].(int64)
	}
	// string pattern = 17;
	if helpers.MapHasKey(m, "pattern") {
		x.Pattern = m["pattern"].(string)
	}
	// int64 max_items = 18;
	if helpers.MapHasKey(m, "maxItems") {
		x.MaxItems = m["maxItems"].(int64)
	}
	// int64 min_items = 19;
	if helpers.MapHasKey(m, "minItems") {
		x.MinItems = m["minItems"].(int64)
	}
	// bool unique_items = 20;
	if helpers.MapHasKey(m, "uniqueItems") {
		x.UniqueItems = m["uniqueItems"].(bool)
	}
	// repeated Any enum = 21;
	if helpers.MapHasKey(m, "enum") {
		// repeated class Any
		x.Enum = make([]*Any, 0)
		a, ok := m["enum"].([]interface{})
		if ok {
			for _, item := range a {
				x.Enum = append(x.Enum, BuildAny(item))
			}
		}
	}
	// float multiple_of = 22;
	if helpers.MapHasKey(m, "multipleOf") {
		x.MultipleOf = m["multipleOf"].(float64)
	}
	// repeated NamedAny vendor_extension = 23;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for k, v := range m {
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = BuildAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func BuildResponse(in interface{}) *Response {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildResponse: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	requiredKeys := []string{"description"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"description", "examples", "headers", "schema"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Response{}
	// string description = 1;
	if helpers.MapHasKey(m, "description") {
		x.Description = m["description"].(string)
	}
	// SchemaItem schema = 2;
	if helpers.MapHasKey(m, "schema") {
		x.Schema = BuildSchemaItem(m["schema"])
	}
	// Headers headers = 3;
	if helpers.MapHasKey(m, "headers") {
		x.Headers = BuildHeaders(m["headers"])
	}
	// Examples examples = 4;
	if helpers.MapHasKey(m, "examples") {
		x.Examples = BuildExamples(m["examples"])
	}
	// repeated NamedAny vendor_extension = 5;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for k, v := range m {
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = BuildAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func BuildResponseDefinitions(in interface{}) *ResponseDefinitions {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildResponseDefinitions: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	x := &ResponseDefinitions{}
	// repeated NamedResponse additional_properties = 1;
	// MAP: Response
	x.AdditionalProperties = make([]*NamedResponse, 0)
	for k, v := range m {
		pair := &NamedResponse{}
		pair.Name = k
		pair.Value = BuildResponse(v)
		x.AdditionalProperties = append(x.AdditionalProperties, pair)
	}
	return x
}

func BuildResponseValue(in interface{}) *ResponseValue {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildResponseValue: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	x := &ResponseValue{}
	// Response response = 1;
	{
		t := BuildResponse(m)
		if t != nil {
			x.Oneof = &ResponseValue_Response{Response: t}
		}
	}
	// JsonReference json_reference = 2;
	{
		t := BuildJsonReference(m)
		if t != nil {
			x.Oneof = &ResponseValue_JsonReference{JsonReference: t}
		}
	}
	return x
}

func BuildResponses(in interface{}) *Responses {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildResponses: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	allowedKeys := []string{}
	allowedPatterns := []string{"^([0-9]{3})$|^(default)$", "^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Responses{}
	// repeated NamedResponseValue response_code = 1;
	// MAP: ResponseValue ^([0-9]{3})$|^(default)$
	x.ResponseCode = make([]*NamedResponseValue, 0)
	for k, v := range m {
		if helpers.PatternMatches("^([0-9]{3})$|^(default)$", k) {
			pair := &NamedResponseValue{}
			pair.Name = k
			pair.Value = BuildResponseValue(v)
			x.ResponseCode = append(x.ResponseCode, pair)
		}
	}
	// repeated NamedAny vendor_extension = 2;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for k, v := range m {
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = BuildAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func BuildSchema(in interface{}) *Schema {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildSchema: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	allowedKeys := []string{"$ref", "additionalProperties", "allOf", "default", "description", "discriminator", "enum", "example", "exclusiveMaximum", "exclusiveMinimum", "externalDocs", "format", "items", "maxItems", "maxLength", "maxProperties", "maximum", "minItems", "minLength", "minProperties", "minimum", "multipleOf", "pattern", "properties", "readOnly", "required", "title", "type", "uniqueItems", "xml"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Schema{}
	// string _ref = 1;
	if helpers.MapHasKey(m, "$ref") {
		x.XRef = m["$ref"].(string)
	}
	// string format = 2;
	if helpers.MapHasKey(m, "format") {
		x.Format = m["format"].(string)
	}
	// string title = 3;
	if helpers.MapHasKey(m, "title") {
		x.Title = m["title"].(string)
	}
	// string description = 4;
	if helpers.MapHasKey(m, "description") {
		x.Description = m["description"].(string)
	}
	// Any default = 5;
	if helpers.MapHasKey(m, "default") {
		x.Default = BuildAny(m["default"])
	}
	// float multiple_of = 6;
	if helpers.MapHasKey(m, "multipleOf") {
		x.MultipleOf = m["multipleOf"].(float64)
	}
	// float maximum = 7;
	if helpers.MapHasKey(m, "maximum") {
		x.Maximum = m["maximum"].(float64)
	}
	// bool exclusive_maximum = 8;
	if helpers.MapHasKey(m, "exclusiveMaximum") {
		x.ExclusiveMaximum = m["exclusiveMaximum"].(bool)
	}
	// float minimum = 9;
	if helpers.MapHasKey(m, "minimum") {
		x.Minimum = m["minimum"].(float64)
	}
	// bool exclusive_minimum = 10;
	if helpers.MapHasKey(m, "exclusiveMinimum") {
		x.ExclusiveMinimum = m["exclusiveMinimum"].(bool)
	}
	// int64 max_length = 11;
	if helpers.MapHasKey(m, "maxLength") {
		x.MaxLength = m["maxLength"].(int64)
	}
	// int64 min_length = 12;
	if helpers.MapHasKey(m, "minLength") {
		x.MinLength = m["minLength"].(int64)
	}
	// string pattern = 13;
	if helpers.MapHasKey(m, "pattern") {
		x.Pattern = m["pattern"].(string)
	}
	// int64 max_items = 14;
	if helpers.MapHasKey(m, "maxItems") {
		x.MaxItems = m["maxItems"].(int64)
	}
	// int64 min_items = 15;
	if helpers.MapHasKey(m, "minItems") {
		x.MinItems = m["minItems"].(int64)
	}
	// bool unique_items = 16;
	if helpers.MapHasKey(m, "uniqueItems") {
		x.UniqueItems = m["uniqueItems"].(bool)
	}
	// int64 max_properties = 17;
	if helpers.MapHasKey(m, "maxProperties") {
		x.MaxProperties = m["maxProperties"].(int64)
	}
	// int64 min_properties = 18;
	if helpers.MapHasKey(m, "minProperties") {
		x.MinProperties = m["minProperties"].(int64)
	}
	// repeated string required = 19;
	if helpers.MapHasKey(m, "required") {
		v, ok := m["required"].([]interface{})
		if ok {
			x.Required = helpers.ConvertInterfaceArrayToStringArray(v)
		} else {
			log.Printf("unexpected: %+v", m["required"])
		}
	}
	// repeated Any enum = 20;
	if helpers.MapHasKey(m, "enum") {
		// repeated class Any
		x.Enum = make([]*Any, 0)
		a, ok := m["enum"].([]interface{})
		if ok {
			for _, item := range a {
				x.Enum = append(x.Enum, BuildAny(item))
			}
		}
	}
	// AdditionalPropertiesItem additional_properties = 21;
	if helpers.MapHasKey(m, "additionalProperties") {
		x.AdditionalProperties = BuildAdditionalPropertiesItem(m["additionalProperties"])
	}
	// TypeItem type = 22;
	if helpers.MapHasKey(m, "type") {
		x.Type = BuildTypeItem(m["type"])
	}
	// ItemsItem items = 23;
	if helpers.MapHasKey(m, "items") {
		x.Items = BuildItemsItem(m["items"])
	}
	// repeated Schema all_of = 24;
	if helpers.MapHasKey(m, "allOf") {
		// repeated class Schema
		x.AllOf = make([]*Schema, 0)
		a, ok := m["allOf"].([]interface{})
		if ok {
			for _, item := range a {
				x.AllOf = append(x.AllOf, BuildSchema(item))
			}
		}
	}
	// Properties properties = 25;
	if helpers.MapHasKey(m, "properties") {
		x.Properties = BuildProperties(m["properties"])
	}
	// string discriminator = 26;
	if helpers.MapHasKey(m, "discriminator") {
		x.Discriminator = m["discriminator"].(string)
	}
	// bool read_only = 27;
	if helpers.MapHasKey(m, "readOnly") {
		x.ReadOnly = m["readOnly"].(bool)
	}
	// Xml xml = 28;
	if helpers.MapHasKey(m, "xml") {
		x.Xml = BuildXml(m["xml"])
	}
	// ExternalDocs external_docs = 29;
	if helpers.MapHasKey(m, "externalDocs") {
		x.ExternalDocs = BuildExternalDocs(m["externalDocs"])
	}
	// Any example = 30;
	if helpers.MapHasKey(m, "example") {
		x.Example = BuildAny(m["example"])
	}
	// repeated NamedAny vendor_extension = 31;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for k, v := range m {
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = BuildAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func BuildSchemaItem(in interface{}) *SchemaItem {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildSchemaItem: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	x := &SchemaItem{}
	// Schema schema = 1;
	{
		t := BuildSchema(m)
		if t != nil {
			x.Oneof = &SchemaItem_Schema{Schema: t}
		}
	}
	// FileSchema file_schema = 2;
	{
		t := BuildFileSchema(m)
		if t != nil {
			x.Oneof = &SchemaItem_FileSchema{FileSchema: t}
		}
	}
	return x
}

func BuildSecurityDefinitions(in interface{}) *SecurityDefinitions {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildSecurityDefinitions: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	x := &SecurityDefinitions{}
	// repeated NamedSecurityDefinitionsItem additional_properties = 1;
	// MAP: SecurityDefinitionsItem
	x.AdditionalProperties = make([]*NamedSecurityDefinitionsItem, 0)
	for k, v := range m {
		pair := &NamedSecurityDefinitionsItem{}
		pair.Name = k
		pair.Value = BuildSecurityDefinitionsItem(v)
		x.AdditionalProperties = append(x.AdditionalProperties, pair)
	}
	return x
}

func BuildSecurityDefinitionsItem(in interface{}) *SecurityDefinitionsItem {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildSecurityDefinitionsItem: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	x := &SecurityDefinitionsItem{}
	// BasicAuthenticationSecurity basic_authentication_security = 1;
	{
		t := BuildBasicAuthenticationSecurity(m)
		if t != nil {
			x.Oneof = &SecurityDefinitionsItem_BasicAuthenticationSecurity{BasicAuthenticationSecurity: t}
		}
	}
	// ApiKeySecurity api_key_security = 2;
	{
		t := BuildApiKeySecurity(m)
		if t != nil {
			x.Oneof = &SecurityDefinitionsItem_ApiKeySecurity{ApiKeySecurity: t}
		}
	}
	// Oauth2ImplicitSecurity oauth2_implicit_security = 3;
	{
		t := BuildOauth2ImplicitSecurity(m)
		if t != nil {
			x.Oneof = &SecurityDefinitionsItem_Oauth2ImplicitSecurity{Oauth2ImplicitSecurity: t}
		}
	}
	// Oauth2PasswordSecurity oauth2_password_security = 4;
	{
		t := BuildOauth2PasswordSecurity(m)
		if t != nil {
			x.Oneof = &SecurityDefinitionsItem_Oauth2PasswordSecurity{Oauth2PasswordSecurity: t}
		}
	}
	// Oauth2ApplicationSecurity oauth2_application_security = 5;
	{
		t := BuildOauth2ApplicationSecurity(m)
		if t != nil {
			x.Oneof = &SecurityDefinitionsItem_Oauth2ApplicationSecurity{Oauth2ApplicationSecurity: t}
		}
	}
	// Oauth2AccessCodeSecurity oauth2_access_code_security = 6;
	{
		t := BuildOauth2AccessCodeSecurity(m)
		if t != nil {
			x.Oneof = &SecurityDefinitionsItem_Oauth2AccessCodeSecurity{Oauth2AccessCodeSecurity: t}
		}
	}
	return x
}

func BuildSecurityRequirement(in interface{}) *SecurityRequirement {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildSecurityRequirement: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	x := &SecurityRequirement{}
	// repeated NamedStringArray additional_properties = 1;
	// MAP: StringArray
	x.AdditionalProperties = make([]*NamedStringArray, 0)
	for k, v := range m {
		pair := &NamedStringArray{}
		pair.Name = k
		pair.Value = BuildStringArray(v)
		x.AdditionalProperties = append(x.AdditionalProperties, pair)
	}
	return x
}

func BuildStringArray(in interface{}) *StringArray {
	a, ok := in.([]interface{})
	if ok {
		x := &StringArray{}
		x.Value = make([]string, 0)
		for _, s := range a {
			x.Value = append(x.Value, s.(string))
		}
		return x
	} else {
		return nil
	}
}

func BuildTag(in interface{}) *Tag {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildTag: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	requiredKeys := []string{"name"}
	if !helpers.MapContainsAllKeys(m, requiredKeys) {
		return nil
	}
	allowedKeys := []string{"description", "externalDocs", "name"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Tag{}
	// string name = 1;
	if helpers.MapHasKey(m, "name") {
		x.Name = m["name"].(string)
	}
	// string description = 2;
	if helpers.MapHasKey(m, "description") {
		x.Description = m["description"].(string)
	}
	// ExternalDocs external_docs = 3;
	if helpers.MapHasKey(m, "externalDocs") {
		x.ExternalDocs = BuildExternalDocs(m["externalDocs"])
	}
	// repeated NamedAny vendor_extension = 4;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for k, v := range m {
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = BuildAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}

func BuildTypeItem(in interface{}) *TypeItem {
	value, ok := in.(string)
	x := &TypeItem{}
	if ok {
		x.Value = make([]string, 0)
		x.Value = append(x.Value, value)
	} else {
		log.Printf("unexpected: %!v(MISSING)", in)
	}
	return x
}

func BuildVendorExtension(in interface{}) *VendorExtension {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildVendorExtension: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	x := &VendorExtension{}
	// repeated NamedAny additional_properties = 1;
	// MAP: Any
	x.AdditionalProperties = make([]*NamedAny, 0)
	for k, v := range m {
		pair := &NamedAny{}
		pair.Name = k
		pair.Value = BuildAny(v)
		x.AdditionalProperties = append(x.AdditionalProperties, pair)
	}
	return x
}

func BuildXml(in interface{}) *Xml {
	m, keys, ok := helpers.UnpackMap(in)
	if !ok {
		log.Printf("unexpected argument to BuildXml: %+v", in)
		log.Printf("%d\n", len(m))
		log.Printf("%+v\n", keys)
		return nil
	}
	allowedKeys := []string{"attribute", "name", "namespace", "prefix", "wrapped"}
	allowedPatterns := []string{"^x-"}
	if !helpers.MapContainsOnlyKeysAndPatterns(m, allowedKeys, allowedPatterns) {
		return nil
	}
	x := &Xml{}
	// string name = 1;
	if helpers.MapHasKey(m, "name") {
		x.Name = m["name"].(string)
	}
	// string namespace = 2;
	if helpers.MapHasKey(m, "namespace") {
		x.Namespace = m["namespace"].(string)
	}
	// string prefix = 3;
	if helpers.MapHasKey(m, "prefix") {
		x.Prefix = m["prefix"].(string)
	}
	// bool attribute = 4;
	if helpers.MapHasKey(m, "attribute") {
		x.Attribute = m["attribute"].(bool)
	}
	// bool wrapped = 5;
	if helpers.MapHasKey(m, "wrapped") {
		x.Wrapped = m["wrapped"].(bool)
	}
	// repeated NamedAny vendor_extension = 6;
	// MAP: Any ^x-
	x.VendorExtension = make([]*NamedAny, 0)
	for k, v := range m {
		if helpers.PatternMatches("^x-", k) {
			pair := &NamedAny{}
			pair.Name = k
			pair.Value = BuildAny(v)
			x.VendorExtension = append(x.VendorExtension, pair)
		}
	}
	return x
}
