// Copyright 2017 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import Dispatch

// fetch makes a synchronous request using URLSessionDataTask
public func fetch(_ urlRequest: URLRequest) -> (Data?, HTTPURLResponse?, Swift.Error?) {
  let sem = DispatchSemaphore(value: 0)
  var responseData: Data?
  var urlResponse: HTTPURLResponse?
  var responseError: Swift.Error? = nil // make this mutable when we start using it
  fetch(urlRequest) {(data, response, error) in
    responseData = data
    urlResponse = response
    responseError = error
    sem.signal()
  }
  // now wait on the semaphore for a response
  let result = sem.wait(timeout: DispatchTime.distantFuture)
  switch result {
  case .success:
    return (responseData, urlResponse, responseError)
  default: // includes .timeout
    return (responseData, urlResponse, responseError)
  }
}

// fetch makes an asynchronous request using URLSessionDataTask
public func fetch(_ urlRequest: URLRequest, callback:@escaping (Data?, HTTPURLResponse?, Swift.Error?) -> ()) {
  let session = URLSession(configuration: URLSessionConfiguration.default)
  let task: URLSessionDataTask = session.dataTask(with: urlRequest) { (data, response, error) -> Void in
    callback(data, response as? HTTPURLResponse, error)
  }
  task.resume()
}