// GENERATED: DO NOT EDIT
//
// This file contains base64 encodings of templates used for Swift OpenAPI code generation.
//
func loadTemplates() -> [String:String] {
  return [
    "client.swift": "Ly8gQ2xpZW50IGNvZGUgCgppbXBvcnQgRm91bmRhdGlvbgppbXBvcnQgRGlzcGF0Y2gKaW1wb3J0IEtpdHVyYU5ldAoKZW51bSBDbGllbnRFcnJvcjogU3dpZnQuRXJyb3IgewogIGNhc2UgZXJyb3JXaXRoQ29kZShJbnQpCn0KCnB1YmxpYyBjbGFzcyBDbGllbnQgewogIHZhciBzZXJ2aWNlIDogU3RyaW5nCiAgCiAgcHVibGljIGluaXQoc2VydmljZTogU3RyaW5nKSB7CiAgICBzZWxmLnNlcnZpY2UgPSBzZXJ2aWNlCiAgfSAKLy8teyUgZm9yIHNlcnZpY2VNZXRob2QgaW4gcmVuZGVyZXIubWV0aG9kcyAlfQoKICAvLyB7eyBzZXJ2aWNlTWV0aG9kLmRlc2NyaXB0aW9uIH19CiAgcHVibGljIGZ1bmMge3sgc2VydmljZU1ldGhvZC5uYW1lIH19KHt7IC58Y2xpZW50UGFyYW1ldGVyc0RlY2xhcmF0aW9uOnNlcnZpY2VNZXRob2QgfX0pIHRocm93cyB7eyAufGNsaWVudFJldHVybkRlY2xhcmF0aW9uOnNlcnZpY2VNZXRob2QgfX0gewogICAgICB2YXIgcGF0aCA9IHNlbGYuc2VydmljZSAKICAgICAgcGF0aCA9IHBhdGggKyAie3sgc2VydmljZU1ldGhvZC5wYXRoIH19IgogICAgICAvLy17JSBmb3Igc2VydmljZVR5cGVGaWVsZCBpbiBzZXJ2aWNlTWV0aG9kfHBhcmFtZXRlcnNUeXBlRmllbGRzICV9CiAgICAgIC8vLXslIGlmIHNlcnZpY2VUeXBlRmllbGQucG9zaXRpb24gPT0gInBhdGgiICV9CiAgICAgIHBhdGggPSBwYXRoLnJlcGxhY2luZ09jY3VycmVuY2VzKG9mOiJ7Iisie3sgc2VydmljZVR5cGVGaWVsZC5uYW1lIH19IisifSIsIHdpdGg6Ilwoe3sgc2VydmljZVR5cGVGaWVsZC5uYW1lIH19KSIpCiAgICAgIC8vLXslIGVuZGlmICV9CiAgICAgIC8vLXslIGVuZGZvciAlfQogICAgICBndWFyZCBsZXQgdXJsID0gVVJMKHN0cmluZzpwYXRoKSBlbHNlIHsKICAgICAgICB0aHJvdyBDbGllbnRFcnJvci5lcnJvcldpdGhDb2RlKDApCiAgICAgIH0KICAgICAgdmFyIHJlcXVlc3QgPSBVUkxSZXF1ZXN0KHVybDp1cmwpCiAgICAgIHJlcXVlc3QuaHR0cE1ldGhvZCA9ICJ7eyBzZXJ2aWNlTWV0aG9kLm1ldGhvZCB9fSIKICAgICAgLy8teyUgZm9yIHNlcnZpY2VUeXBlRmllbGQgaW4gc2VydmljZU1ldGhvZHxwYXJhbWV0ZXJzVHlwZUZpZWxkcyAlfQogICAgICAvLy17JSBpZiBzZXJ2aWNlVHlwZUZpZWxkLnBvc2l0aW9uID09ICJib2R5IiAlfQogICAgICBsZXQganNvbk9iamVjdCA9IHt7IHNlcnZpY2VUeXBlRmllbGQubmFtZSB9fS5qc29uT2JqZWN0KCkKICAgICAgcmVxdWVzdC5odHRwQm9keSA9IHRyeSBKU09OU2VyaWFsaXphdGlvbi5kYXRhKHdpdGhKU09OT2JqZWN0Ompzb25PYmplY3QpCiAgICAgIC8vLXslIGVuZGlmICV9CiAgICAgIC8vLXslIGVuZGZvciAlfQogICAgICAvLy17JSBpZiBzZXJ2aWNlTWV0aG9kfGhhc1Jlc3BvbnNlcyAlfSAgICAgICAgICAKICAgICAgbGV0IChkYXRhLCByZXNwb25zZSwgZXJyb3IpID0gZmV0Y2gocmVxdWVzdCkKICAgICAgLy8teyUgZWxzZSAlfQogICAgICBsZXQgKF8sIHJlc3BvbnNlLCBlcnJvcikgPSBmZXRjaChyZXF1ZXN0KQogICAgICAvLy17JSBlbmRpZiAlfQogICAgICBpZiBlcnJvciAhPSBuaWwgewogICAgICAgIHRocm93IENsaWVudEVycm9yLmVycm9yV2l0aENvZGUoMCkKICAgICAgfQogICAgICBndWFyZCBsZXQgaHR0cFJlc3BvbnNlID0gcmVzcG9uc2UgZWxzZSB7CiAgICAgICAgdGhyb3cgQ2xpZW50RXJyb3IuZXJyb3JXaXRoQ29kZSgwKQogICAgICB9CiAgICAgIGlmIGh0dHBSZXNwb25zZS5zdGF0dXNDb2RlID09IDIwMCB7CiAgICAgICAgLy8teyUgaWYgc2VydmljZU1ldGhvZHxoYXNSZXNwb25zZXMgJX0gICAgCiAgICAgICAgaWYgbGV0IGRhdGEgPSBkYXRhIHsKICAgICAgICAgIGxldCBqc29uT2JqZWN0ID0gdHJ5IEpTT05TZXJpYWxpemF0aW9uLmpzb25PYmplY3Qod2l0aDpkYXRhKQogICAgICAgICAgaWYgbGV0IHZhbHVlID0ge3sgc2VydmljZU1ldGhvZC5yZXN1bHRUeXBlTmFtZSB9fShqc29uT2JqZWN0Ompzb25PYmplY3QpIHsgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiB2YWx1ZQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4ge3sgc2VydmljZU1ldGhvZC5yZXN1bHRUeXBlTmFtZSB9fSgpCiAgICAgICAgLy8teyUgZW5kaWYgJX0KICAgICAgfSBlbHNlIHsKICAgICAgICB0aHJvdyBDbGllbnRFcnJvci5lcnJvcldpdGhDb2RlKGh0dHBSZXNwb25zZS5zdGF0dXNDb2RlKQogICAgICB9CiAgfQovLy17JSBlbmRmb3IgJX0KfQoKLy8gZmV0Y2ggbWFrZXMgYSBzeW5jaHJvbm91cyByZXF1ZXN0IHVzaW5nIEtpdHVyYU5ldCdzIENsaWVudFJlcXVlc3QgY2xhc3MKLy8gaHR0cHM6Ly9naXRodWIuY29tL0lCTS1Td2lmdC9LaXR1cmEtbmV0L2Jsb2IvbWFzdGVyL1NvdXJjZXMvS2l0dXJhTmV0L0NsaWVudFJlcXVlc3Quc3dpZnQKcHVibGljIGZ1bmMgZmV0Y2goXyB1cmxSZXF1ZXN0OiBVUkxSZXF1ZXN0KSAtPiAoRGF0YT8sIEhUVFBVUkxSZXNwb25zZT8sIEVycm9yPykgewogIHZhciBkYXRhOiBEYXRhPwogIHZhciB1cmxSZXNwb25zZTogSFRUUFVSTFJlc3BvbnNlPwogIGxldCBlcnJvcjogRXJyb3I/ID0gbmlsIC8vIG1ha2UgdGhpcyBtdXRhYmxlIHdoZW4gd2Ugc3RhcnQgdXNpbmcgaXQKICBsZXQgc2VtID0gRGlzcGF0Y2hTZW1hcGhvcmUodmFsdWU6IDApCiAgZ3VhcmQgbGV0IG1ldGhvZCA9IHVybFJlcXVlc3QuaHR0cE1ldGhvZCBlbHNlIHsKICAgIHJldHVybiAoZGF0YSwgdXJsUmVzcG9uc2UsIGVycm9yKQogIH0KICBndWFyZCBsZXQgdXJsID0gdXJsUmVxdWVzdC51cmwgZWxzZSB7CiAgICByZXR1cm4gKGRhdGEsIHVybFJlc3BvbnNlLCBlcnJvcikKICB9CiAgZ3VhcmQgbGV0IHNjaGVtZSA9IHVybC5zY2hlbWUgZWxzZSB7CiAgICByZXR1cm4gKGRhdGEsIHVybFJlc3BvbnNlLCBlcnJvcikKICB9CiAgZ3VhcmQgbGV0IGhvc3QgPSB1cmwuaG9zdCBlbHNlIHsKICAgIHJldHVybiAoZGF0YSwgdXJsUmVzcG9uc2UsIGVycm9yKQogIH0KICBndWFyZCBsZXQgcG9ydCA9IHVybC5wb3J0IGVsc2UgewogICAgcmV0dXJuIChkYXRhLCB1cmxSZXNwb25zZSwgZXJyb3IpCiAgfQogIGxldCBvcHRpb25zIDogW0NsaWVudFJlcXVlc3QuT3B0aW9uc10gPSBbCiAgICAubWV0aG9kKG1ldGhvZCksCiAgICAuc2NoZW1hKHNjaGVtZSksCiAgICAuaG9zdG5hbWUoaG9zdCksCiAgICAucG9ydChJbnQxNihwb3J0KSksCiAgICAucGF0aCh1cmwucGF0aCksCiAgICAvLyBoZWFkZXJzLCBldGMKICBdCiAgbGV0IHJlcXVlc3QgPSBIVFRQLnJlcXVlc3Qob3B0aW9ucykgeyAocmVzcG9uc2UpIGluCiAgICBndWFyZCBsZXQgcmVzcG9uc2UgPSByZXNwb25zZSBlbHNlIHsKICAgICAgc2VtLnNpZ25hbCgpCiAgICAgIHJldHVybgogICAgfQogICAgdmFyIHJlc3BvbnNlRGF0YSA9IERhdGEoKQogICAgZG8gewogICAgICBsZXQgY29kZSA9IHJlc3BvbnNlLmh0dHBTdGF0dXNDb2RlCiAgICAgIHRyeSByZXNwb25zZS5yZWFkQWxsRGF0YShpbnRvOiAmcmVzcG9uc2VEYXRhKQogICAgICBkYXRhID0gcmVzcG9uc2VEYXRhCiAgICAgIHVybFJlc3BvbnNlID0gSFRUUFVSTFJlc3BvbnNlKHVybDp1cmwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c0NvZGU6Y29kZS5yYXdWYWx1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHR0cFZlcnNpb246IkhUVFAvMS4xIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyRmllbGRzOls6XSkKICAgICAgc2VtLnNpZ25hbCgpCiAgICAgIHJldHVybgogICAgfSBjYXRjaCB7CiAgICAgIHNlbS5zaWduYWwoKQogICAgICByZXR1cm4KICAgIH0KICB9CiAgaWYgbGV0IHJlcXVlc3REYXRhID0gdXJsUmVxdWVzdC5odHRwQm9keSB7CiAgICByZXF1ZXN0LndyaXRlKGZyb206cmVxdWVzdERhdGEpCiAgfQogIHJlcXVlc3QuZW5kKCkgLy8gc2VuZCB0aGUgcmVxdWVzdAogIC8vIG5vdyB3YWl0IG9uIHRoZSBzZW1hcGhvcmUgZm9yIGEgcmVzcG9uc2UKICBsZXQgcmVzdWx0ID0gc2VtLndhaXQodGltZW91dDogRGlzcGF0Y2hUaW1lLmRpc3RhbnRGdXR1cmUpCiAgc3dpdGNoIHJlc3VsdCB7CiAgY2FzZSAuc3VjY2VzczoKICAgIHJldHVybiAoZGF0YSwgdXJsUmVzcG9uc2UsIGVycm9yKQogIGRlZmF1bHQ6IC8vIGluY2x1ZGVzIC50aW1lb3V0CiAgICByZXR1cm4gKGRhdGEsIHVybFJlc3BvbnNlLCBlcnJvcikKICB9Cn0K",
    "service.swift": "Ly8gU2VydmljZSBjb2RlCgppbXBvcnQgS2l0dXJhCmltcG9ydCBLaXR1cmFOZXQKaW1wb3J0IEZvdW5kYXRpb24KCi8vIEEgc2VydmVyIHJlcXVpcmVzIGFuIGluc3RhbmNlIG9mIGFuIGltcGxlbWVudGF0aW9uIG9mIHRoaXMgcHJvdG9jb2wuCnB1YmxpYyBwcm90b2NvbCBTZXJ2aWNlIHsKLy8teyUgZm9yIHNlcnZpY2VNZXRob2QgaW4gcmVuZGVyZXIubWV0aG9kcyAlfQogIC8vIHt7IHNlcnZpY2VNZXRob2QuZGVzY3JpcHRpb24gfX0KICBmdW5jIHt7IHNlcnZpY2VNZXRob2QubmFtZSB9fSAoe3sgLnxwcm90b2NvbFBhcmFtZXRlcnNEZWNsYXJhdGlvbjpzZXJ2aWNlTWV0aG9kIH19KSB0aHJvd3Mge3sgLnxwcm90b2NvbFJldHVybkRlY2xhcmF0aW9uOnNlcnZpY2VNZXRob2QgIH19Ci8vLXslIGVuZGZvciAlfQp9CgpmdW5jIGludFZhbHVlKF8gczpTdHJpbmc/KSAtPiBJbnQ2NCB7CiAgZ3VhcmQgbGV0IHMgPSBzIGVsc2UgewogICAgcmV0dXJuIDAKICB9CiAgZ3VhcmQgbGV0IHZhbHVlID0gSW50NjQocykgZWxzZSB7CiAgICByZXR1cm4gMAogIH0KICByZXR1cm4gdmFsdWUKfQoKcHVibGljIGZ1bmMgc2VydmVyKHNlcnZpY2UgOiBTZXJ2aWNlKSAtPiBSb3V0ZXIgewogIC8vIENyZWF0ZSBhIG5ldyByb3V0ZXIKICBsZXQgcm91dGVyID0gUm91dGVyKCkKCi8vLXslIGZvciBzZXJ2aWNlTWV0aG9kIGluIHJlbmRlcmVyLm1ldGhvZHMgJX0KICAvLyB7eyBzZXJ2aWNlTWV0aG9kLmRlc2NyaXB0aW9uIH19CiAgcm91dGVyLnt7IHNlcnZpY2VNZXRob2QubWV0aG9kfGxvd2VyY2FzZSB9fSgie3sgc2VydmljZU1ldGhvZHxraXR1cmFQYXRoIH19IikgeyByZXEsIHJlcywgbmV4dCBpbiAgICAgIAogICAgICAvLy17JSBpZiBzZXJ2aWNlTWV0aG9kfGhhc1BhcmFtZXRlcnMgJX0KICAgICAgLy8gaW5zdGFudGlhdGUgdGhlIHBhcmFtZXRlcnMgc3RydWN0dXJlCiAgICAgIGxldCBwYXJhbWV0ZXJzID0ge3sgc2VydmljZU1ldGhvZC5wYXJhbWV0ZXJzVHlwZU5hbWUgfX0oKQogICAgICAvLy17JSBmb3Igc2VydmljZVR5cGVGaWVsZCBpbiBzZXJ2aWNlTWV0aG9kfHBhcmFtZXRlcnNUeXBlRmllbGRzICV9CiAgICAgIC8vLXslIGlmIHNlcnZpY2VUeXBlRmllbGQucG9zaXRpb24gPT0gInBhdGgiICV9CiAgICAgIHBhcmFtZXRlcnMue3sgc2VydmljZVR5cGVGaWVsZC5uYW1lIH19ID0gaW50VmFsdWUocmVxLnBhcmFtZXRlcnNbInt7IHNlcnZpY2VUeXBlRmllbGQubmFtZSB9fSJdKQogICAgICAvLy17JSBlbmRpZiAlfQogICAgICAvLy17JSBlbmRmb3IgJX0gICAgIAogICAgICAvLy17JSBpZiBzZXJ2aWNlTWV0aG9kLm1ldGhvZCA9PSAiUE9TVCIgJX0KICAgICAgLy8gZGVzZXJpYWxpemUgcmVxdWVzdCBmcm9tIHBvc3QgZGF0YQogICAgICBsZXQgYm9keVN0cmluZyA9IHRyeSByZXEucmVhZFN0cmluZygpID8/ICIiCiAgICAgIGd1YXJkIGxldCBib2R5RGF0YSA9IGJvZHlTdHJpbmcuZGF0YSh1c2luZzoudXRmOCkgZWxzZSB7CiAgICAgICAgdHJ5IHJlcy5zZW5kKHN0YXR1czouYmFkUmVxdWVzdCkuZW5kKCkKICAgICAgICByZXR1cm4KICAgICAgfQogICAgICB2YXIganNvbk9iamVjdCA6IEFueT8gPSBuaWwKICAgICAgZG8gewogICAgICAgIGpzb25PYmplY3QgPSB0cnkgSlNPTlNlcmlhbGl6YXRpb24uanNvbk9iamVjdCh3aXRoOmJvZHlEYXRhKQogICAgICB9IGNhdGNoIHsKICAgICAgICB0cnkgcmVzLnNlbmQoc3RhdHVzOi5iYWRSZXF1ZXN0KS5lbmQoKQogICAgICAgIHJldHVybgogICAgICB9CiAgICAgIGd1YXJkIGxldCBib2R5T2JqZWN0ID0ge3sgc2VydmljZU1ldGhvZC5yZXN1bHRUeXBlTmFtZSB9fShqc29uT2JqZWN0Ompzb25PYmplY3QpIGVsc2UgewogICAgICAgIHRyeSByZXMuc2VuZChzdGF0dXM6LmJhZFJlcXVlc3QpLmVuZCgpCiAgICAgICAgcmV0dXJuCiAgICAgIH0KICAgICAgcGFyYW1ldGVycy57eyBzZXJ2aWNlTWV0aG9kfGJvZHlQYXJhbWV0ZXJGaWVsZE5hbWUgfX0gPSBib2R5T2JqZWN0CiAgICAgIC8vLXslIGVuZGlmICV9CiAgICAgIC8vLXslIGVuZGlmICV9CiAgICAgIC8vLXslIGlmIHNlcnZpY2VNZXRob2R8aGFzUGFyYW1ldGVycyAlfQogICAgICAvLy17JSBpZiBzZXJ2aWNlTWV0aG9kfGhhc1Jlc3BvbnNlcyAlfQogICAgICBsZXQgcmVzcG9uc2VzID0gdHJ5IHNlcnZpY2Uue3sgc2VydmljZU1ldGhvZC5uYW1lIH19KHBhcmFtZXRlcnMpCiAgICAgIC8vLXslIGVsc2UgJX0KICAgICAgdHJ5IHNlcnZpY2Uue3sgc2VydmljZU1ldGhvZC5uYW1lIH19KHBhcmFtZXRlcnMpCiAgICAgIC8vLXslIGVuZGlmICV9CiAgICAgIC8vLXslIGVsc2UgJX0KICAgICAgLy8teyUgaWYgc2VydmljZU1ldGhvZHxoYXNSZXNwb25zZXMgJX0KICAgICAgbGV0IHJlc3BvbnNlcyA9IHRyeSBzZXJ2aWNlLnt7IHNlcnZpY2VNZXRob2QubmFtZSB9fSgpCiAgICAgIC8vLXslIGVsc2UgJX0KICAgICAgdHJ5IHNlcnZpY2Uue3sgc2VydmljZU1ldGhvZC5uYW1lIH19KCkKICAgICAgLy8teyUgZW5kaWYgJX0KICAgICAgLy8teyUgZW5kaWYgJX0KICAgICAgLy8teyUgaWYgc2VydmljZU1ldGhvZHxoYXNSZXNwb25zZXMgJX0KICAgICAgICAvLy17JSBpZiBzZXJ2aWNlTWV0aG9kfHJlc3BvbnNlc0hhc0ZpZWxkTmFtZWRPSyAlfSAgICAgICAgICAgIAogICAgICAgIGlmIGxldCBvayA9IHJlc3BvbnNlcy5vayB7CiAgICAgICAgICBsZXQganNvbk9iamVjdCA9IG9rLmpzb25PYmplY3QoKQogICAgICAgICAgbGV0IHJlc3BvbnNlRGF0YSA9IHRyeSBKU09OU2VyaWFsaXphdGlvbi5kYXRhKHdpdGhKU09OT2JqZWN0Ompzb25PYmplY3QpCiAgICAgICAgICB0cnkgcmVzLnNlbmQoZGF0YTpyZXNwb25zZURhdGEpLmVuZCgpIAogICAgICAgICAgcmV0dXJuICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICB9IAogICAgICAgIC8vLXslIGVuZGlmICV9CiAgICAgICAgLy8teyUgaWYgc2VydmljZU1ldGhvZHxyZXNwb25zZXNIYXNGaWVsZE5hbWVkRXJyb3IgJX0gICAgICAgICAgICAgICAKICAgICAgICBpZiBsZXQgZXJyb3JSZXNwb25zZSA9IHJlc3BvbnNlcy5lcnJvciB7CgkJICBndWFyZCBsZXQgc3RhdHVzQ29kZSA9IEhUVFBTdGF0dXNDb2RlKHJhd1ZhbHVlOkludChlcnJvclJlc3BvbnNlLmNvZGUpKSBlbHNlIHsKCQkgICAgdHJ5IHJlcy5zZW5kKHN0YXR1czoudW5rbm93bikuZW5kKCkKCQkgIAlyZXR1cm4KCQkgIH0KICAgICAgICAgIHRyeSByZXMuc2VuZChzdGF0dXM6c3RhdHVzQ29kZSkuZW5kKCkKICAgICAgICAgIHJldHVybiAgICAgICAgICAgICAgIAogICAgICAgIH0KICAgICAgICAvLy17JSBlbmRpZiAlfQogICAgICAgIHRyeSByZXMuc2VuZChzdGF0dXM6LmludGVybmFsU2VydmVyRXJyb3IpLmVuZCgpCiAgICAgIC8vLXslIGVsc2UgJX0KICAgICAgdHJ5IHJlcy5zZW5kKHN0YXR1czouT0spLmVuZCgpCiAgICAgIC8vLXslIGVuZGlmICV9CiAgfQoKLy8teyUgZW5kZm9yICV9CiAgcmV0dXJuIHJvdXRlcgp9CgpwdWJsaWMgZnVuYyBpbml0aWFsaXplKHNlcnZpY2U6IFNlcnZpY2UsIHBvcnQ6SW50KSB7CiAgLy8gQ3JlYXRlIGEgbmV3IHJvdXRlcgogIGxldCByb3V0ZXIgPSBzZXJ2ZXIoc2VydmljZTpzZXJ2aWNlKQogIC8vIEFkZCBhbiBIVFRQIHNlcnZlciBhbmQgY29ubmVjdCBpdCB0byB0aGUgcm91dGVyCiAgS2l0dXJhLmFkZEhUVFBTZXJ2ZXIob25Qb3J0OnBvcnQsIHdpdGg6IHJvdXRlcikKfQoKcHVibGljIGZ1bmMgcnVuKCkgewogIC8vIFN0YXJ0IHRoZSBLaXR1cmEgcnVubG9vcCAodGhpcyBjYWxsIG5ldmVyIHJldHVybnMpCiAgS2l0dXJhLnJ1bigpCn0K",
    "types.swift": "Ly8gQ29tbW9uIHR5cGUgZGVjbGFyYXRpb25zCgovLy17JSBmb3Igc2VydmljZVR5cGUgaW4gcmVuZGVyZXIudHlwZXMgJX0KcHVibGljIGNsYXNzIHt7IHNlcnZpY2VUeXBlLm5hbWUgfX0gOiBDdXN0b21TdHJpbmdDb252ZXJ0aWJsZSB7CiAgLy8teyUgZm9yIHNlcnZpY2VUeXBlRmllbGQgaW4gc2VydmljZVR5cGUuZmllbGRzICV9CiAgcHVibGljIHZhciB7e3NlcnZpY2VUeXBlRmllbGQubmFtZX19IDoge3tzZXJ2aWNlVHlwZUZpZWxkLnR5cGVOYW1lfX0gPSB7e3NlcnZpY2VUeXBlRmllbGQuaW5pdGlhbFZhbHVlfX0KICAvLy17JSBlbmRmb3IgJX0KCiAgcHVibGljIGluaXQoKSB7fQoKLy8teyUgaWYgc2VydmljZVR5cGUuaXNJbnRlcmZhY2VUeXBlICV9CiAgcHVibGljIGluaXQ/KGpzb25PYmplY3Q6IEFueT8pIHsKICAgIGlmIGxldCBqc29uRGljdGlvbmFyeSA9IGpzb25PYmplY3QgYXM/IFtTdHJpbmc6QW55XSB7ICAKICAgICAgLy8teyUgZm9yIHNlcnZpY2VUeXBlRmllbGQgaW4gc2VydmljZVR5cGUuZmllbGRzICV9CiAgICAgIGlmIGxldCB2YWx1ZSA6IEFueSA9IGpzb25EaWN0aW9uYXJ5WyJ7eyBzZXJ2aWNlVHlwZUZpZWxkLmpzb25OYW1lIH19Il0gewogICAgICAgIC8vLXslIGlmIHNlcnZpY2VUeXBlRmllbGQuaXNBcnJheVR5cGUgJX0KICAgICAgICB2YXIgb3V0QXJyYXkgOiBbe3sgc2VydmljZVR5cGVGaWVsZC5lbGVtZW50VHlwZSB9fV0gPSBbXQogICAgICAgIGxldCBhcnJheSA9IHZhbHVlIGFzISBbQW55XQogICAgICAgIGZvciBhcnJheVZhbHVlIGluIGFycmF5IHsKICAgICAgICAgIGlmIGxldCBlbGVtZW50ID0ge3sgc2VydmljZVR5cGVGaWVsZC5lbGVtZW50VHlwZSB9fShqc29uT2JqZWN0OmFycmF5VmFsdWUpIHsKICAgICAgICAgICAgb3V0QXJyYXkuYXBwZW5kKGVsZW1lbnQpCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHNlbGYue3tzZXJ2aWNlVHlwZUZpZWxkLm5hbWV9fSA9IG91dEFycmF5CiAgICAgICAgLy8teyUgZW5kaWYgJX0KICAgICAgICAvLy17JSBpZiBzZXJ2aWNlVHlwZUZpZWxkLmlzQ2FzdGFibGVUeXBlICV9CiAgICAgICAgc2VsZi57e3NlcnZpY2VUeXBlRmllbGQubmFtZX19ID0gdmFsdWUgYXMhIHt7c2VydmljZVR5cGVGaWVsZC50eXBlTmFtZX19IAogICAgICAgIC8vLXslIGVuZGlmICV9CiAgICAgICAgLy8teyUgaWYgc2VydmljZVR5cGVGaWVsZC5pc0NvbnZlcnRhYmxlVHlwZSAlfQogICAgICAgIHNlbGYue3tzZXJ2aWNlVHlwZUZpZWxkLm5hbWV9fSA9IHt7c2VydmljZVR5cGVGaWVsZC50eXBlTmFtZX19KHZhbHVlKQogICAgICAgIC8vLXslIGVuZGlmICV9CiAgICAgIH0KICAgICAgLy8teyUgZW5kZm9yICV9ICAgCiAgICB9IGVsc2UgewogICAgICByZXR1cm4gbmlsCiAgICB9CiAgfQogICAgCiAgcHVibGljIGZ1bmMganNvbk9iamVjdCgpIC0+IEFueSB7IAogICAgdmFyIHJlc3VsdCA6IFtTdHJpbmc6QW55XSA9IFs6XQogICAgLy8teyUgZm9yIHNlcnZpY2VUeXBlRmllbGQgaW4gc2VydmljZVR5cGUuZmllbGRzICV9CiAgICAvLy17JSBpZiBzZXJ2aWNlVHlwZUZpZWxkLmlzQXJyYXlUeXBlICV9CiAgICB2YXIgb3V0QXJyYXkgOiBbQW55XSA9IFtdCiAgICBmb3IgYXJyYXlWYWx1ZSBpbiBzZWxmLnt7IHNlcnZpY2VUeXBlRmllbGQubmFtZSB9fSB7CiAgICAgIG91dEFycmF5LmFwcGVuZChhcnJheVZhbHVlLmpzb25PYmplY3QoKSkKICAgIH0KICAgIHJlc3VsdFsie3sgc2VydmljZVR5cGVGaWVsZC5qc29uTmFtZSB9fSJdID0gb3V0QXJyYXkKICAgIC8vLXslIGVuZGlmICV9ICAgICAgCiAgICAvLy17JSBpZiBzZXJ2aWNlVHlwZUZpZWxkLmlzQ2FzdGFibGVUeXBlICV9CiAgICByZXN1bHRbInt7IHNlcnZpY2VUeXBlRmllbGQuanNvbk5hbWUgfX0iXSA9IHNlbGYue3tzZXJ2aWNlVHlwZUZpZWxkLm5hbWV9fSAKICAgIC8vLXslIGVuZGlmICV9ICAgICAgCiAgICAvLy17JSBpZiBzZXJ2aWNlVHlwZUZpZWxkLmlzQ29udmVydGFibGVUeXBlICV9CiAgICByZXN1bHRbInt7IHNlcnZpY2VUeXBlRmllbGQuanNvbk5hbWUgfX0iXSA9IHNlbGYue3tzZXJ2aWNlVHlwZUZpZWxkLm5hbWV9fS5qc29uT2JqZWN0KCkgCiAgICAvLy17JSBlbmRpZiAlfQogICAgLy8teyUgZW5kZm9yICV9IAogICAgcmV0dXJuIHJlc3VsdAogIH0KICAKLy8teyUgZW5kaWYgJX0KICBwdWJsaWMgdmFyIGRlc2NyaXB0aW9uOiBTdHJpbmd7CiAgICByZXR1cm4gIlt7eyBzZXJ2aWNlVHlwZS5uYW1lIH19IiArCiAgICAvLy17JSBmb3Igc2VydmljZVR5cGVGaWVsZCBpbiBzZXJ2aWNlVHlwZS5maWVsZHMgJX0KICAgICAgIiB7eyBzZXJ2aWNlVHlwZUZpZWxkLm5hbWUgfX06IFwoc2VsZi57eyBzZXJ2aWNlVHlwZUZpZWxkLm5hbWUgfX0pIiArICAgCiAgICAvLy17JSBlbmRmb3IgJX0gICAgICAKICAgICJdIgogIH0KfQoKLy8teyUgZW5kZm9yICV9",
  ]
}

