// GENERATED: DO NOT EDIT
//
// This file contains base64 encodings of templates used for Swift OpenAPI code generation.
//
func loadTemplates() -> [String:String] {
  return [
    "client.swift": "Ly8gQ2xpZW50IGNvZGUgCgppbXBvcnQgRm91bmRhdGlvbgoKZW51bSBDbGllbnRFcnJvcjogU3dpZnQuRXJyb3IgewogIGNhc2UgZXJyb3JXaXRoQ29kZShJbnQpCn0KCnB1YmxpYyBjbGFzcyBDbGllbnQgewogIHZhciBzZXJ2aWNlIDogU3RyaW5nCiAgCiAgcHVibGljIGluaXQoc2VydmljZTogU3RyaW5nKSB7CiAgCXNlbGYuc2VydmljZSA9IHNlcnZpY2UKICB9CQovLy17JSBmb3Igc2VydmljZU1ldGhvZCBpbiByZW5kZXJlci5tZXRob2RzICV9CgogIC8vIHt7IHNlcnZpY2VNZXRob2QuZGVzY3JpcHRpb24gfX0KICBwdWJsaWMgZnVuYyB7eyBzZXJ2aWNlTWV0aG9kLm5hbWUgfX0oe3sgLnxjbGllbnRQYXJhbWV0ZXJzRGVjbGFyYXRpb246c2VydmljZU1ldGhvZCB9fSkgdGhyb3dzIHt7IC58Y2xpZW50UmV0dXJuRGVjbGFyYXRpb246c2VydmljZU1ldGhvZCB9fSB7CgkgIHZhciBwYXRoID0gc2VsZi5zZXJ2aWNlIAoJICBwYXRoID0gcGF0aCArICJ7eyBzZXJ2aWNlTWV0aG9kLnBhdGggfX0iCgkgIC8vLXslIGZvciBzZXJ2aWNlVHlwZUZpZWxkIGluIHNlcnZpY2VNZXRob2R8cGFyYW1ldGVyc1R5cGVGaWVsZHMgJX0KCSAgLy8teyUgaWYgc2VydmljZVR5cGVGaWVsZC5wb3NpdGlvbiA9PSAicGF0aCIgJX0KCSAgcGF0aCA9IHBhdGgucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6InsiKyJ7eyBzZXJ2aWNlVHlwZUZpZWxkLm5hbWUgfX0iKyJ9Iiwgd2l0aDoiXCh7eyBzZXJ2aWNlVHlwZUZpZWxkLm5hbWUgfX0pIikKCSAgLy8teyUgZW5kaWYgJX0KCSAgLy8teyUgZW5kZm9yICV9CgkgIGxldCB1cmwgPSBVUkwoc3RyaW5nOnBhdGgpCgkgIHZhciByZXF1ZXN0ID0gVVJMUmVxdWVzdCh1cmw6dXJsISkKCSAgcmVxdWVzdC5odHRwTWV0aG9kID0gInt7IHNlcnZpY2VNZXRob2QubWV0aG9kIH19IgoJICAvLy17JSBmb3Igc2VydmljZVR5cGVGaWVsZCBpbiBzZXJ2aWNlTWV0aG9kfHBhcmFtZXRlcnNUeXBlRmllbGRzICV9CgkgIC8vLXslIGlmIHNlcnZpY2VUeXBlRmllbGQucG9zaXRpb24gPT0gImJvZHkiICV9CgkgIGxldCBqc29uT2JqZWN0ID0ge3sgc2VydmljZVR5cGVGaWVsZC5uYW1lIH19Lmpzb25PYmplY3QoKQoJICByZXF1ZXN0Lmh0dHBCb2R5ID0gdHJ5IEpTT05TZXJpYWxpemF0aW9uLmRhdGEod2l0aEpTT05PYmplY3Q6anNvbk9iamVjdCkKCSAgLy8teyUgZW5kaWYgJX0KCSAgLy8teyUgZW5kZm9yICV9CgkgIGxldCAoZGF0YSwgcmVzcG9uc2UsIGVycm9yKSA9IFVSTFNlc3Npb24uc2hhcmVkLmZldGNoKHJlcXVlc3QpCgkgIGxldCBodHRwUmVzcG9uc2UgPSByZXNwb25zZSBhcyEgSFRUUFVSTFJlc3BvbnNlCgkgIGlmIGh0dHBSZXNwb25zZS5zdGF0dXNDb2RlID09IDIwMCB7CgkgICAgLy8teyUgaWYgc2VydmljZU1ldGhvZHxoYXNSZXNwb25zZXMgJX0JICAKCSAgICBpZiBsZXQgZGF0YSA9IGRhdGEgewoJICAgICAgbGV0IGpzb25PYmplY3QgPSB0cnkgSlNPTlNlcmlhbGl6YXRpb24uanNvbk9iamVjdCh3aXRoOmRhdGEpCgkJICBpZiBsZXQgdmFsdWUgPSB7eyBzZXJ2aWNlTWV0aG9kLnJlc3VsdFR5cGVOYW1lIH19KGpzb25PYmplY3Q6anNvbk9iamVjdCkgewkgICAgICAKCQkgICAgcmV0dXJuIHZhbHVlCgkgIAkgIH0KCSAgICB9CgkgICAgcmV0dXJuIHt7IHNlcnZpY2VNZXRob2QucmVzdWx0VHlwZU5hbWUgfX0oKQoJICAgIC8vLXslIGVuZGlmICV9CgkgIH0gZWxzZSB7CgkgIAl0aHJvdyBDbGllbnRFcnJvci5lcnJvcldpdGhDb2RlKGh0dHBSZXNwb25zZS5zdGF0dXNDb2RlKQoJICB9CiAgfQovLy17JSBlbmRmb3IgJX0KfQoKZXh0ZW5zaW9uIFVSTFNlc3Npb24gewogIGZ1bmMgZmV0Y2goXyB1cmxSZXF1ZXN0OiBVUkxSZXF1ZXN0KSAtPiAoRGF0YT8sIFVSTFJlc3BvbnNlPywgRXJyb3I/KSB7CiAgICB2YXIgZGF0YTogRGF0YT8KICAgIHZhciByZXNwb25zZTogVVJMUmVzcG9uc2U/CiAgICB2YXIgZXJyb3I6IEVycm9yPwogICAgbGV0IHNlbSA9IERpc3BhdGNoU2VtYXBob3JlKHZhbHVlOiAwKQogICAgbGV0IHRhc2sgPSBzZWxmLmRhdGFUYXNrKHdpdGg6IHVybFJlcXVlc3QsIGNvbXBsZXRpb25IYW5kbGVyOiB7CiAgICAgIGRhdGEgPSAkMAogICAgICByZXNwb25zZSA9ICQxCiAgICAgIGVycm9yID0gJDIgYXMhIEVycm9yPwogICAgICBzZW0uc2lnbmFsKCkKICAgIH0pCiAgICB0YXNrLnJlc3VtZSgpCiAgICBsZXQgcmVzdWx0ID0gc2VtLndhaXQodGltZW91dDogRGlzcGF0Y2hUaW1lLmRpc3RhbnRGdXR1cmUpCiAgICBzd2l0Y2ggcmVzdWx0IHsKICAgIGNhc2UgLnN1Y2Nlc3M6CiAgICAgIHJldHVybiAoZGF0YSwgcmVzcG9uc2UsIGVycm9yKQogICAgY2FzZSAudGltZWRPdXQ6CiAgICAgIHJldHVybiAoZGF0YSwgcmVzcG9uc2UsIG5pbCkKICAgIH0KICB9Cn0K",
    "service.swift": "Ly8gU2VydmljZSBjb2RlCgppbXBvcnQgS2l0dXJhCmltcG9ydCBLaXR1cmFOZXQKaW1wb3J0IEZvdW5kYXRpb24KCnB1YmxpYyBwcm90b2NvbCBTZXJ2aWNlIHsKLy8teyUgZm9yIHNlcnZpY2VNZXRob2QgaW4gcmVuZGVyZXIubWV0aG9kcyAlfQogIC8vIHt7IHNlcnZpY2VNZXRob2QuZGVzY3JpcHRpb24gfX0KICBmdW5jIHt7IHNlcnZpY2VNZXRob2QubmFtZSB9fSAoe3sgLnxwcm90b2NvbFBhcmFtZXRlcnNEZWNsYXJhdGlvbjpzZXJ2aWNlTWV0aG9kIH19KSB0aHJvd3Mge3sgLnxwcm90b2NvbFJldHVybkRlY2xhcmF0aW9uOnNlcnZpY2VNZXRob2QgIH19Ci8vLXslIGVuZGZvciAlfQp9CgpmdW5jIGludFZhbHVlKF8gczpTdHJpbmc/KSAtPiBJbnQ2NCB7CiAgcmV0dXJuIEludDY0KHMhKSEKfQoKcHVibGljIGZ1bmMgc2VydmVyKHNlcnZpY2UgOiBTZXJ2aWNlKSAtPiBSb3V0ZXIgewogIC8vIENyZWF0ZSBhIG5ldyByb3V0ZXIKICBsZXQgcm91dGVyID0gUm91dGVyKCkKCi8vLXslIGZvciBzZXJ2aWNlTWV0aG9kIGluIHJlbmRlcmVyLm1ldGhvZHMgJX0KICAvLyB7eyBzZXJ2aWNlTWV0aG9kLmRlc2NyaXB0aW9uIH19CiAgcm91dGVyLnt7IHNlcnZpY2VNZXRob2QubWV0aG9kfGxvd2VyY2FzZSB9fSgie3sgc2VydmljZU1ldGhvZHxraXR1cmFQYXRoIH19IikgeyByZXEsIHJlcywgbmV4dCBpbiAgICAgIAogICAgICAvLy17JSBpZiBzZXJ2aWNlTWV0aG9kfGhhc1BhcmFtZXRlcnMgJX0KICAgICAgLy8gaW5zdGFudGlhdGUgdGhlIHBhcmFtZXRlcnMgc3RydWN0dXJlCiAgICAgIHZhciBwYXJhbWV0ZXJzID0ge3sgc2VydmljZU1ldGhvZC5wYXJhbWV0ZXJzVHlwZU5hbWUgfX0oKQogICAgICAvLy17JSBmb3Igc2VydmljZVR5cGVGaWVsZCBpbiBzZXJ2aWNlTWV0aG9kfHBhcmFtZXRlcnNUeXBlRmllbGRzICV9CiAgICAgIC8vLXslIGlmIHNlcnZpY2VUeXBlRmllbGQucG9zaXRpb24gPT0gInBhdGgiICV9CiAgICAgIHBhcmFtZXRlcnMue3sgc2VydmljZVR5cGVGaWVsZC5uYW1lIH19ID0gaW50VmFsdWUocmVxLnBhcmFtZXRlcnNbInt7IHNlcnZpY2VUeXBlRmllbGQubmFtZSB9fSJdKQogICAgICAvLy17JSBlbmRpZiAlfQogICAgICAvLy17JSBlbmRmb3IgJX0gICAgIAogICAgICAvLy17JSBpZiBzZXJ2aWNlTWV0aG9kLm1ldGhvZCA9PSAiUE9TVCIgJX0KICAgICAgLy8gZGVzZXJpYWxpemUgcmVxdWVzdCBmcm9tIHBvc3QgZGF0YQogICAgICBsZXQgYm9keVN0cmluZyA9IHRyeSByZXEucmVhZFN0cmluZygpID8/ICIiCiAgICAgIGxldCBib2R5RGF0YSA9IGJvZHlTdHJpbmcuZGF0YSh1c2luZzoudXRmOCkhCgkgIHZhciBqc29uT2JqZWN0IDogQW55PyA9IG5pbAoJICBkbyB7CiAgICAgIAlqc29uT2JqZWN0ID0gdHJ5IEpTT05TZXJpYWxpemF0aW9uLmpzb25PYmplY3Qod2l0aDpib2R5RGF0YSkKCSAgfSBjYXRjaCAobGV0IGVycm9yKSB7CgkJdHJ5IHJlcy5zZW5kKHN0YXR1czouYmFkUmVxdWVzdCkuZW5kKCkKCQlyZXR1cm4KCSAgfQogICAgICBwYXJhbWV0ZXJzLnt7IHNlcnZpY2VNZXRob2R8Ym9keVBhcmFtZXRlckZpZWxkTmFtZSB9fSA9IHt7IHNlcnZpY2VNZXRob2QucmVzdWx0VHlwZU5hbWUgfX0oanNvbk9iamVjdDpqc29uT2JqZWN0KSEKICAgICAgLy8teyUgZW5kaWYgJX0KICAgICAgLy8teyUgZW5kaWYgJX0KICAgICAgLy8teyUgaWYgc2VydmljZU1ldGhvZHxoYXNQYXJhbWV0ZXJzICV9CiAgICAgIC8vLXslIGlmIHNlcnZpY2VNZXRob2R8aGFzUmVzcG9uc2VzICV9CiAgICAgIGxldCByZXNwb25zZXMgPSB0cnkhIHNlcnZpY2Uue3sgc2VydmljZU1ldGhvZC5uYW1lIH19KHBhcmFtZXRlcnMpCiAgICAgIC8vLXslIGVsc2UgJX0KICAgICAgdHJ5ISBzZXJ2aWNlLnt7IHNlcnZpY2VNZXRob2QubmFtZSB9fShwYXJhbWV0ZXJzKQogICAgICAvLy17JSBlbmRpZiAlfQogICAgICAvLy17JSBlbHNlICV9CiAgICAgIC8vLXslIGlmIHNlcnZpY2VNZXRob2R8aGFzUmVzcG9uc2VzICV9CiAgICAgIGxldCByZXNwb25zZXMgPSB0cnkhIHNlcnZpY2Uue3sgc2VydmljZU1ldGhvZC5uYW1lIH19KCkKICAgICAgLy8teyUgZWxzZSAlfQogICAgICB0cnkhIHNlcnZpY2Uue3sgc2VydmljZU1ldGhvZC5uYW1lIH19KCkKICAgICAgLy8teyUgZW5kaWYgJX0KICAgICAgLy8teyUgZW5kaWYgJX0KICAgICAgLy8teyUgaWYgc2VydmljZU1ldGhvZHxoYXNSZXNwb25zZXMgJX0KICAgICAgICAvLy17JSBpZiBzZXJ2aWNlTWV0aG9kfHJlc3BvbnNlc0hhc0ZpZWxkTmFtZWRPSyAlfSAgICAgICAgICAgIAogICAgICAgIGlmIGxldCBvayA9IHJlc3BvbnNlcy5vayB7CiAgICAgICAgICBsZXQganNvbk9iamVjdCA9IG9rLmpzb25PYmplY3QoKQogICAgICAgICAgbGV0IHJlc3BvbnNlRGF0YSA9IHRyeSBKU09OU2VyaWFsaXphdGlvbi5kYXRhKHdpdGhKU09OT2JqZWN0Ompzb25PYmplY3QpCiAgICAgICAgICBsZXQgcmVzcG9uc2VTdHJpbmcgPSBTdHJpbmcoZGF0YTpyZXNwb25zZURhdGEsIGVuY29kaW5nOi51dGY4KSEKICAgICAgICAgIHRyeSByZXMuc2VuZChyZXNwb25zZVN0cmluZykuZW5kKCkgCgkJICByZXR1cm4gICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIH0gCiAgICAgICAgLy8teyUgZW5kaWYgJX0KICAgICAgICAvLy17JSBpZiBzZXJ2aWNlTWV0aG9kfHJlc3BvbnNlc0hhc0ZpZWxkTmFtZWRFcnJvciAlfSAgICAgICAgICAgICAgIAogICAgICAgIGlmIGxldCBlcnJvclJlc3BvbnNlID0gcmVzcG9uc2VzLmVycm9yIHsKICAgICAgICAgIHRyeSByZXMuc2VuZChzdGF0dXM6SFRUUFN0YXR1c0NvZGUocmF3VmFsdWU6SW50KGVycm9yUmVzcG9uc2UuY29kZSkpISkuZW5kKCkKCQkgIHJldHVybiAgICAgICAgICAgICAgIAogICAgICAgIH0KICAgICAgICAvLy17JSBlbmRpZiAlfQogICAgICAgIHRyeSByZXMuc2VuZChzdGF0dXM6LmludGVybmFsU2VydmVyRXJyb3IpLmVuZCgpCiAgICAgIC8vLXslIGVsc2UgJX0KICAgICAgdHJ5IHJlcy5zZW5kKHN0YXR1czouT0spLmVuZCgpCiAgICAgIC8vLXslIGVuZGlmICV9CiAgfQoKLy8teyUgZW5kZm9yICV9CiAgcmV0dXJuIHJvdXRlcgp9CgpwdWJsaWMgZnVuYyBpbml0aWFsaXplKHNlcnZpY2U6IFNlcnZpY2UsIHBvcnQ6SW50KSB7CiAgLy8gQ3JlYXRlIGEgbmV3IHJvdXRlcgogIGxldCByb3V0ZXIgPSBzZXJ2ZXIoc2VydmljZTpzZXJ2aWNlKQogIC8vIEFkZCBhbiBIVFRQIHNlcnZlciBhbmQgY29ubmVjdCBpdCB0byB0aGUgcm91dGVyCiAgS2l0dXJhLmFkZEhUVFBTZXJ2ZXIob25Qb3J0OnBvcnQsIHdpdGg6IHJvdXRlcikKfQoKcHVibGljIGZ1bmMgcnVuKCkgewogIC8vIFN0YXJ0IHRoZSBLaXR1cmEgcnVubG9vcCAodGhpcyBjYWxsIG5ldmVyIHJldHVybnMpCiAgS2l0dXJhLnJ1bigpCn0K",
    "types.swift": "Ly8gQ29tbW9uIHR5cGUgZGVjbGFyYXRpb25zCgovLy17JSBmb3Igc2VydmljZVR5cGUgaW4gcmVuZGVyZXIudHlwZXMgJX0KcHVibGljIGNsYXNzIHt7IHNlcnZpY2VUeXBlLm5hbWUgfX0gOiBDdXN0b21TdHJpbmdDb252ZXJ0aWJsZSB7CiAgLy8teyUgZm9yIHNlcnZpY2VUeXBlRmllbGQgaW4gc2VydmljZVR5cGUuZmllbGRzICV9CiAgcHVibGljIHZhciB7e3NlcnZpY2VUeXBlRmllbGQubmFtZX19IDoge3tzZXJ2aWNlVHlwZUZpZWxkLnR5cGVOYW1lfX0gPSB7e3NlcnZpY2VUeXBlRmllbGQuaW5pdGlhbFZhbHVlfX0KICAvLy17JSBlbmRmb3IgJX0KCiAgcHVibGljIGluaXQoKSB7fQoKLy8teyUgaWYgc2VydmljZVR5cGUuaXNJbnRlcmZhY2VUeXBlICV9CiAgcHVibGljIGluaXQ/KGpzb25PYmplY3Q6IEFueSkgewogICAgaWYgbGV0IGpzb25EaWN0aW9uYXJ5ID0ganNvbk9iamVjdCBhcz8gW1N0cmluZzpBbnldIHsgIAogICAgICAvLy17JSBmb3Igc2VydmljZVR5cGVGaWVsZCBpbiBzZXJ2aWNlVHlwZS5maWVsZHMgJX0KICAgICAgaWYgbGV0IHZhbHVlIDogQW55ID0ganNvbkRpY3Rpb25hcnlbInt7IHNlcnZpY2VUeXBlRmllbGQuanNvbk5hbWUgfX0iXSB7CiAgICAgICAgLy8teyUgaWYgc2VydmljZVR5cGVGaWVsZC5pc0FycmF5VHlwZSAlfQogICAgICAgIHZhciBvdXRBcnJheSA6IFt7eyBzZXJ2aWNlVHlwZUZpZWxkLmVsZW1lbnRUeXBlIH19XSA9IFtdCiAgICAgICAgbGV0IGFycmF5ID0gdmFsdWUgYXMhIFtBbnldCiAgICAgICAgZm9yIGFycmF5VmFsdWUgaW4gYXJyYXkgewogICAgICAgICAgaWYgbGV0IGVsZW1lbnQgPSB7eyBzZXJ2aWNlVHlwZUZpZWxkLmVsZW1lbnRUeXBlIH19KGpzb25PYmplY3Q6YXJyYXlWYWx1ZSkgewogICAgICAgICAgICBvdXRBcnJheS5hcHBlbmQoZWxlbWVudCkKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgc2VsZi57e3NlcnZpY2VUeXBlRmllbGQubmFtZX19ID0gb3V0QXJyYXkKICAgICAgICAvLy17JSBlbmRpZiAlfQogICAgICAgIC8vLXslIGlmIHNlcnZpY2VUeXBlRmllbGQuaXNDYXN0YWJsZVR5cGUgJX0KICAgICAgICBzZWxmLnt7c2VydmljZVR5cGVGaWVsZC5uYW1lfX0gPSB2YWx1ZSBhcyEge3tzZXJ2aWNlVHlwZUZpZWxkLnR5cGVOYW1lfX0gCiAgICAgICAgLy8teyUgZW5kaWYgJX0KICAgICAgICAvLy17JSBpZiBzZXJ2aWNlVHlwZUZpZWxkLmlzQ29udmVydGFibGVUeXBlICV9CiAgICAgICAgc2VsZi57e3NlcnZpY2VUeXBlRmllbGQubmFtZX19ID0ge3tzZXJ2aWNlVHlwZUZpZWxkLnR5cGVOYW1lfX0odmFsdWUpCiAgICAgICAgLy8teyUgZW5kaWYgJX0KICAgICAgfQogICAgICAvLy17JSBlbmRmb3IgJX0gICAKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBuaWwKICAgIH0KICB9CiAgICAKICBwdWJsaWMgZnVuYyBqc29uT2JqZWN0KCkgLT4gQW55IHsgCiAgICB2YXIgcmVzdWx0IDogW1N0cmluZzpBbnldID0gWzpdCiAgICAvLy17JSBmb3Igc2VydmljZVR5cGVGaWVsZCBpbiBzZXJ2aWNlVHlwZS5maWVsZHMgJX0KICAgIC8vLXslIGlmIHNlcnZpY2VUeXBlRmllbGQuaXNBcnJheVR5cGUgJX0KICAgIHZhciBvdXRBcnJheSA6IFtBbnldID0gW10KICAgIGZvciBhcnJheVZhbHVlIGluIHNlbGYue3sgc2VydmljZVR5cGVGaWVsZC5uYW1lIH19IHsKICAgICAgb3V0QXJyYXkuYXBwZW5kKGFycmF5VmFsdWUuanNvbk9iamVjdCgpKQogICAgfQogICAgcmVzdWx0WyJ7eyBzZXJ2aWNlVHlwZUZpZWxkLmpzb25OYW1lIH19Il0gPSBvdXRBcnJheQogICAgLy8teyUgZW5kaWYgJX0gICAgICAKICAgIC8vLXslIGlmIHNlcnZpY2VUeXBlRmllbGQuaXNDYXN0YWJsZVR5cGUgJX0KICAgIHJlc3VsdFsie3sgc2VydmljZVR5cGVGaWVsZC5qc29uTmFtZSB9fSJdID0gc2VsZi57e3NlcnZpY2VUeXBlRmllbGQubmFtZX19IAogICAgLy8teyUgZW5kaWYgJX0gICAgICAKICAgIC8vLXslIGlmIHNlcnZpY2VUeXBlRmllbGQuaXNDb252ZXJ0YWJsZVR5cGUgJX0KICAgIHJlc3VsdFsie3sgc2VydmljZVR5cGVGaWVsZC5qc29uTmFtZSB9fSJdID0gc2VsZi57e3NlcnZpY2VUeXBlRmllbGQubmFtZX19Lmpzb25PYmplY3QoKSAKICAgIC8vLXslIGVuZGlmICV9CiAgICAvLy17JSBlbmRmb3IgJX0gCiAgICByZXR1cm4gcmVzdWx0CiAgfQogIAovLy17JSBlbmRpZiAlfQogIHB1YmxpYyB2YXIgZGVzY3JpcHRpb246IFN0cmluZ3sKICAgIHJldHVybiAiW3t7IHNlcnZpY2VUeXBlLm5hbWUgfX0iICsKICAgIC8vLXslIGZvciBzZXJ2aWNlVHlwZUZpZWxkIGluIHNlcnZpY2VUeXBlLmZpZWxkcyAlfQogICAgICAiIHt7IHNlcnZpY2VUeXBlRmllbGQubmFtZSB9fTogXChzZWxmLnt7IHNlcnZpY2VUeXBlRmllbGQubmFtZSB9fSkiICsgICAKICAgIC8vLXslIGVuZGZvciAlfSAgICAgIAogICAgIl0iCiAgfQp9CgovLy17JSBlbmRmb3IgJX0=",
  ]
}

