// GENERATED: DO NOT EDIT
//
// This file contains base64 encodings of templates used for Swift OpenAPI code generation.
//
func loadTemplates() -> [String:String] {
  return [
    "client.swift": "Ly8gQ2xpZW50IGNvZGUgCgppbXBvcnQgRm91bmRhdGlvbgppbXBvcnQgRGlzcGF0Y2gKaW1wb3J0IEtpdHVyYU5ldAoKZW51bSBDbGllbnRFcnJvcjogU3dpZnQuRXJyb3IgewogIGNhc2UgZXJyb3JXaXRoQ29kZShJbnQpCn0KCnB1YmxpYyBjbGFzcyBDbGllbnQgewogIHZhciBzZXJ2aWNlIDogU3RyaW5nCiAgCiAgcHVibGljIGluaXQoc2VydmljZTogU3RyaW5nKSB7CiAgCXNlbGYuc2VydmljZSA9IHNlcnZpY2UKICB9CQovLy17JSBmb3Igc2VydmljZU1ldGhvZCBpbiByZW5kZXJlci5tZXRob2RzICV9CgogIC8vIHt7IHNlcnZpY2VNZXRob2QuZGVzY3JpcHRpb24gfX0KICBwdWJsaWMgZnVuYyB7eyBzZXJ2aWNlTWV0aG9kLm5hbWUgfX0oe3sgLnxjbGllbnRQYXJhbWV0ZXJzRGVjbGFyYXRpb246c2VydmljZU1ldGhvZCB9fSkgdGhyb3dzIHt7IC58Y2xpZW50UmV0dXJuRGVjbGFyYXRpb246c2VydmljZU1ldGhvZCB9fSB7CgkgIHZhciBwYXRoID0gc2VsZi5zZXJ2aWNlIAoJICBwYXRoID0gcGF0aCArICJ7eyBzZXJ2aWNlTWV0aG9kLnBhdGggfX0iCgkgIC8vLXslIGZvciBzZXJ2aWNlVHlwZUZpZWxkIGluIHNlcnZpY2VNZXRob2R8cGFyYW1ldGVyc1R5cGVGaWVsZHMgJX0KCSAgLy8teyUgaWYgc2VydmljZVR5cGVGaWVsZC5wb3NpdGlvbiA9PSAicGF0aCIgJX0KCSAgcGF0aCA9IHBhdGgucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6InsiKyJ7eyBzZXJ2aWNlVHlwZUZpZWxkLm5hbWUgfX0iKyJ9Iiwgd2l0aDoiXCh7eyBzZXJ2aWNlVHlwZUZpZWxkLm5hbWUgfX0pIikKCSAgLy8teyUgZW5kaWYgJX0KCSAgLy8teyUgZW5kZm9yICV9CgkgIGxldCB1cmwgPSBVUkwoc3RyaW5nOnBhdGgpCgkgIHZhciByZXF1ZXN0ID0gVVJMUmVxdWVzdCh1cmw6dXJsISkKCSAgcmVxdWVzdC5odHRwTWV0aG9kID0gInt7IHNlcnZpY2VNZXRob2QubWV0aG9kIH19IgoJICAvLy17JSBmb3Igc2VydmljZVR5cGVGaWVsZCBpbiBzZXJ2aWNlTWV0aG9kfHBhcmFtZXRlcnNUeXBlRmllbGRzICV9CgkgIC8vLXslIGlmIHNlcnZpY2VUeXBlRmllbGQucG9zaXRpb24gPT0gImJvZHkiICV9CgkgIGxldCBqc29uT2JqZWN0ID0ge3sgc2VydmljZVR5cGVGaWVsZC5uYW1lIH19Lmpzb25PYmplY3QoKQoJICByZXF1ZXN0Lmh0dHBCb2R5ID0gdHJ5IEpTT05TZXJpYWxpemF0aW9uLmRhdGEod2l0aEpTT05PYmplY3Q6anNvbk9iamVjdCkKCSAgLy8teyUgZW5kaWYgJX0KCSAgLy8teyUgZW5kZm9yICV9CiAgICAgIC8vLXslIGlmIHNlcnZpY2VNZXRob2R8aGFzUmVzcG9uc2VzICV9CSAgCSAgCgkgIGxldCAoZGF0YSwgcmVzcG9uc2UsIGVycm9yKSA9IGZldGNoKHJlcXVlc3QpCgkgIC8vLXslIGVsc2UgJX0KCSAgbGV0IChfLCByZXNwb25zZSwgZXJyb3IpID0gZmV0Y2gocmVxdWVzdCkKCSAgLy8teyUgZW5kaWYgJX0KCSAgaWYgZXJyb3IgIT0gbmlsIHsKCSAgCXRocm93IENsaWVudEVycm9yLmVycm9yV2l0aENvZGUoMCkKCSAgfQoJICBndWFyZCBsZXQgaHR0cFJlc3BvbnNlID0gcmVzcG9uc2UgZWxzZSB7CgkgIAl0aHJvdyBDbGllbnRFcnJvci5lcnJvcldpdGhDb2RlKDApCgkgIH0KCSAgaWYgaHR0cFJlc3BvbnNlLnN0YXR1c0NvZGUgPT0gMjAwIHsKCSAgICAvLy17JSBpZiBzZXJ2aWNlTWV0aG9kfGhhc1Jlc3BvbnNlcyAlfQkgIAoJICAgIGlmIGxldCBkYXRhID0gZGF0YSB7CgkgICAgICBsZXQganNvbk9iamVjdCA9IHRyeSBKU09OU2VyaWFsaXphdGlvbi5qc29uT2JqZWN0KHdpdGg6ZGF0YSkKCQkgIGlmIGxldCB2YWx1ZSA9IHt7IHNlcnZpY2VNZXRob2QucmVzdWx0VHlwZU5hbWUgfX0oanNvbk9iamVjdDpqc29uT2JqZWN0KSB7CSAgICAgIAoJCSAgICByZXR1cm4gdmFsdWUKCSAgCSAgfQoJICAgIH0KCSAgICByZXR1cm4ge3sgc2VydmljZU1ldGhvZC5yZXN1bHRUeXBlTmFtZSB9fSgpCgkgICAgLy8teyUgZW5kaWYgJX0KCSAgfSBlbHNlIHsKCSAgCXRocm93IENsaWVudEVycm9yLmVycm9yV2l0aENvZGUoaHR0cFJlc3BvbnNlLnN0YXR1c0NvZGUpCgkgIH0KICB9Ci8vLXslIGVuZGZvciAlfQp9CgovLyBmZXRjaCBtYWtlcyBhIHN5bmNocm9ub3VzIHJlcXVlc3QgdXNpbmcgS2l0dXJhTmV0J3MgQ2xpZW50UmVxdWVzdCBjbGFzcwovLyBodHRwczovL2dpdGh1Yi5jb20vSUJNLVN3aWZ0L0tpdHVyYS1uZXQvYmxvYi9tYXN0ZXIvU291cmNlcy9LaXR1cmFOZXQvQ2xpZW50UmVxdWVzdC5zd2lmdApwdWJsaWMgZnVuYyBmZXRjaChfIHVybFJlcXVlc3Q6IFVSTFJlcXVlc3QpIC0+IChEYXRhPywgSFRUUFVSTFJlc3BvbnNlPywgRXJyb3I/KSB7CiAgdmFyIGRhdGE6IERhdGE/CiAgdmFyIHVybFJlc3BvbnNlOiBIVFRQVVJMUmVzcG9uc2U/CiAgbGV0IGVycm9yOiBFcnJvcj8gPSBuaWwgLy8gbWFrZSB0aGlzIG11dGFibGUgd2hlbiB3ZSBzdGFydCB1c2luZyBpdAogIGxldCBzZW0gPSBEaXNwYXRjaFNlbWFwaG9yZSh2YWx1ZTogMCkKICBndWFyZCBsZXQgbWV0aG9kID0gdXJsUmVxdWVzdC5odHRwTWV0aG9kIGVsc2UgewogICAgcmV0dXJuIChkYXRhLCB1cmxSZXNwb25zZSwgZXJyb3IpCiAgfQogIGd1YXJkIGxldCB1cmwgPSB1cmxSZXF1ZXN0LnVybCBlbHNlIHsKICAgIHJldHVybiAoZGF0YSwgdXJsUmVzcG9uc2UsIGVycm9yKQogIH0KICBndWFyZCBsZXQgc2NoZW1lID0gdXJsLnNjaGVtZSBlbHNlIHsKICAgIHJldHVybiAoZGF0YSwgdXJsUmVzcG9uc2UsIGVycm9yKQogIH0KICBndWFyZCBsZXQgaG9zdCA9IHVybC5ob3N0IGVsc2UgewogICAgcmV0dXJuIChkYXRhLCB1cmxSZXNwb25zZSwgZXJyb3IpCiAgfQogIGd1YXJkIGxldCBwb3J0ID0gdXJsLnBvcnQgZWxzZSB7CiAgICByZXR1cm4gKGRhdGEsIHVybFJlc3BvbnNlLCBlcnJvcikKICB9CiAgbGV0IG9wdGlvbnMgOiBbQ2xpZW50UmVxdWVzdC5PcHRpb25zXSA9IFsKICAgIC5tZXRob2QobWV0aG9kKSwKICAgIC5zY2hlbWEoc2NoZW1lKSwKICAgIC5ob3N0bmFtZShob3N0KSwKICAgIC5wb3J0KEludDE2KHBvcnQpKSwKICAgIC5wYXRoKHVybC5wYXRoKSwKICAgIC8vIGhlYWRlcnMsIGV0YwogIF0KICBsZXQgcmVxdWVzdCA9IEhUVFAucmVxdWVzdChvcHRpb25zKSB7IChyZXNwb25zZSkgaW4KICAgIGd1YXJkIGxldCByZXNwb25zZSA9IHJlc3BvbnNlIGVsc2UgewogICAgICBzZW0uc2lnbmFsKCkKICAgICAgcmV0dXJuCiAgICB9CiAgICB2YXIgcmVzcG9uc2VEYXRhID0gRGF0YSgpCiAgICBkbyB7CiAgICAgIGxldCBjb2RlID0gcmVzcG9uc2UuaHR0cFN0YXR1c0NvZGUKICAgICAgdHJ5IHJlc3BvbnNlLnJlYWRBbGxEYXRhKGludG86ICZyZXNwb25zZURhdGEpCiAgICAgIGRhdGEgPSByZXNwb25zZURhdGEKICAgICAgdXJsUmVzcG9uc2UgPSBIVFRQVVJMUmVzcG9uc2UodXJsOnVybCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzQ29kZTpjb2RlLnJhd1ZhbHVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodHRwVmVyc2lvbjoiSFRUUC8xLjEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJGaWVsZHM6WzpdKQogICAgICBzZW0uc2lnbmFsKCkKICAgICAgcmV0dXJuCiAgICB9IGNhdGNoIHsKICAgICAgc2VtLnNpZ25hbCgpCiAgICAgIHJldHVybgogICAgfQogIH0KICBpZiBsZXQgcmVxdWVzdERhdGEgPSB1cmxSZXF1ZXN0Lmh0dHBCb2R5IHsKICAgIHJlcXVlc3Qud3JpdGUoZnJvbTpyZXF1ZXN0RGF0YSkKICB9CiAgcmVxdWVzdC5lbmQoKSAvLyBzZW5kIHRoZSByZXF1ZXN0CiAgLy8gbm93IHdhaXQgb24gdGhlIHNlbWFwaG9yZSBmb3IgYSByZXNwb25zZQogIGxldCByZXN1bHQgPSBzZW0ud2FpdCh0aW1lb3V0OiBEaXNwYXRjaFRpbWUuZGlzdGFudEZ1dHVyZSkKICBzd2l0Y2ggcmVzdWx0IHsKICBjYXNlIC5zdWNjZXNzOgogICAgcmV0dXJuIChkYXRhLCB1cmxSZXNwb25zZSwgZXJyb3IpCiAgZGVmYXVsdDogLy8gaW5jbHVkZXMgLnRpbWVvdXQKICAgIHJldHVybiAoZGF0YSwgdXJsUmVzcG9uc2UsIGVycm9yKQogIH0KfQo=",
    "service.swift": "Ly8gU2VydmljZSBjb2RlCgppbXBvcnQgS2l0dXJhCmltcG9ydCBLaXR1cmFOZXQKaW1wb3J0IEZvdW5kYXRpb24KCi8vIEEgc2VydmVyIHJlcXVpcmVzIGFuIGluc3RhbmNlIG9mIGFuIGltcGxlbWVudGF0aW9uIG9mIHRoaXMgcHJvdG9jb2wuCnB1YmxpYyBwcm90b2NvbCBTZXJ2aWNlIHsKLy8teyUgZm9yIHNlcnZpY2VNZXRob2QgaW4gcmVuZGVyZXIubWV0aG9kcyAlfQogIC8vIHt7IHNlcnZpY2VNZXRob2QuZGVzY3JpcHRpb24gfX0KICBmdW5jIHt7IHNlcnZpY2VNZXRob2QubmFtZSB9fSAoe3sgLnxwcm90b2NvbFBhcmFtZXRlcnNEZWNsYXJhdGlvbjpzZXJ2aWNlTWV0aG9kIH19KSB0aHJvd3Mge3sgLnxwcm90b2NvbFJldHVybkRlY2xhcmF0aW9uOnNlcnZpY2VNZXRob2QgIH19Ci8vLXslIGVuZGZvciAlfQp9CgpmdW5jIGludFZhbHVlKF8gczpTdHJpbmc/KSAtPiBJbnQ2NCB7CiAgcmV0dXJuIEludDY0KHMhKSEKfQoKcHVibGljIGZ1bmMgc2VydmVyKHNlcnZpY2UgOiBTZXJ2aWNlKSAtPiBSb3V0ZXIgewogIC8vIENyZWF0ZSBhIG5ldyByb3V0ZXIKICBsZXQgcm91dGVyID0gUm91dGVyKCkKCi8vLXslIGZvciBzZXJ2aWNlTWV0aG9kIGluIHJlbmRlcmVyLm1ldGhvZHMgJX0KICAvLyB7eyBzZXJ2aWNlTWV0aG9kLmRlc2NyaXB0aW9uIH19CiAgcm91dGVyLnt7IHNlcnZpY2VNZXRob2QubWV0aG9kfGxvd2VyY2FzZSB9fSgie3sgc2VydmljZU1ldGhvZHxraXR1cmFQYXRoIH19IikgeyByZXEsIHJlcywgbmV4dCBpbiAgICAgIAogICAgICAvLy17JSBpZiBzZXJ2aWNlTWV0aG9kfGhhc1BhcmFtZXRlcnMgJX0KICAgICAgLy8gaW5zdGFudGlhdGUgdGhlIHBhcmFtZXRlcnMgc3RydWN0dXJlCiAgICAgIGxldCBwYXJhbWV0ZXJzID0ge3sgc2VydmljZU1ldGhvZC5wYXJhbWV0ZXJzVHlwZU5hbWUgfX0oKQogICAgICAvLy17JSBmb3Igc2VydmljZVR5cGVGaWVsZCBpbiBzZXJ2aWNlTWV0aG9kfHBhcmFtZXRlcnNUeXBlRmllbGRzICV9CiAgICAgIC8vLXslIGlmIHNlcnZpY2VUeXBlRmllbGQucG9zaXRpb24gPT0gInBhdGgiICV9CiAgICAgIHBhcmFtZXRlcnMue3sgc2VydmljZVR5cGVGaWVsZC5uYW1lIH19ID0gaW50VmFsdWUocmVxLnBhcmFtZXRlcnNbInt7IHNlcnZpY2VUeXBlRmllbGQubmFtZSB9fSJdKQogICAgICAvLy17JSBlbmRpZiAlfQogICAgICAvLy17JSBlbmRmb3IgJX0gICAgIAogICAgICAvLy17JSBpZiBzZXJ2aWNlTWV0aG9kLm1ldGhvZCA9PSAiUE9TVCIgJX0KICAgICAgLy8gZGVzZXJpYWxpemUgcmVxdWVzdCBmcm9tIHBvc3QgZGF0YQogICAgICBsZXQgYm9keVN0cmluZyA9IHRyeSByZXEucmVhZFN0cmluZygpID8/ICIiCiAgICAgIGxldCBib2R5RGF0YSA9IGJvZHlTdHJpbmcuZGF0YSh1c2luZzoudXRmOCkhCgkgIHZhciBqc29uT2JqZWN0IDogQW55PyA9IG5pbAoJICBkbyB7CiAgICAgIAlqc29uT2JqZWN0ID0gdHJ5IEpTT05TZXJpYWxpemF0aW9uLmpzb25PYmplY3Qod2l0aDpib2R5RGF0YSkKCSAgfSBjYXRjaCB7CgkJdHJ5IHJlcy5zZW5kKHN0YXR1czouYmFkUmVxdWVzdCkuZW5kKCkKCQlyZXR1cm4KCSAgfQogICAgICBwYXJhbWV0ZXJzLnt7IHNlcnZpY2VNZXRob2R8Ym9keVBhcmFtZXRlckZpZWxkTmFtZSB9fSA9IHt7IHNlcnZpY2VNZXRob2QucmVzdWx0VHlwZU5hbWUgfX0oanNvbk9iamVjdDpqc29uT2JqZWN0KSEKICAgICAgLy8teyUgZW5kaWYgJX0KICAgICAgLy8teyUgZW5kaWYgJX0KICAgICAgLy8teyUgaWYgc2VydmljZU1ldGhvZHxoYXNQYXJhbWV0ZXJzICV9CiAgICAgIC8vLXslIGlmIHNlcnZpY2VNZXRob2R8aGFzUmVzcG9uc2VzICV9CiAgICAgIGxldCByZXNwb25zZXMgPSB0cnkhIHNlcnZpY2Uue3sgc2VydmljZU1ldGhvZC5uYW1lIH19KHBhcmFtZXRlcnMpCiAgICAgIC8vLXslIGVsc2UgJX0KICAgICAgdHJ5ISBzZXJ2aWNlLnt7IHNlcnZpY2VNZXRob2QubmFtZSB9fShwYXJhbWV0ZXJzKQogICAgICAvLy17JSBlbmRpZiAlfQogICAgICAvLy17JSBlbHNlICV9CiAgICAgIC8vLXslIGlmIHNlcnZpY2VNZXRob2R8aGFzUmVzcG9uc2VzICV9CiAgICAgIGxldCByZXNwb25zZXMgPSB0cnkhIHNlcnZpY2Uue3sgc2VydmljZU1ldGhvZC5uYW1lIH19KCkKICAgICAgLy8teyUgZWxzZSAlfQogICAgICB0cnkhIHNlcnZpY2Uue3sgc2VydmljZU1ldGhvZC5uYW1lIH19KCkKICAgICAgLy8teyUgZW5kaWYgJX0KICAgICAgLy8teyUgZW5kaWYgJX0KICAgICAgLy8teyUgaWYgc2VydmljZU1ldGhvZHxoYXNSZXNwb25zZXMgJX0KICAgICAgICAvLy17JSBpZiBzZXJ2aWNlTWV0aG9kfHJlc3BvbnNlc0hhc0ZpZWxkTmFtZWRPSyAlfSAgICAgICAgICAgIAogICAgICAgIGlmIGxldCBvayA9IHJlc3BvbnNlcy5vayB7CiAgICAgICAgICBsZXQganNvbk9iamVjdCA9IG9rLmpzb25PYmplY3QoKQogICAgICAgICAgbGV0IHJlc3BvbnNlRGF0YSA9IHRyeSBKU09OU2VyaWFsaXphdGlvbi5kYXRhKHdpdGhKU09OT2JqZWN0Ompzb25PYmplY3QpCiAgICAgICAgICBsZXQgcmVzcG9uc2VTdHJpbmcgPSBTdHJpbmcoZGF0YTpyZXNwb25zZURhdGEsIGVuY29kaW5nOi51dGY4KSEKICAgICAgICAgIHRyeSByZXMuc2VuZChyZXNwb25zZVN0cmluZykuZW5kKCkgCgkJICByZXR1cm4gICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIH0gCiAgICAgICAgLy8teyUgZW5kaWYgJX0KICAgICAgICAvLy17JSBpZiBzZXJ2aWNlTWV0aG9kfHJlc3BvbnNlc0hhc0ZpZWxkTmFtZWRFcnJvciAlfSAgICAgICAgICAgICAgIAogICAgICAgIGlmIGxldCBlcnJvclJlc3BvbnNlID0gcmVzcG9uc2VzLmVycm9yIHsKICAgICAgICAgIHRyeSByZXMuc2VuZChzdGF0dXM6SFRUUFN0YXR1c0NvZGUocmF3VmFsdWU6SW50KGVycm9yUmVzcG9uc2UuY29kZSkpISkuZW5kKCkKCQkgIHJldHVybiAgICAgICAgICAgICAgIAogICAgICAgIH0KICAgICAgICAvLy17JSBlbmRpZiAlfQogICAgICAgIHRyeSByZXMuc2VuZChzdGF0dXM6LmludGVybmFsU2VydmVyRXJyb3IpLmVuZCgpCiAgICAgIC8vLXslIGVsc2UgJX0KICAgICAgdHJ5IHJlcy5zZW5kKHN0YXR1czouT0spLmVuZCgpCiAgICAgIC8vLXslIGVuZGlmICV9CiAgfQoKLy8teyUgZW5kZm9yICV9CiAgcmV0dXJuIHJvdXRlcgp9CgpwdWJsaWMgZnVuYyBpbml0aWFsaXplKHNlcnZpY2U6IFNlcnZpY2UsIHBvcnQ6SW50KSB7CiAgLy8gQ3JlYXRlIGEgbmV3IHJvdXRlcgogIGxldCByb3V0ZXIgPSBzZXJ2ZXIoc2VydmljZTpzZXJ2aWNlKQogIC8vIEFkZCBhbiBIVFRQIHNlcnZlciBhbmQgY29ubmVjdCBpdCB0byB0aGUgcm91dGVyCiAgS2l0dXJhLmFkZEhUVFBTZXJ2ZXIob25Qb3J0OnBvcnQsIHdpdGg6IHJvdXRlcikKfQoKcHVibGljIGZ1bmMgcnVuKCkgewogIC8vIFN0YXJ0IHRoZSBLaXR1cmEgcnVubG9vcCAodGhpcyBjYWxsIG5ldmVyIHJldHVybnMpCiAgS2l0dXJhLnJ1bigpCn0K",
    "types.swift": "Ly8gQ29tbW9uIHR5cGUgZGVjbGFyYXRpb25zCgovLy17JSBmb3Igc2VydmljZVR5cGUgaW4gcmVuZGVyZXIudHlwZXMgJX0KcHVibGljIGNsYXNzIHt7IHNlcnZpY2VUeXBlLm5hbWUgfX0gOiBDdXN0b21TdHJpbmdDb252ZXJ0aWJsZSB7CiAgLy8teyUgZm9yIHNlcnZpY2VUeXBlRmllbGQgaW4gc2VydmljZVR5cGUuZmllbGRzICV9CiAgcHVibGljIHZhciB7e3NlcnZpY2VUeXBlRmllbGQubmFtZX19IDoge3tzZXJ2aWNlVHlwZUZpZWxkLnR5cGVOYW1lfX0gPSB7e3NlcnZpY2VUeXBlRmllbGQuaW5pdGlhbFZhbHVlfX0KICAvLy17JSBlbmRmb3IgJX0KCiAgcHVibGljIGluaXQoKSB7fQoKLy8teyUgaWYgc2VydmljZVR5cGUuaXNJbnRlcmZhY2VUeXBlICV9CiAgcHVibGljIGluaXQ/KGpzb25PYmplY3Q6IEFueT8pIHsKICAgIGlmIGxldCBqc29uRGljdGlvbmFyeSA9IGpzb25PYmplY3QgYXM/IFtTdHJpbmc6QW55XSB7ICAKICAgICAgLy8teyUgZm9yIHNlcnZpY2VUeXBlRmllbGQgaW4gc2VydmljZVR5cGUuZmllbGRzICV9CiAgICAgIGlmIGxldCB2YWx1ZSA6IEFueSA9IGpzb25EaWN0aW9uYXJ5WyJ7eyBzZXJ2aWNlVHlwZUZpZWxkLmpzb25OYW1lIH19Il0gewogICAgICAgIC8vLXslIGlmIHNlcnZpY2VUeXBlRmllbGQuaXNBcnJheVR5cGUgJX0KICAgICAgICB2YXIgb3V0QXJyYXkgOiBbe3sgc2VydmljZVR5cGVGaWVsZC5lbGVtZW50VHlwZSB9fV0gPSBbXQogICAgICAgIGxldCBhcnJheSA9IHZhbHVlIGFzISBbQW55XQogICAgICAgIGZvciBhcnJheVZhbHVlIGluIGFycmF5IHsKICAgICAgICAgIGlmIGxldCBlbGVtZW50ID0ge3sgc2VydmljZVR5cGVGaWVsZC5lbGVtZW50VHlwZSB9fShqc29uT2JqZWN0OmFycmF5VmFsdWUpIHsKICAgICAgICAgICAgb3V0QXJyYXkuYXBwZW5kKGVsZW1lbnQpCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHNlbGYue3tzZXJ2aWNlVHlwZUZpZWxkLm5hbWV9fSA9IG91dEFycmF5CiAgICAgICAgLy8teyUgZW5kaWYgJX0KICAgICAgICAvLy17JSBpZiBzZXJ2aWNlVHlwZUZpZWxkLmlzQ2FzdGFibGVUeXBlICV9CiAgICAgICAgc2VsZi57e3NlcnZpY2VUeXBlRmllbGQubmFtZX19ID0gdmFsdWUgYXMhIHt7c2VydmljZVR5cGVGaWVsZC50eXBlTmFtZX19IAogICAgICAgIC8vLXslIGVuZGlmICV9CiAgICAgICAgLy8teyUgaWYgc2VydmljZVR5cGVGaWVsZC5pc0NvbnZlcnRhYmxlVHlwZSAlfQogICAgICAgIHNlbGYue3tzZXJ2aWNlVHlwZUZpZWxkLm5hbWV9fSA9IHt7c2VydmljZVR5cGVGaWVsZC50eXBlTmFtZX19KHZhbHVlKQogICAgICAgIC8vLXslIGVuZGlmICV9CiAgICAgIH0KICAgICAgLy8teyUgZW5kZm9yICV9ICAgCiAgICB9IGVsc2UgewogICAgICByZXR1cm4gbmlsCiAgICB9CiAgfQogICAgCiAgcHVibGljIGZ1bmMganNvbk9iamVjdCgpIC0+IEFueSB7IAogICAgdmFyIHJlc3VsdCA6IFtTdHJpbmc6QW55XSA9IFs6XQogICAgLy8teyUgZm9yIHNlcnZpY2VUeXBlRmllbGQgaW4gc2VydmljZVR5cGUuZmllbGRzICV9CiAgICAvLy17JSBpZiBzZXJ2aWNlVHlwZUZpZWxkLmlzQXJyYXlUeXBlICV9CiAgICB2YXIgb3V0QXJyYXkgOiBbQW55XSA9IFtdCiAgICBmb3IgYXJyYXlWYWx1ZSBpbiBzZWxmLnt7IHNlcnZpY2VUeXBlRmllbGQubmFtZSB9fSB7CiAgICAgIG91dEFycmF5LmFwcGVuZChhcnJheVZhbHVlLmpzb25PYmplY3QoKSkKICAgIH0KICAgIHJlc3VsdFsie3sgc2VydmljZVR5cGVGaWVsZC5qc29uTmFtZSB9fSJdID0gb3V0QXJyYXkKICAgIC8vLXslIGVuZGlmICV9ICAgICAgCiAgICAvLy17JSBpZiBzZXJ2aWNlVHlwZUZpZWxkLmlzQ2FzdGFibGVUeXBlICV9CiAgICByZXN1bHRbInt7IHNlcnZpY2VUeXBlRmllbGQuanNvbk5hbWUgfX0iXSA9IHNlbGYue3tzZXJ2aWNlVHlwZUZpZWxkLm5hbWV9fSAKICAgIC8vLXslIGVuZGlmICV9ICAgICAgCiAgICAvLy17JSBpZiBzZXJ2aWNlVHlwZUZpZWxkLmlzQ29udmVydGFibGVUeXBlICV9CiAgICByZXN1bHRbInt7IHNlcnZpY2VUeXBlRmllbGQuanNvbk5hbWUgfX0iXSA9IHNlbGYue3tzZXJ2aWNlVHlwZUZpZWxkLm5hbWV9fS5qc29uT2JqZWN0KCkgCiAgICAvLy17JSBlbmRpZiAlfQogICAgLy8teyUgZW5kZm9yICV9IAogICAgcmV0dXJuIHJlc3VsdAogIH0KICAKLy8teyUgZW5kaWYgJX0KICBwdWJsaWMgdmFyIGRlc2NyaXB0aW9uOiBTdHJpbmd7CiAgICByZXR1cm4gIlt7eyBzZXJ2aWNlVHlwZS5uYW1lIH19IiArCiAgICAvLy17JSBmb3Igc2VydmljZVR5cGVGaWVsZCBpbiBzZXJ2aWNlVHlwZS5maWVsZHMgJX0KICAgICAgIiB7eyBzZXJ2aWNlVHlwZUZpZWxkLm5hbWUgfX06IFwoc2VsZi57eyBzZXJ2aWNlVHlwZUZpZWxkLm5hbWUgfX0pIiArICAgCiAgICAvLy17JSBlbmRmb3IgJX0gICAgICAKICAgICJdIgogIH0KfQoKLy8teyUgZW5kZm9yICV9",
  ]
}

