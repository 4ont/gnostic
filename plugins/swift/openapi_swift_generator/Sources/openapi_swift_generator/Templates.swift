// GENERATED: DO NOT EDIT
//
// This file contains base64 encodings of templates used for Swift OpenAPI code generation.
//
func loadTemplates() -> [String:String] {
  return [
    "client.swift": "Ly8gQ2xpZW50IGNvZGUgCgppbXBvcnQgRm91bmRhdGlvbgppbXBvcnQgRGlzcGF0Y2gKCmVudW0gQ2xpZW50RXJyb3I6IFN3aWZ0LkVycm9yIHsKICBjYXNlIGVycm9yV2l0aENvZGUoSW50KQp9CgpwdWJsaWMgY2xhc3MgQ2xpZW50IHsKICB2YXIgc2VydmljZSA6IFN0cmluZwogIAogIHB1YmxpYyBpbml0KHNlcnZpY2U6IFN0cmluZykgewogICAgc2VsZi5zZXJ2aWNlID0gc2VydmljZQogIH0gCi8vLXslIGZvciBzZXJ2aWNlTWV0aG9kIGluIHJlbmRlcmVyLm1ldGhvZHMgJX0KCiAgLy8ge3sgc2VydmljZU1ldGhvZC5kZXNjcmlwdGlvbiB9fSBBc3luY2hyb25vdXMuCiAgcHVibGljIGZ1bmMge3sgc2VydmljZU1ldGhvZC5uYW1lIH19KHt7IC58YXN5bmNDbGllbnRQYXJhbWV0ZXJzRGVjbGFyYXRpb246c2VydmljZU1ldGhvZCB9fSkgdGhyb3dzIHsKICAgICAgdmFyIHBhdGggPSBzZWxmLnNlcnZpY2UgCiAgICAgIHBhdGggPSBwYXRoICsgInt7IHNlcnZpY2VNZXRob2QucGF0aCB9fSIKICAgICAgLy8teyUgZm9yIHNlcnZpY2VUeXBlRmllbGQgaW4gc2VydmljZU1ldGhvZHxwYXJhbWV0ZXJzVHlwZUZpZWxkcyAlfQogICAgICAvLy17JSBpZiBzZXJ2aWNlVHlwZUZpZWxkLnBvc2l0aW9uID09ICJwYXRoIiAlfQogICAgICBwYXRoID0gcGF0aC5yZXBsYWNpbmdPY2N1cnJlbmNlcyhvZjoieyIrInt7IHNlcnZpY2VUeXBlRmllbGQubmFtZSB9fSIrIn0iLCB3aXRoOiJcKHt7IHNlcnZpY2VUeXBlRmllbGQubmFtZSB9fSkiKQogICAgICAvLy17JSBlbmRpZiAlfQogICAgICAvLy17JSBlbmRmb3IgJX0KICAgICAgZ3VhcmQgbGV0IHVybCA9IFVSTChzdHJpbmc6cGF0aCkgZWxzZSB7CiAgICAgICAgdGhyb3cgQ2xpZW50RXJyb3IuZXJyb3JXaXRoQ29kZSgwKQogICAgICB9CiAgICAgIHZhciByZXF1ZXN0ID0gVVJMUmVxdWVzdCh1cmw6dXJsKQogICAgICByZXF1ZXN0Lmh0dHBNZXRob2QgPSAie3sgc2VydmljZU1ldGhvZC5tZXRob2QgfX0iCiAgICAgIC8vLXslIGZvciBzZXJ2aWNlVHlwZUZpZWxkIGluIHNlcnZpY2VNZXRob2R8cGFyYW1ldGVyc1R5cGVGaWVsZHMgJX0KICAgICAgLy8teyUgaWYgc2VydmljZVR5cGVGaWVsZC5wb3NpdGlvbiA9PSAiYm9keSIgJX0KICAgICAgbGV0IGpzb25PYmplY3QgPSB7eyBzZXJ2aWNlVHlwZUZpZWxkLm5hbWUgfX0uanNvbk9iamVjdCgpCiAgICAgIHJlcXVlc3QuaHR0cEJvZHkgPSB0cnkgSlNPTlNlcmlhbGl6YXRpb24uZGF0YSh3aXRoSlNPTk9iamVjdDpqc29uT2JqZWN0KQogICAgICAvLy17JSBlbmRpZiAlfQogICAgICAvLy17JSBlbmRmb3IgJX0KCSAgLy8teyUgaWYgc2VydmljZU1ldGhvZHxoYXNSZXNwb25zZXMgJX0KICAgICAgZmV0Y2gocmVxdWVzdCkgeyhkYXRhLCByZXNwb25zZSwgZXJyb3IpIGluCiAgICAgICAgaWYgZXJyb3IgIT0gbmlsIHsKICAgICAgICAgIGNhbGxiYWNrKG5pbCwgQ2xpZW50RXJyb3IuZXJyb3JXaXRoQ29kZSgwKSkKCSAgCSAgcmV0dXJuCiAgICAgICAgfQogICAgICAgIGd1YXJkIGxldCBodHRwUmVzcG9uc2UgPSByZXNwb25zZSBlbHNlIHsKICAgICAgICAgIGNhbGxiYWNrKG5pbCwgQ2xpZW50RXJyb3IuZXJyb3JXaXRoQ29kZSgwKSkKCQkgIHJldHVybgogICAgICAgIH0KICAgICAgICBpZiBodHRwUmVzcG9uc2Uuc3RhdHVzQ29kZSA9PSAyMDAgewogICAgICAgICAgaWYgbGV0IGRhdGEgPSBkYXRhIHsKICAgICAgICAgICAgbGV0IGpzb25PYmplY3QgPSB0cnkhIEpTT05TZXJpYWxpemF0aW9uLmpzb25PYmplY3Qod2l0aDpkYXRhKQogICAgICAgICAgICBpZiBsZXQgdmFsdWUgPSB7eyBzZXJ2aWNlTWV0aG9kLnJlc3VsdFR5cGVOYW1lICB9fShqc29uT2JqZWN0Ompzb25PYmplY3QpIHsgICAgICAgICAgCiAgICAgICAgICAgICAgY2FsbGJhY2sodmFsdWUsIG5pbCkKCQkJICByZXR1cm4KICAgICAgICAgICAgfQogICAgICAgICAgfQoJCSAgY2FsbGJhY2sobmlsLCBuaWwpCgkgICAgfSBlbHNlIHsKICAgICAgICAgIGNhbGxiYWNrKG5pbCwgQ2xpZW50RXJyb3IuZXJyb3JXaXRoQ29kZShodHRwUmVzcG9uc2Uuc3RhdHVzQ29kZSkpCiAgICAgICAgfQoJICB9CgkgIC8vLXslIGVsc2UgJX0KICAgICAgZmV0Y2gocmVxdWVzdCkgeyhkYXRhLCByZXNwb25zZSwgZXJyb3IpIGluCiAgICAgICAgaWYgZXJyb3IgIT0gbmlsIHsKICAgICAgICAgIGNhbGxiYWNrKENsaWVudEVycm9yLmVycm9yV2l0aENvZGUoMCkpCgkgIAkgIHJldHVybgogICAgICAgIH0KICAgICAgICBndWFyZCBsZXQgaHR0cFJlc3BvbnNlID0gcmVzcG9uc2UgZWxzZSB7CiAgICAgICAgICBjYWxsYmFjayhDbGllbnRFcnJvci5lcnJvcldpdGhDb2RlKDApKQoJCSAgcmV0dXJuCiAgICAgICAgfQogICAgICAgIGlmIGh0dHBSZXNwb25zZS5zdGF0dXNDb2RlID09IDIwMCB7CgkJICBjYWxsYmFjayhuaWwpCgkgICAgfSBlbHNlIHsKICAgICAgICAgIGNhbGxiYWNrKENsaWVudEVycm9yLmVycm9yV2l0aENvZGUoaHR0cFJlc3BvbnNlLnN0YXR1c0NvZGUpKQogICAgICAgIH0KCSAgfQkgIAkgIAoJICAvLy17JSBlbmRpZiAlfQkgIAogIH0KICAKICAvLyB7eyBzZXJ2aWNlTWV0aG9kLmRlc2NyaXB0aW9uIH19IFN5bmNocm9ub3VzLgogIHB1YmxpYyBmdW5jIHt7IHNlcnZpY2VNZXRob2QubmFtZSB9fSh7eyAufHN5bmNDbGllbnRQYXJhbWV0ZXJzRGVjbGFyYXRpb246c2VydmljZU1ldGhvZCB9fSkgdGhyb3dzIHt7IC58c3luY0NsaWVudFJldHVybkRlY2xhcmF0aW9uOnNlcnZpY2VNZXRob2QgfX0gewoJICBsZXQgc2VtID0gRGlzcGF0Y2hTZW1hcGhvcmUodmFsdWU6IDApCgkgIC8vLXslIGlmIHNlcnZpY2VNZXRob2R8aGFzUmVzcG9uc2VzICV9CgkgIHZhciByZXNwb25zZSA6IHt7IHNlcnZpY2VNZXRob2QucmVzdWx0VHlwZU5hbWUgfX0/CgkgIC8vLXslIGVuZGlmICV9CgkgIHZhciBlcnJvciA6IFN3aWZ0LkVycm9yPwoJICAvLy17JSBpZiBzZXJ2aWNlTWV0aG9kfGhhc1Jlc3BvbnNlcyAlfQkgIAoJICB0cnkge3sgc2VydmljZU1ldGhvZC5uYW1lIH19KHt7IHNlcnZpY2VNZXRob2R8cGFyYW1ldGVyRmllbGROYW1lcyB9fSkge3IsIGUgaW4KCSAgCSAgcmVzcG9uc2UgPSByIAoJICAvLy17JSBlbHNlICV9CgkgIHRyeSB7eyBzZXJ2aWNlTWV0aG9kLm5hbWUgfX0oe3sgc2VydmljZU1ldGhvZHxwYXJhbWV0ZXJGaWVsZE5hbWVzIH19KSB7ZSBpbgkgIAoJICAvLy17JSBlbmRpZiAlfQkgIAkgIAoJCSAgZXJyb3IgPSBlIAoJCSAgc2VtLnNpZ25hbCgpCgkgIH0KCSAgc2VtLndhaXQoKQoJICBpZiBsZXQgYWN0dWFsRXJyb3IgPSBlcnJvciB7CgkJICB0aHJvdyBhY3R1YWxFcnJvcgoJICB9CgkgIC8vLXslIGlmIHNlcnZpY2VNZXRob2R8aGFzUmVzcG9uc2VzICV9CSAgCgkgIGlmIGxldCBhY3R1YWxSZXNwb25zZSA9IHJlc3BvbnNlIHsKCQkgIHJldHVybiBhY3R1YWxSZXNwb25zZQoJICB9IGVsc2UgewoJCSAgdGhyb3cgQ2xpZW50RXJyb3IuZXJyb3JXaXRoQ29kZSgwKQoJICB9CgkgIC8vLXslIGVuZGlmICV9CiAgfQovLy17JSBlbmRmb3IgJX0KfQ==",
    "fetch.swift": "aW1wb3J0IEZvdW5kYXRpb24KaW1wb3J0IERpc3BhdGNoCmltcG9ydCBLaXR1cmFOZXQKCi8vIGZldGNoIG1ha2VzIGEgc3luY2hyb25vdXMgcmVxdWVzdCB1c2luZyBLaXR1cmFOZXQncyBDbGllbnRSZXF1ZXN0IGNsYXNzCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9JQk0tU3dpZnQvS2l0dXJhLW5ldC9ibG9iL21hc3Rlci9Tb3VyY2VzL0tpdHVyYU5ldC9DbGllbnRSZXF1ZXN0LnN3aWZ0CnB1YmxpYyBmdW5jIGZldGNoKF8gdXJsUmVxdWVzdDogVVJMUmVxdWVzdCkgLT4gKERhdGE/LCBIVFRQVVJMUmVzcG9uc2U/LCBFcnJvcj8pIHsKICB2YXIgZGF0YTogRGF0YT8KICB2YXIgdXJsUmVzcG9uc2U6IEhUVFBVUkxSZXNwb25zZT8KICBsZXQgZXJyb3I6IEVycm9yPyA9IG5pbCAvLyBtYWtlIHRoaXMgbXV0YWJsZSB3aGVuIHdlIHN0YXJ0IHVzaW5nIGl0CiAgbGV0IHNlbSA9IERpc3BhdGNoU2VtYXBob3JlKHZhbHVlOiAwKQogIGd1YXJkIGxldCBtZXRob2QgPSB1cmxSZXF1ZXN0Lmh0dHBNZXRob2QgZWxzZSB7CiAgICByZXR1cm4gKGRhdGEsIHVybFJlc3BvbnNlLCBlcnJvcikKICB9CiAgZ3VhcmQgbGV0IHVybCA9IHVybFJlcXVlc3QudXJsIGVsc2UgewogICAgcmV0dXJuIChkYXRhLCB1cmxSZXNwb25zZSwgZXJyb3IpCiAgfQogIGd1YXJkIGxldCBzY2hlbWUgPSB1cmwuc2NoZW1lIGVsc2UgewogICAgcmV0dXJuIChkYXRhLCB1cmxSZXNwb25zZSwgZXJyb3IpCiAgfQogIGd1YXJkIGxldCBob3N0ID0gdXJsLmhvc3QgZWxzZSB7CiAgICByZXR1cm4gKGRhdGEsIHVybFJlc3BvbnNlLCBlcnJvcikKICB9CiAgZ3VhcmQgbGV0IHBvcnQgPSB1cmwucG9ydCBlbHNlIHsKICAgIHJldHVybiAoZGF0YSwgdXJsUmVzcG9uc2UsIGVycm9yKQogIH0KICBsZXQgb3B0aW9ucyA6IFtDbGllbnRSZXF1ZXN0Lk9wdGlvbnNdID0gWwogICAgLm1ldGhvZChtZXRob2QpLAogICAgLnNjaGVtYShzY2hlbWUpLAogICAgLmhvc3RuYW1lKGhvc3QpLAogICAgLnBvcnQoSW50MTYocG9ydCkpLAogICAgLnBhdGgodXJsLnBhdGgpLAogICAgLy8gaGVhZGVycywgZXRjCiAgXQogIGxldCByZXF1ZXN0ID0gSFRUUC5yZXF1ZXN0KG9wdGlvbnMpIHsgKHJlc3BvbnNlKSBpbgogICAgZ3VhcmQgbGV0IHJlc3BvbnNlID0gcmVzcG9uc2UgZWxzZSB7CiAgICAgIHNlbS5zaWduYWwoKQogICAgICByZXR1cm4KICAgIH0KICAgIHZhciByZXNwb25zZURhdGEgPSBEYXRhKCkKICAgIGRvIHsKICAgICAgbGV0IGNvZGUgPSByZXNwb25zZS5odHRwU3RhdHVzQ29kZQogICAgICB0cnkgcmVzcG9uc2UucmVhZEFsbERhdGEoaW50bzogJnJlc3BvbnNlRGF0YSkKICAgICAgZGF0YSA9IHJlc3BvbnNlRGF0YQogICAgICB1cmxSZXNwb25zZSA9IEhUVFBVUkxSZXNwb25zZSh1cmw6dXJsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNDb2RlOmNvZGUucmF3VmFsdWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0dHBWZXJzaW9uOiJIVFRQLzEuMSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlckZpZWxkczpbOl0pCiAgICAgIHNlbS5zaWduYWwoKQogICAgICByZXR1cm4KICAgIH0gY2F0Y2ggewogICAgICBzZW0uc2lnbmFsKCkKICAgICAgcmV0dXJuCiAgICB9CiAgfQogIGlmIGxldCByZXF1ZXN0RGF0YSA9IHVybFJlcXVlc3QuaHR0cEJvZHkgewogICAgcmVxdWVzdC53cml0ZShmcm9tOnJlcXVlc3REYXRhKQogIH0KICByZXF1ZXN0LmVuZCgpIC8vIHNlbmQgdGhlIHJlcXVlc3QKICAvLyBub3cgd2FpdCBvbiB0aGUgc2VtYXBob3JlIGZvciBhIHJlc3BvbnNlCiAgbGV0IHJlc3VsdCA9IHNlbS53YWl0KHRpbWVvdXQ6IERpc3BhdGNoVGltZS5kaXN0YW50RnV0dXJlKQogIHN3aXRjaCByZXN1bHQgewogIGNhc2UgLnN1Y2Nlc3M6CiAgICByZXR1cm4gKGRhdGEsIHVybFJlc3BvbnNlLCBlcnJvcikKICBkZWZhdWx0OiAvLyBpbmNsdWRlcyAudGltZW91dAogICAgcmV0dXJuIChkYXRhLCB1cmxSZXNwb25zZSwgZXJyb3IpCiAgfQp9CgovLyBmZXRjaCBtYWtlcyBhbiBhc3luY2hyb25vdXMgcmVxdWVzdCB1c2luZyBLaXR1cmFOZXQncyBDbGllbnRSZXF1ZXN0IGNsYXNzCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9JQk0tU3dpZnQvS2l0dXJhLW5ldC9ibG9iL21hc3Rlci9Tb3VyY2VzL0tpdHVyYU5ldC9DbGllbnRSZXF1ZXN0LnN3aWZ0CnB1YmxpYyBmdW5jIGZldGNoKF8gdXJsUmVxdWVzdDogVVJMUmVxdWVzdCwgY2FsbGJhY2s6QGVzY2FwaW5nIChEYXRhPywgSFRUUFVSTFJlc3BvbnNlPywgRXJyb3I/KSAtPiAoKSkgewogIHZhciBkYXRhOiBEYXRhPwogIHZhciB1cmxSZXNwb25zZTogSFRUUFVSTFJlc3BvbnNlPwogIGxldCBlcnJvcjogRXJyb3I/ID0gbmlsIC8vIG1ha2UgdGhpcyBtdXRhYmxlIHdoZW4gd2Ugc3RhcnQgdXNpbmcgaXQKICBndWFyZCBsZXQgbWV0aG9kID0gdXJsUmVxdWVzdC5odHRwTWV0aG9kIGVsc2UgewogICAgY2FsbGJhY2sgKGRhdGEsIHVybFJlc3BvbnNlLCBlcnJvcikKCXJldHVybgogIH0KICBndWFyZCBsZXQgdXJsID0gdXJsUmVxdWVzdC51cmwgZWxzZSB7CiAgICBjYWxsYmFjayAoZGF0YSwgdXJsUmVzcG9uc2UsIGVycm9yKQoJcmV0dXJuCiAgfQogIGd1YXJkIGxldCBzY2hlbWUgPSB1cmwuc2NoZW1lIGVsc2UgewogICAgY2FsbGJhY2sgKGRhdGEsIHVybFJlc3BvbnNlLCBlcnJvcikKCXJldHVybgogIH0KICBndWFyZCBsZXQgaG9zdCA9IHVybC5ob3N0IGVsc2UgewogICAgY2FsbGJhY2sgKGRhdGEsIHVybFJlc3BvbnNlLCBlcnJvcikKCXJldHVybgogIH0KICBndWFyZCBsZXQgcG9ydCA9IHVybC5wb3J0IGVsc2UgewogICAgY2FsbGJhY2sgKGRhdGEsIHVybFJlc3BvbnNlLCBlcnJvcikKCXJldHVybgogIH0KICBsZXQgb3B0aW9ucyA6IFtDbGllbnRSZXF1ZXN0Lk9wdGlvbnNdID0gWwogICAgLm1ldGhvZChtZXRob2QpLAogICAgLnNjaGVtYShzY2hlbWUpLAogICAgLmhvc3RuYW1lKGhvc3QpLAogICAgLnBvcnQoSW50MTYocG9ydCkpLAogICAgLnBhdGgodXJsLnBhdGgpLAogICAgLy8gaGVhZGVycywgZXRjCiAgXQogIGxldCByZXF1ZXN0ID0gSFRUUC5yZXF1ZXN0KG9wdGlvbnMpIHsgKHJlc3BvbnNlKSBpbgogICAgZ3VhcmQgbGV0IHJlc3BvbnNlID0gcmVzcG9uc2UgZWxzZSB7CiAgICAgIGNhbGxiYWNrIChkYXRhLCB1cmxSZXNwb25zZSwgbmlsKQogICAgICByZXR1cm4KICAgIH0KICAgIHZhciByZXNwb25zZURhdGEgPSBEYXRhKCkKICAgIGRvIHsKICAgICAgbGV0IGNvZGUgPSByZXNwb25zZS5odHRwU3RhdHVzQ29kZQogICAgICB0cnkgcmVzcG9uc2UucmVhZEFsbERhdGEoaW50bzogJnJlc3BvbnNlRGF0YSkKICAgICAgZGF0YSA9IHJlc3BvbnNlRGF0YQogICAgICB1cmxSZXNwb25zZSA9IEhUVFBVUkxSZXNwb25zZSh1cmw6dXJsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNDb2RlOmNvZGUucmF3VmFsdWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0dHBWZXJzaW9uOiJIVFRQLzEuMSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlckZpZWxkczpbOl0pCiAgICAgIGNhbGxiYWNrIChkYXRhLCB1cmxSZXNwb25zZSwgbmlsKQogICAgICByZXR1cm4KICAgIH0gY2F0Y2ggewogICAgICBjYWxsYmFjayAoZGF0YSwgdXJsUmVzcG9uc2UsIG5pbCkKICAgICAgcmV0dXJuCiAgICB9CiAgfQogIGlmIGxldCByZXF1ZXN0RGF0YSA9IHVybFJlcXVlc3QuaHR0cEJvZHkgewogICAgcmVxdWVzdC53cml0ZShmcm9tOnJlcXVlc3REYXRhKQogIH0KICByZXF1ZXN0LmVuZCgpIC8vIHNlbmQgdGhlIHJlcXVlc3QKfQo=",
    "server.swift": "Ly8gU2VydmljZSBjb2RlCgppbXBvcnQgS2l0dXJhCmltcG9ydCBLaXR1cmFOZXQKaW1wb3J0IEZvdW5kYXRpb24KCi8vIEEgc2VydmVyIHJlcXVpcmVzIGFuIGluc3RhbmNlIG9mIGFuIGltcGxlbWVudGF0aW9uIG9mIHRoaXMgcHJvdG9jb2wuCnB1YmxpYyBwcm90b2NvbCBTZXJ2aWNlIHsKLy8teyUgZm9yIHNlcnZpY2VNZXRob2QgaW4gcmVuZGVyZXIubWV0aG9kcyAlfQogIC8vIHt7IHNlcnZpY2VNZXRob2QuZGVzY3JpcHRpb24gfX0KICBmdW5jIHt7IHNlcnZpY2VNZXRob2QubmFtZSB9fSAoe3sgLnxwcm90b2NvbFBhcmFtZXRlcnNEZWNsYXJhdGlvbjpzZXJ2aWNlTWV0aG9kIH19KSB0aHJvd3Mge3sgLnxwcm90b2NvbFJldHVybkRlY2xhcmF0aW9uOnNlcnZpY2VNZXRob2QgIH19Ci8vLXslIGVuZGZvciAlfQp9CgpmdW5jIGludFZhbHVlKF8gczpTdHJpbmc/KSAtPiBJbnQ2NCB7CiAgZ3VhcmQgbGV0IHMgPSBzIGVsc2UgewogICAgcmV0dXJuIDAKICB9CiAgZ3VhcmQgbGV0IHZhbHVlID0gSW50NjQocykgZWxzZSB7CiAgICByZXR1cm4gMAogIH0KICByZXR1cm4gdmFsdWUKfQoKcHVibGljIGZ1bmMgc2VydmVyKHNlcnZpY2UgOiBTZXJ2aWNlKSAtPiBSb3V0ZXIgewogIC8vIENyZWF0ZSBhIG5ldyByb3V0ZXIKICBsZXQgcm91dGVyID0gUm91dGVyKCkKCi8vLXslIGZvciBzZXJ2aWNlTWV0aG9kIGluIHJlbmRlcmVyLm1ldGhvZHMgJX0KICAvLyB7eyBzZXJ2aWNlTWV0aG9kLmRlc2NyaXB0aW9uIH19CiAgcm91dGVyLnt7IHNlcnZpY2VNZXRob2QubWV0aG9kfGxvd2VyY2FzZSB9fSgie3sgc2VydmljZU1ldGhvZHxraXR1cmFQYXRoIH19IikgeyByZXEsIHJlcywgbmV4dCBpbiAgICAgIAogICAgICAvLy17JSBpZiBzZXJ2aWNlTWV0aG9kfGhhc1BhcmFtZXRlcnMgJX0KICAgICAgLy8gaW5zdGFudGlhdGUgdGhlIHBhcmFtZXRlcnMgc3RydWN0dXJlCiAgICAgIGxldCBwYXJhbWV0ZXJzID0ge3sgc2VydmljZU1ldGhvZC5wYXJhbWV0ZXJzVHlwZU5hbWUgfX0oKQogICAgICAvLy17JSBmb3Igc2VydmljZVR5cGVGaWVsZCBpbiBzZXJ2aWNlTWV0aG9kfHBhcmFtZXRlcnNUeXBlRmllbGRzICV9CiAgICAgIC8vLXslIGlmIHNlcnZpY2VUeXBlRmllbGQucG9zaXRpb24gPT0gInBhdGgiICV9CiAgICAgIHBhcmFtZXRlcnMue3sgc2VydmljZVR5cGVGaWVsZC5uYW1lIH19ID0gaW50VmFsdWUocmVxLnBhcmFtZXRlcnNbInt7IHNlcnZpY2VUeXBlRmllbGQubmFtZSB9fSJdKQogICAgICAvLy17JSBlbmRpZiAlfQogICAgICAvLy17JSBlbmRmb3IgJX0gICAgIAogICAgICAvLy17JSBpZiBzZXJ2aWNlTWV0aG9kLm1ldGhvZCA9PSAiUE9TVCIgJX0KICAgICAgLy8gZGVzZXJpYWxpemUgcmVxdWVzdCBmcm9tIHBvc3QgZGF0YQogICAgICBsZXQgYm9keVN0cmluZyA9IHRyeSByZXEucmVhZFN0cmluZygpID8/ICIiCiAgICAgIGd1YXJkIGxldCBib2R5RGF0YSA9IGJvZHlTdHJpbmcuZGF0YSh1c2luZzoudXRmOCkgZWxzZSB7CiAgICAgICAgdHJ5IHJlcy5zZW5kKHN0YXR1czouYmFkUmVxdWVzdCkuZW5kKCkKICAgICAgICByZXR1cm4KICAgICAgfQogICAgICB2YXIganNvbk9iamVjdCA6IEFueT8gPSBuaWwKICAgICAgZG8gewogICAgICAgIGpzb25PYmplY3QgPSB0cnkgSlNPTlNlcmlhbGl6YXRpb24uanNvbk9iamVjdCh3aXRoOmJvZHlEYXRhKQogICAgICB9IGNhdGNoIHsKICAgICAgICB0cnkgcmVzLnNlbmQoc3RhdHVzOi5iYWRSZXF1ZXN0KS5lbmQoKQogICAgICAgIHJldHVybgogICAgICB9CiAgICAgIGd1YXJkIGxldCBib2R5T2JqZWN0ID0ge3sgc2VydmljZU1ldGhvZC5yZXN1bHRUeXBlTmFtZSB9fShqc29uT2JqZWN0Ompzb25PYmplY3QpIGVsc2UgewogICAgICAgIHRyeSByZXMuc2VuZChzdGF0dXM6LmJhZFJlcXVlc3QpLmVuZCgpCiAgICAgICAgcmV0dXJuCiAgICAgIH0KICAgICAgcGFyYW1ldGVycy57eyBzZXJ2aWNlTWV0aG9kfGJvZHlQYXJhbWV0ZXJGaWVsZE5hbWUgfX0gPSBib2R5T2JqZWN0CiAgICAgIC8vLXslIGVuZGlmICV9CiAgICAgIC8vLXslIGVuZGlmICV9CiAgICAgIC8vLXslIGlmIHNlcnZpY2VNZXRob2R8aGFzUGFyYW1ldGVycyAlfQogICAgICAvLy17JSBpZiBzZXJ2aWNlTWV0aG9kfGhhc1Jlc3BvbnNlcyAlfQogICAgICBsZXQgcmVzcG9uc2VzID0gdHJ5IHNlcnZpY2Uue3sgc2VydmljZU1ldGhvZC5uYW1lIH19KHBhcmFtZXRlcnMpCiAgICAgIC8vLXslIGVsc2UgJX0KICAgICAgdHJ5IHNlcnZpY2Uue3sgc2VydmljZU1ldGhvZC5uYW1lIH19KHBhcmFtZXRlcnMpCiAgICAgIC8vLXslIGVuZGlmICV9CiAgICAgIC8vLXslIGVsc2UgJX0KICAgICAgLy8teyUgaWYgc2VydmljZU1ldGhvZHxoYXNSZXNwb25zZXMgJX0KICAgICAgbGV0IHJlc3BvbnNlcyA9IHRyeSBzZXJ2aWNlLnt7IHNlcnZpY2VNZXRob2QubmFtZSB9fSgpCiAgICAgIC8vLXslIGVsc2UgJX0KICAgICAgdHJ5IHNlcnZpY2Uue3sgc2VydmljZU1ldGhvZC5uYW1lIH19KCkKICAgICAgLy8teyUgZW5kaWYgJX0KICAgICAgLy8teyUgZW5kaWYgJX0KICAgICAgLy8teyUgaWYgc2VydmljZU1ldGhvZHxoYXNSZXNwb25zZXMgJX0KICAgICAgICAvLy17JSBpZiBzZXJ2aWNlTWV0aG9kfHJlc3BvbnNlc0hhc0ZpZWxkTmFtZWRPSyAlfSAgICAgICAgICAgIAogICAgICAgIGlmIGxldCBvayA9IHJlc3BvbnNlcy5vayB7CiAgICAgICAgICBsZXQganNvbk9iamVjdCA9IG9rLmpzb25PYmplY3QoKQogICAgICAgICAgbGV0IHJlc3BvbnNlRGF0YSA9IHRyeSBKU09OU2VyaWFsaXphdGlvbi5kYXRhKHdpdGhKU09OT2JqZWN0Ompzb25PYmplY3QpCiAgICAgICAgICB0cnkgcmVzLnNlbmQoZGF0YTpyZXNwb25zZURhdGEpLmVuZCgpIAogICAgICAgICAgcmV0dXJuICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICB9IAogICAgICAgIC8vLXslIGVuZGlmICV9CiAgICAgICAgLy8teyUgaWYgc2VydmljZU1ldGhvZHxyZXNwb25zZXNIYXNGaWVsZE5hbWVkRXJyb3IgJX0gICAgICAgICAgICAgICAKICAgICAgICBpZiBsZXQgZXJyb3JSZXNwb25zZSA9IHJlc3BvbnNlcy5lcnJvciB7CiAgICAgICAgICBndWFyZCBsZXQgc3RhdHVzQ29kZSA9IEhUVFBTdGF0dXNDb2RlKHJhd1ZhbHVlOkludChlcnJvclJlc3BvbnNlLmNvZGUpKSBlbHNlIHsKICAgICAgICAgICAgdHJ5IHJlcy5zZW5kKHN0YXR1czoudW5rbm93bikuZW5kKCkKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICB9CiAgICAgICAgICB0cnkgcmVzLnNlbmQoc3RhdHVzOnN0YXR1c0NvZGUpLmVuZCgpCiAgICAgICAgICByZXR1cm4gICAgICAgICAgICAgICAKICAgICAgICB9CiAgICAgICAgLy8teyUgZW5kaWYgJX0KICAgICAgICB0cnkgcmVzLnNlbmQoc3RhdHVzOi5pbnRlcm5hbFNlcnZlckVycm9yKS5lbmQoKQogICAgICAvLy17JSBlbHNlICV9CiAgICAgIHRyeSByZXMuc2VuZChzdGF0dXM6Lk9LKS5lbmQoKQogICAgICAvLy17JSBlbmRpZiAlfQogIH0KCi8vLXslIGVuZGZvciAlfQogIHJldHVybiByb3V0ZXIKfQoKcHVibGljIGZ1bmMgaW5pdGlhbGl6ZShzZXJ2aWNlOiBTZXJ2aWNlLCBwb3J0OkludCkgewogIC8vIENyZWF0ZSBhIG5ldyByb3V0ZXIKICBsZXQgcm91dGVyID0gc2VydmVyKHNlcnZpY2U6c2VydmljZSkKICAvLyBBZGQgYW4gSFRUUCBzZXJ2ZXIgYW5kIGNvbm5lY3QgaXQgdG8gdGhlIHJvdXRlcgogIEtpdHVyYS5hZGRIVFRQU2VydmVyKG9uUG9ydDpwb3J0LCB3aXRoOiByb3V0ZXIpCn0KCnB1YmxpYyBmdW5jIHJ1bigpIHsKICAvLyBTdGFydCB0aGUgS2l0dXJhIHJ1bmxvb3AgKHRoaXMgY2FsbCBuZXZlciByZXR1cm5zKQogIEtpdHVyYS5ydW4oKQp9Cg==",
    "types.swift": "Ly8gQ29tbW9uIHR5cGUgZGVjbGFyYXRpb25zCgovLy17JSBmb3Igc2VydmljZVR5cGUgaW4gcmVuZGVyZXIudHlwZXMgJX0KcHVibGljIGNsYXNzIHt7IHNlcnZpY2VUeXBlLm5hbWUgfX0gOiBDdXN0b21TdHJpbmdDb252ZXJ0aWJsZSB7CiAgLy8teyUgZm9yIHNlcnZpY2VUeXBlRmllbGQgaW4gc2VydmljZVR5cGUuZmllbGRzICV9CiAgcHVibGljIHZhciB7e3NlcnZpY2VUeXBlRmllbGQubmFtZX19IDoge3tzZXJ2aWNlVHlwZUZpZWxkLnR5cGVOYW1lfX0gPSB7e3NlcnZpY2VUeXBlRmllbGQuaW5pdGlhbFZhbHVlfX0KICAvLy17JSBlbmRmb3IgJX0KCiAgcHVibGljIGluaXQoKSB7fQoKLy8teyUgaWYgc2VydmljZVR5cGUuaXNJbnRlcmZhY2VUeXBlICV9CiAgcHVibGljIGluaXQ/KGpzb25PYmplY3Q6IEFueT8pIHsKICAgIGlmIGxldCBqc29uRGljdGlvbmFyeSA9IGpzb25PYmplY3QgYXM/IFtTdHJpbmc6QW55XSB7ICAKICAgICAgLy8teyUgZm9yIHNlcnZpY2VUeXBlRmllbGQgaW4gc2VydmljZVR5cGUuZmllbGRzICV9CiAgICAgIGlmIGxldCB2YWx1ZSA6IEFueSA9IGpzb25EaWN0aW9uYXJ5WyJ7eyBzZXJ2aWNlVHlwZUZpZWxkLmpzb25OYW1lIH19Il0gewogICAgICAgIC8vLXslIGlmIHNlcnZpY2VUeXBlRmllbGQuaXNBcnJheVR5cGUgJX0KICAgICAgICB2YXIgb3V0QXJyYXkgOiBbe3sgc2VydmljZVR5cGVGaWVsZC5lbGVtZW50VHlwZSB9fV0gPSBbXQogICAgICAgIGxldCBhcnJheSA9IHZhbHVlIGFzISBbQW55XQogICAgICAgIGZvciBhcnJheVZhbHVlIGluIGFycmF5IHsKICAgICAgICAgIGlmIGxldCBlbGVtZW50ID0ge3sgc2VydmljZVR5cGVGaWVsZC5lbGVtZW50VHlwZSB9fShqc29uT2JqZWN0OmFycmF5VmFsdWUpIHsKICAgICAgICAgICAgb3V0QXJyYXkuYXBwZW5kKGVsZW1lbnQpCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHNlbGYue3tzZXJ2aWNlVHlwZUZpZWxkLm5hbWV9fSA9IG91dEFycmF5CiAgICAgICAgLy8teyUgZW5kaWYgJX0KICAgICAgICAvLy17JSBpZiBzZXJ2aWNlVHlwZUZpZWxkLmlzQ2FzdGFibGVUeXBlICV9CiAgICAgICAgc2VsZi57e3NlcnZpY2VUeXBlRmllbGQubmFtZX19ID0gdmFsdWUgYXMhIHt7c2VydmljZVR5cGVGaWVsZC50eXBlTmFtZX19IAogICAgICAgIC8vLXslIGVuZGlmICV9CiAgICAgICAgLy8teyUgaWYgc2VydmljZVR5cGVGaWVsZC5pc0NvbnZlcnRhYmxlVHlwZSAlfQogICAgICAgIHNlbGYue3tzZXJ2aWNlVHlwZUZpZWxkLm5hbWV9fSA9IHt7c2VydmljZVR5cGVGaWVsZC50eXBlTmFtZX19KHZhbHVlKQogICAgICAgIC8vLXslIGVuZGlmICV9CiAgICAgIH0KICAgICAgLy8teyUgZW5kZm9yICV9ICAgCiAgICB9IGVsc2UgewogICAgICByZXR1cm4gbmlsCiAgICB9CiAgfQogICAgCiAgcHVibGljIGZ1bmMganNvbk9iamVjdCgpIC0+IEFueSB7IAogICAgdmFyIHJlc3VsdCA6IFtTdHJpbmc6QW55XSA9IFs6XQogICAgLy8teyUgZm9yIHNlcnZpY2VUeXBlRmllbGQgaW4gc2VydmljZVR5cGUuZmllbGRzICV9CiAgICAvLy17JSBpZiBzZXJ2aWNlVHlwZUZpZWxkLmlzQXJyYXlUeXBlICV9CiAgICB2YXIgb3V0QXJyYXkgOiBbQW55XSA9IFtdCiAgICBmb3IgYXJyYXlWYWx1ZSBpbiBzZWxmLnt7IHNlcnZpY2VUeXBlRmllbGQubmFtZSB9fSB7CiAgICAgIG91dEFycmF5LmFwcGVuZChhcnJheVZhbHVlLmpzb25PYmplY3QoKSkKICAgIH0KICAgIHJlc3VsdFsie3sgc2VydmljZVR5cGVGaWVsZC5qc29uTmFtZSB9fSJdID0gb3V0QXJyYXkKICAgIC8vLXslIGVuZGlmICV9ICAgICAgCiAgICAvLy17JSBpZiBzZXJ2aWNlVHlwZUZpZWxkLmlzQ2FzdGFibGVUeXBlICV9CiAgICByZXN1bHRbInt7IHNlcnZpY2VUeXBlRmllbGQuanNvbk5hbWUgfX0iXSA9IHNlbGYue3tzZXJ2aWNlVHlwZUZpZWxkLm5hbWV9fSAKICAgIC8vLXslIGVuZGlmICV9ICAgICAgCiAgICAvLy17JSBpZiBzZXJ2aWNlVHlwZUZpZWxkLmlzQ29udmVydGFibGVUeXBlICV9CiAgICByZXN1bHRbInt7IHNlcnZpY2VUeXBlRmllbGQuanNvbk5hbWUgfX0iXSA9IHNlbGYue3tzZXJ2aWNlVHlwZUZpZWxkLm5hbWV9fS5qc29uT2JqZWN0KCkgCiAgICAvLy17JSBlbmRpZiAlfQogICAgLy8teyUgZW5kZm9yICV9IAogICAgcmV0dXJuIHJlc3VsdAogIH0KICAKLy8teyUgZW5kaWYgJX0KICBwdWJsaWMgdmFyIGRlc2NyaXB0aW9uOiBTdHJpbmd7CiAgICByZXR1cm4gIlt7eyBzZXJ2aWNlVHlwZS5uYW1lIH19IiArCiAgICAvLy17JSBmb3Igc2VydmljZVR5cGVGaWVsZCBpbiBzZXJ2aWNlVHlwZS5maWVsZHMgJX0KICAgICAgIiB7eyBzZXJ2aWNlVHlwZUZpZWxkLm5hbWUgfX06IFwoc2VsZi57eyBzZXJ2aWNlVHlwZUZpZWxkLm5hbWUgfX0pIiArICAgCiAgICAvLy17JSBlbmRmb3IgJX0gICAgICAKICAgICJdIgogIH0KfQoKLy8teyUgZW5kZm9yICV9",
  ]
}

